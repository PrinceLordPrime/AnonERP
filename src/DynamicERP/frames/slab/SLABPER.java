/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DynamicERP.frames.slab;

import DynamicERP.frames.paySeller.*;
import DB.PAK_SLABPER_DB;
import java.awt.Color;
import java.awt.GraphicsEnvironment;
import java.awt.event.FocusAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import logical.Conversions;
import DynamicERP.dialoge.viewforms.dialogeClass;
import java.awt.Graphics;
import java.util.Calendar;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JComboBox;

/**
 *
 * @author Shan
 */
public class SLABPER extends javax.swing.JFrame {

    /**
     * Creates new form SLABPER
     */
    
    Conversions dateField=new Conversions();
    public SLABPER() {
        initComponents();
        
        panel.setBorder(BorderFactory.createTitledBorder("Vouchers Invoice Properties: "));
        purchaseScrollPane.setBorder(BorderFactory.createTitledBorder("Payments Installments Adjustment: "));
        
        saveUpdateBtnVisible("all", false);
        textFieldsEditable(false);
        
        initPanel();
        try {
            setLastRec();
        } catch (ParseException ex) {
            Logger.getLogger(SLABPER.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        link9 = new javax.swing.JLabel();
        panel = new javax.swing.JPanel();
        btnEdit = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        btnexit = new javax.swing.JButton();
        btnFirst = new javax.swing.JButton();
        btnPrior = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        btnAddRow = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnSearchNow = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        to = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        oDate = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        cDate = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        btnDuplicate = new javax.swing.JButton();
        purchaseScrollPane = new javax.swing.JScrollPane();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(694, 527));
        setMinimumSize(new java.awt.Dimension(694, 527));
        setType(java.awt.Window.Type.POPUP);

        jPanel4.setBackground(new java.awt.Color(0, 102, 102));
        jPanel4.setPreferredSize(new java.awt.Dimension(1024, 50));

        jLabel9.setBackground(new java.awt.Color(0, 102, 102));
        jLabel9.setFont(new java.awt.Font("Impact", 0, 36)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Slab % Management");
        jLabel9.setToolTipText("");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));

        link9.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        link9.setForeground(new java.awt.Color(255, 255, 255));
        link9.setText("http://dspak.com | https://ds-pak.com | https://facebook.com/dspak | https://dailymotion.com/dspak");
        link9.setToolTipText("");
        link9.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        link9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                link9MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                link9MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                link9MouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                link9MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(link9)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(link9)
                .addContainerGap())
        );

        btnEdit.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnEdit.setMnemonic('E');
        btnEdit.setText("Edit");
        btnEdit.setMaximumSize(new java.awt.Dimension(85, 33));
        btnEdit.setMinimumSize(new java.awt.Dimension(85, 33));
        btnEdit.setPreferredSize(new java.awt.Dimension(85, 33));
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(0, 102, 51));
        btnAdd.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setMnemonic('A');
        btnAdd.setText("Add");
        btnAdd.setMaximumSize(new java.awt.Dimension(85, 33));
        btnAdd.setMinimumSize(new java.awt.Dimension(85, 33));
        btnAdd.setPreferredSize(new java.awt.Dimension(85, 33));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnSearch.setMnemonic('S');
        btnSearch.setText("Search");
        btnSearch.setMaximumSize(new java.awt.Dimension(85, 33));
        btnSearch.setMinimumSize(new java.awt.Dimension(85, 33));
        btnSearch.setPreferredSize(new java.awt.Dimension(85, 33));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnView.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnView.setMnemonic('V');
        btnView.setText("View");
        btnView.setMaximumSize(new java.awt.Dimension(85, 33));
        btnView.setMinimumSize(new java.awt.Dimension(85, 33));
        btnView.setPreferredSize(new java.awt.Dimension(85, 33));
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnDel.setBackground(new java.awt.Color(255, 102, 102));
        btnDel.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnDel.setMnemonic('D');
        btnDel.setText("Delete");
        btnDel.setMaximumSize(new java.awt.Dimension(85, 33));
        btnDel.setMinimumSize(new java.awt.Dimension(85, 33));
        btnDel.setPreferredSize(new java.awt.Dimension(85, 33));
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });

        btnexit.setBackground(new java.awt.Color(0, 102, 102));
        btnexit.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnexit.setForeground(new java.awt.Color(255, 255, 255));
        btnexit.setMnemonic('X');
        btnexit.setText("Exit");
        btnexit.setMaximumSize(new java.awt.Dimension(85, 33));
        btnexit.setMinimumSize(new java.awt.Dimension(85, 33));
        btnexit.setPreferredSize(new java.awt.Dimension(85, 33));
        btnexit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnexitActionPerformed(evt);
            }
        });

        btnFirst.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oracledms/frames/resources/L2_24.png"))); // NOI18N
        btnFirst.setMnemonic('F');
        btnFirst.setText("First");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });

        btnPrior.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnPrior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oracledms/frames/resources/L1_24.png"))); // NOI18N
        btnPrior.setMnemonic('P');
        btnPrior.setText("Prior");
        btnPrior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPriorActionPerformed(evt);
            }
        });

        btnNext.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oracledms/frames/resources/R1_24.png"))); // NOI18N
        btnNext.setMnemonic('N');
        btnNext.setText("Next");
        btnNext.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnLast.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oracledms/frames/resources/R2_24.png"))); // NOI18N
        btnLast.setMnemonic('L');
        btnLast.setText("Last");
        btnLast.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });

        btnAddRow.setMnemonic('A');
        btnAddRow.setText("Add Row");
        btnAddRow.setMaximumSize(new java.awt.Dimension(85, 33));
        btnAddRow.setMinimumSize(new java.awt.Dimension(85, 33));
        btnAddRow.setPreferredSize(new java.awt.Dimension(85, 33));
        btnAddRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRowActionPerformed(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnSave.setMnemonic('S');
        btnSave.setText("Save");
        btnSave.setMaximumSize(new java.awt.Dimension(85, 33));
        btnSave.setMinimumSize(new java.awt.Dimension(85, 33));
        btnSave.setPreferredSize(new java.awt.Dimension(85, 33));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnUpdate.setMnemonic('U');
        btnUpdate.setText("update");
        btnUpdate.setMaximumSize(new java.awt.Dimension(85, 33));
        btnUpdate.setMinimumSize(new java.awt.Dimension(85, 33));
        btnUpdate.setPreferredSize(new java.awt.Dimension(85, 33));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnSearchNow.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnSearchNow.setMnemonic('S');
        btnSearchNow.setText("Search Now");
        btnSearchNow.setMaximumSize(new java.awt.Dimension(85, 33));
        btnSearchNow.setMinimumSize(new java.awt.Dimension(85, 33));
        btnSearchNow.setPreferredSize(new java.awt.Dimension(85, 33));
        btnSearchNow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchNowActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnCancel.setMnemonic('C');
        btnCancel.setText("Cancel");
        btnCancel.setMaximumSize(new java.awt.Dimension(85, 33));
        btnCancel.setMinimumSize(new java.awt.Dimension(85, 33));
        btnCancel.setPreferredSize(new java.awt.Dimension(85, 33));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        to.setEditable(false);
        to.setBackground(new java.awt.Color(204, 255, 204));
        to.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toActionPerformed(evt);
            }
        });

        jLabel1.setText("TO #");

        jLabel3.setForeground(new java.awt.Color(255, 51, 51));
        jLabel3.setText("Auto ");

        oDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                oDateFocusLost(evt);
            }
        });

        jLabel5.setText("Opening Date:");

        cDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cDateFocusLost(evt);
            }
        });

        jLabel6.setText("Closing Date:");

        btnDuplicate.setBackground(new java.awt.Color(0, 102, 51));
        btnDuplicate.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnDuplicate.setForeground(new java.awt.Color(255, 255, 255));
        btnDuplicate.setMnemonic('U');
        btnDuplicate.setText("Duplicate");
        btnDuplicate.setMaximumSize(new java.awt.Dimension(85, 33));
        btnDuplicate.setMinimumSize(new java.awt.Dimension(85, 33));
        btnDuplicate.setPreferredSize(new java.awt.Dimension(85, 33));
        btnDuplicate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDuplicateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnDuplicate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(btnDel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnexit, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(104, 104, 104))
            .addGroup(panelLayout.createSequentialGroup()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnFirst, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPrior, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(2, 2, 2)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(to, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(oDate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cDate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3))))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(btnAddRow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearchNow, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLast, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNext, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnDel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnexit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnDuplicate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnNext)
                            .addComponent(btnFirst)))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(to, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(oDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPrior, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnLast, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnAddRow, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSave, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchNow, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 694, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(purchaseScrollPane)
                    .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(purchaseScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void link9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_link9MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_link9MouseClicked

    private void link9MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_link9MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_link9MouseEntered

    private void link9MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_link9MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_link9MouseExited

    private void link9MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_link9MouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_link9MouseReleased
    String invNo1;
    String remarks1;
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        forBackBtnEnable(false);
        recEditBtnEnable(false);

        textFieldsEditable(true);
        saveUpdateBtnVisible("update", true);
        
        ////System.out.println("At EDIT Max PC:"+productCount);
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        forBackBtnEnable(false);
        recEditBtnEnable(false);
        saveUpdateBtnVisible("save", true);
        textFieldsEditable(true);
        setNullTextFields();
        inetializePrductPanel();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        forBackBtnEnable(false);
        recEditBtnEnable(false);
        saveUpdateBtnVisible("search", true);
        textFieldsEditable(false);
        to.setEditable(true);
        setNullTextFields();
        to.requestFocus();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
 //               /*
        try {
            dialogeClass.createViewSlabWin();
        } catch (SQLException ex) {
            Logger.getLogger(SLABPER.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(DynamicERP.dialoge.viewforms.ViewForm1.isSaved){
            to.setText(dialogeClass.toSlab);
            findRecords(to.getText());
        }
//                */
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
        JFrame j=new JFrame();
        j.setAlwaysOnTop(true);
        if(JOptionPane.showConfirmDialog(j,
            "Are you sure ! \nOn selecting \"Yes\" this will Delete the tasks?", "Confermation Diloge",
            JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){ //ConfermationDiloge()){
        PAK_SLABPER_DB data =new PAK_SLABPER_DB();
        Connection conn;
        try {
            conn = data.connect_database();
            boolean tf=false;
            if(to.getText()==null){
            }else{
                data.delete_purchase(conn,to.getText());
//                data.delete_purchase_products_in_purchase(conn,to.getText());
//                data.delete_all_suppleg(conn, to.getText());
                setNullTextFields();
                try {
                    setLastRec();
                } catch (ParseException ex) {
                    Logger.getLogger(SLABPER.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(SLABPER.class.getName()).log(Level.SEVERE, null, ex);
        }
        }else{

        }
    }//GEN-LAST:event_btnDelActionPerformed

    private void btnexitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnexitActionPerformed
        this.dispose();
        DynamicERP.dialoge.newdataentry.dialogeClass.disposePaysellerWin();
    }//GEN-LAST:event_btnexitActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        try {
            setFirstRec();
        } catch (ParseException ex) {
            Logger.getLogger(SLABPER.class.getName()).log(Level.SEVERE, null, ex);
        }
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnPriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPriorActionPerformed
        // SELECT LAG(p.FirstName) OVER (ORDER BY p.BusinessEntityID) PreviousValue,p.FirstName FROM Person.Person p
        PAK_SLABPER_DB data =new PAK_SLABPER_DB();
        Connection conn;
        try {
            conn = data.connect_database();
            ArrayList<String> prior = new ArrayList<String>();
            prior=data.prior_purchase(conn,to.getText());
            if(prior!=null){
                setTextinPurchase(prior, dateField);
            }else{
                JFrame j=new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Prior not found", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
            }

            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(SLABPER.class.getName()).log(Level.SEVERE, null, ex);
        }
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
    }//GEN-LAST:event_btnPriorActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // SELECT LAG(p.FirstName) OVER (ORDER BY p.BusinessEntityID) PreviousValue,p.FirstName FROM Person.Person p
        PAK_SLABPER_DB data =new PAK_SLABPER_DB();
        Connection conn;
        try {
            conn = data.connect_database();
            ArrayList<String> next = new ArrayList<String>();
            next=data.next_purchase(conn,to.getText());
            if(next!=null){
                setTextinPurchase(next, dateField);
            }else{
                JFrame j=new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Next not found", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
            }
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(SLABPER.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        try {
            setLastRec();
        } catch (ParseException ex) {
            Logger.getLogger(SLABPER.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnAddRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRowActionPerformed
        if(isAddable){
            addRow();
        }
        //System.out.println("At ADD ROW Max PC:"+productCount);
    }//GEN-LAST:event_btnAddRowActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if((oDate.getDate()!=null)&&(cDate.getDate()!=null)){
            PAK_SLABPER_DB data =new PAK_SLABPER_DB();
            Connection conn;
            int max=0,codeInt=0;
            try {
                conn = data.connect_database();
                boolean tf=false;
                if(isDateBigger()){
                    max=data.find_max_in_purchase_code(conn);
                    System.out.println("Max:"+max);
                    if(max==0){
                        codeInt=1;
                    }else{
                        codeInt=max+1;
                    }
                    if(data.checkDates(conn,dateField.toReturnedDate(oDate.getDate().toString())+"",dateField.toReturnedDate(cDate.getDate().toString())+"",codeInt+"")&&isAddable){
                        for(int i=1;i<=productCount;i++){
                            if(purchaseProducts[i]!=null&&purchaseProducts[i].isDisplayable()){
                                ///Max
                                ///Max                 String.valueOf(codeInt)
        ///*
                                tf=data.insert_purchase_products_in_table(conn,
                                    //tono,pcode,srno,odate,cdate,stpcs,endpcs,unitd,schrs
                                    codeInt+"",
                                    purchaseProducts[i].getSeqno().getText(),
                                    dateField.toDateString(oDate.getDate().toString()),
                                    dateField.toDateString(cDate.getDate().toString()),
                                    purchaseProducts[i].getStPcs().getText(),
                                    purchaseProducts[i].getEndPcs().getText(),
                                    purchaseProducts[i].getSchRs().getText());
        //                        */
                            }//seqno,dealcode,pcode,qty,rate,disc
                        }
                    }else{
                        JFrame j=new JFrame();
                        j.setAlwaysOnTop(true);
                        JOptionPane.showMessageDialog(j, "Please check your Entered Dates and Product", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
                //                tf=insert_purchase_products_in_table(conn,docno,seqno,pcode,perqty,perrate,grossamount,discper,discrs,taxper,taxrs,netamount);
                if(tf){
//                    to.setEditable(false);
//                    unitDevisor.setEditable(false);
                    
                    to.setText(codeInt+"");
                    forBackBtnEnable(true);
                    recEditBtnEnable(true);
                    recEditActionBtnVisible(false);
                    textFieldsEditable(false);
                    editableProductPanel(false);
                    saveUpdateBtnVisible("all", false);
                    loadProductsPanel(codeInt+"");
                }else{
                    JFrame j=new JFrame();
                    j.setAlwaysOnTop(true);
                    JOptionPane.showMessageDialog(j, "Sorry for the inconvenience", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
                }
                ////System.out.println("Is Inserted :"+ tf);
                data.close_database(conn);
//*/
            } catch (SQLException ex) {
                Logger.getLogger(SLABPER.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(SLABPER.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            JFrame j=new JFrame();
            j.setAlwaysOnTop(true);
            JOptionPane.showMessageDialog(j, "Enter Dates \n OR Press Cancel to Contine  ", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
                
        boolean tf=false;
        PAK_SLABPER_DB data =new PAK_SLABPER_DB();
        Connection conn;
        try {
            conn = data.connect_database();
            if(isDateBigger()){
                System.out.println("========btnUpdateActionPerformed========productCount:"+productCount);
                if(data.checkUpdDates(conn, dateField.toReturnedDate(oDate.getDate().toString())+"", dateField.toReturnedDate(cDate.getDate().toString())+"", to.getText())&&isAddable){
                    for(int i=1;i<=productCount;i++){
                        if(purchaseProducts[i]!=null&&purchaseProducts[i].isDisplayable()){
                            System.out.println("Out");
                            if(!purchaseProducts[i].getStPcs().getText().isEmpty()){
                            System.out.println("In");
                                boolean isPresent=false;
                                PAK_SLABPER_DB data1 =new PAK_SLABPER_DB();
                                Connection conn1;
                                try {
                                    conn1 = data1.connect_database();
                                    if(data.find_max_in_purchase_products(conn1, to.getText())<=productCount){
                                        isPresent=data1.check_product_line_item_presence_new(conn1,
                                            to.getText(),
                                            purchaseProducts[i].getSeqno().getText(),
                                            productCount);
                                    }else{
                                        isPresent=false;
                                    }
                                    data1.close_database(conn1);
                                } catch (SQLException ex) {
                                    Logger.getLogger(SLABPER.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                //System.out.println("isPresent->"+isPresent);
                                if(isPresent){
                                   System.out.println(to.getText()+""+" UPDATE-> "+purchaseProducts[i].getSeqno().getText());

                                    PAK_SLABPER_DB data2 =new PAK_SLABPER_DB();
                                    Connection conn2;
                                    try {

                                        conn2 = data2.connect_database();

                                        tf=data2.update_purchase_products_in_table_new(conn2,
                                            to.getText()+"",
                                            purchaseProducts[i].getSeqno().getText(),
                                            dateField.toDateString(oDate.getDate().toString()),
                                            dateField.toDateString(cDate.getDate().toString()),
                                            purchaseProducts[i].getStPcs().getText(),
                                            purchaseProducts[i].getEndPcs().getText(),
                                            purchaseProducts[i].getSchRs().getText());

                                            System.out.println("isCorrect"+isCorrect);
                                            System.out.println("isCorrect1"+isCorrect1);
                                            System.out.println("isCorrect2"+isCorrect2);
                                            System.out.println("isCorrect3"+isCorrect3);
                                            //seqno,dealcode,pcode,qty,rate,disc
                                        data2.close_database(conn2);
                                        System.out.println("Upgdate tf : "+tf);
                                    } catch (SQLException ex) {
                                        System.out.println("SQLException "+ex);
                                        Logger.getLogger(SLABPER.class.getName()).log(Level.SEVERE, null, ex);
        //                            } catch (ParseException ex) {
        //                            Logger.getLogger(SLABPER.class.getName()).log(Level.SEVERE, null, ex);
                                } catch (ParseException ex) {
                                    Logger.getLogger(SLABPER.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                }else {
                                    //System.out.println(invNo.getText()+""+" INSERT-> "+purchaseProducts[i].getSeqNoText());
                                    PAK_SLABPER_DB data3 =new PAK_SLABPER_DB();
                                    Connection conn3;
                                    try {//DOCNO,ACCODE,TYPE,AMOUNT,SEQNO
                                        conn3 = data3.connect_database();
                                        tf=data3.insert_purchase_products_in_table(conn3,
                                            //tono,pcode,srno,odate,cdate,stpcs,endpcs,unitd,schrs
                                            to.getText(),
                                            purchaseProducts[i].getSeqno().getText(),
                                            dateField.toDateString(oDate.getDate().toString()),
                                            dateField.toDateString(cDate.getDate().toString()),
                                            purchaseProducts[i].getStPcs().getText(),
                                            purchaseProducts[i].getEndPcs().getText(),
                                            purchaseProducts[i].getSchRs().getText());
                                            System.out.println("Insert tf : "+tf);
                                        System.out.println("insert_purchase_products_in_table: "+tf);
                                        data3.close_database(conn3);
                                    } catch (SQLException ex) {
                                        System.out.println("SQLException "+ex);
                                        Logger.getLogger(SLABPER.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (ParseException ex) {
                                    Logger.getLogger(SLABPER.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                }
                            }else{
                                JFrame j=new JFrame();
                                j.setAlwaysOnTop(true);
                                JOptionPane.showMessageDialog(j, "Empty Seek Value will not be updatd \n Nor will be deleted", "InfoBox: ", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(SLABPER.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(SLABPER.class.getName()).log(Level.SEVERE, null, ex);
        }
            if(tf){
                saveUpdateBtnVisible("all", false);
                forBackBtnEnable(true);
                recEditBtnEnable(true);
                recEditActionBtnVisible(false);
                textFieldsEditable(false);
                editableProductPanel(false);
            }else{
                JFrame j=new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Not Edited.....!!!!!\n Check date frist and other record & Enter Correct Specifications..... (',')", "InfoBox: ", JOptionPane.ERROR_MESSAGE);
            }
            loadProductsPanel(to.getText());
        ////System.out.println("At UPDATE Max PC:"+productCount);
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnSearchNowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchNowActionPerformed
        findRecords(to.getText());
    }//GEN-LAST:event_btnSearchNowActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        saveUpdateBtnVisible("all", false);
        forBackBtnEnable(true);
        recEditBtnEnable(true);
        textFieldsEditable(false);
        try {
            setFirstRec();
        } catch (ParseException ex) {
            Logger.getLogger(SLABPER.class.getName()).log(Level.SEVERE, null, ex);
        }
//        editableProductPanel(false);
//        editableProductPanel(false);
//        editableProductPanel(false);
//        editableProductPanel(false);
//        editableProductPanel(false);
//        editableProductPanel(false);
//        editableProductPanel(false);
//        editableProductPanel(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void toActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_toActionPerformed

    private void cDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cDateFocusLost
//        Calendar date = Calendar.getInstance();Calendar date1 = Calendar.getInstance();
//        date.setTime(oDate.getDate());date1.setTime(cDate.getDate());
//        if(date1.getTimeInMillis()<=date.getTimeInMillis()){
//        
//        }else{
//            JDateChooser j = (JDateChooser)evt.getSource();
//            j.requestFocus();
//        }
        boolean b = isDateBigger();
    }//GEN-LAST:event_cDateFocusLost

    private void oDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_oDateFocusLost
        boolean b = isDateBigger();
    }//GEN-LAST:event_oDateFocusLost

    private void btnDuplicateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDuplicateActionPerformed
        forBackBtnEnable(false);
        recEditBtnEnable(false);
        saveUpdateBtnVisible("save", true);
        textFieldsEditable(true);
     //   setNullTextFields();
      //  inetializePrductPanel();
        to.setText("");
    }//GEN-LAST:event_btnDuplicateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SLABPER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SLABPER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SLABPER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SLABPER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SLABPER().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAddRow;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnDuplicate;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrior;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSearchNow;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnView;
    private javax.swing.JButton btnexit;
    private com.toedter.calendar.JDateChooser cDate;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel link9;
    private com.toedter.calendar.JDateChooser oDate;
    private javax.swing.JPanel panel;
    private javax.swing.JScrollPane purchaseScrollPane;
    private javax.swing.JTextField to;
    // End of variables declaration//GEN-END:variables
    
      // Start of my variables declaration   
   
    private static int productCount=0;
    private static PakSchemeRsFieldsPanel[] purchaseProducts = new PakSchemeRsFieldsPanel[500];
    private static DealProHeaderPanel purchaseHeaderPanel= new DealProHeaderPanel();
    private static JPanel purchasePanel;// = new JPanel();
    //
    private void forBackBtnEnable(boolean b) {
       btnFirst.setEnabled(b);
       btnLast.setEnabled(b);
       btnPrior.setEnabled(b);
       btnNext.setEnabled(b);
    }

    private void recEditBtnEnable(boolean b) {
        btnAdd.setEnabled(b);
        btnDel.setEnabled(b);
        btnSearch.setEnabled(b);
        btnView.setEnabled(b);
        btnEdit.setEnabled(b);
        btnDuplicate.setEnabled(b);
    }

    private void saveUpdateBtnVisible(String s, boolean visibleProperty) {
        switch (s.toLowerCase()) {
            case "save":
                btnSave.setVisible(visibleProperty);
                break;
            case "update":
                btnUpdate.setVisible(visibleProperty);
                break;
            case "search":
                btnSearchNow.setVisible(visibleProperty);
                break;
            case "all":
                btnSearchNow.setVisible(visibleProperty);
                btnSave.setVisible(visibleProperty);
                btnUpdate.setVisible(visibleProperty);
                break;
        }
        btnCancel.setVisible(visibleProperty);
        btnAddRow.setVisible(visibleProperty);
        
    }
   
    private void textFieldsEditable(boolean b) {
        to.setEditable(false);
//        pCode.setEditable(b);
        oDate.setEnabled(b);
        cDate.setEnabled(b);
        editableProductPanel(b); 
        
    }
    private void editableProductPanel(boolean b) {
        for(int i=1;i<=productCount;i++){
           if(purchaseProducts[i]!=null){
               purchaseProducts[i].textFieldsEditableProducts(b);
           }
           
        }
    }
    private void setNullTextFields() {
        to.setText("");
        try {
            oDate.setDate(dateField.getPresentDate());
            cDate.setDate(dateField.getPresentDate());
        } catch (ParseException ex) {
            Logger.getLogger(SLABPER.class.getName()).log(Level.SEVERE, null, ex);
        }
        inetializePrductPanel();
    }

    private void inetializePrductPanel() {
        /*
        for (int i = 1; i <= productCount; i++) {
            System.out.println("getStPcs and Removing . . ."+purchaseProducts[i].getStPcs().getText());
            purchaseProducts[i].getStPcs().setText("zzzz");
            System.out.println("getEndPcs and Removing  . . ."+purchaseProducts[i].getEndPcs().getText());
            purchaseProducts[i].getEndPcs().setText("zzzz");
        }
        */
        purchasePanel.removeAll();
        purchasePanel.revalidate();
        purchasePanel.repaint();
        productCount=0;
        purchasePanel.add(purchaseHeaderPanel);
        editableProductPanel(true);
        addRow();
    }
    boolean isCorrect;
    boolean isCorrect1;
    boolean isCorrect2;
    boolean isCorrect3;
    private void addRow() {
        productCount=productCount+1;
        purchaseProducts[productCount]=new PakSchemeRsFieldsPanel();
        purchaseProducts[productCount].setName(productCount+"");
        purchaseProducts[productCount].getSeqno().setText(productCount+"");
        System.out.println("");
        System.out.println("");
        if(productCount==1){
            purchaseProducts[productCount].getStPcs().setText("1");
            purchaseProducts[productCount].getEndPcs().setText("1");
        }else{
            for(int i = productCount;(i>productCount-10)&&i>0;i--){
                if(purchaseProducts[i-1]!=null&&purchaseProducts[i-1].isDisplayable()){
                    purchaseProducts[productCount].getStPcs().setText((Integer.parseInt(purchaseProducts[i-1].getEndPcs().getText())+1)+"");
                    purchaseProducts[productCount].getEndPcs().setText((Integer.parseInt(purchaseProducts[i-1].getEndPcs().getText())+1)+"");                                                                                                                                                          
                    break;
                }
            }
        }
        purchaseProducts[productCount].getEndPcs().addFocusListener(new FocusAdapter(){
            public void focusLost(java.awt.event.FocusEvent evt) {                                                                                                                                                                                                                                   JTextField j = (JTextField)evt.getSource();
                int preStPcs=0,nextStPcs=0,endPcs=0;
                isCorrect=false;
                isCorrect1=false;
                preStPcs=Integer.parseInt(purchaseProducts[Integer.parseInt(j.getParent().getName())].getStPcs().getText()) ;
                endPcs=Integer.parseInt(purchaseProducts[Integer.parseInt(j.getParent().getName())].getEndPcs().getText()) ;
                for (int i = Integer.parseInt(j.getParent().getName()); i < (Integer.parseInt(j.getParent().getName())+10); i++) {
                    if(purchaseProducts[i+1]!=null&&purchaseProducts[i+1].isDisplayable()){
                            nextStPcs=Integer.parseInt(purchaseProducts[i+1].getStPcs().getText()) ;
                            if((nextStPcs>endPcs)){
                                isCorrect=true;
                            }else{
                                isCorrect=false;
                                j.selectAll();
                                j.requestFocus();
                            }                                                                                                                                                                                                                                                                          
                            break;
                    }else{
                        isCorrect=true;
                    }
                }
                if((preStPcs<=endPcs)){
                    isCorrect1=true;
                }else{
                    isCorrect1=false;
                    j.selectAll();
                    j.requestFocus();
                }  
                if(isCorrect1&&isCorrect){
                   isAddable=true;
                }else{
                    isAddable=false;
                    JFrame j1=new JFrame();
                    j1.setAlwaysOnTop(true);
                    JOptionPane.showMessageDialog(j1, "Not Correct Values in one of the fields ", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        });
        purchaseProducts[productCount].getStPcs().addFocusListener(new FocusAdapter(){
            public void focusLost(java.awt.event.FocusEvent evt) {                                                                                                                                              JTextField j = (JTextField)evt.getSource();
                int stPcs=0,nextEndPcs=0,upperEndPcs=0;
                isCorrect2=false;
                isCorrect3=false;
                stPcs=Integer.parseInt(purchaseProducts[Integer.parseInt(j.getParent().getName())].getStPcs().getText()) ;
                nextEndPcs=Integer.parseInt(purchaseProducts[Integer.parseInt(j.getParent().getName())].getEndPcs().getText()) ;
                for (int i = Integer.parseInt(j.getParent().getName()); ((i > Integer.parseInt(j.getParent().getName())-10)&&(i>0)); i--) {
                    if(purchaseProducts[i-1]!=null&&purchaseProducts[i-1].isDisplayable()){
                        upperEndPcs=Integer.parseInt(purchaseProducts[i-1].getEndPcs().getText()) ;
                        if((stPcs>upperEndPcs)){
                            isCorrect2=true;                                                                                                                                                                                                                                                  
                        }else{
                            isCorrect2=false;
                            System.out.println("isCorrect2");
                            j.requestFocus();
                            j.selectAll();
                        }                                                                                                                                                                                                              break;
                    }else{
                        isCorrect2=true;
                    }  
                }
                if((stPcs<=nextEndPcs)){
                    isCorrect3=true;                                                                                                                                                                                                                                                 
                }else{
                    isCorrect3=false;
                    System.out.println("isCorrect3");
                    j.requestFocus();
                    j.selectAll();
                }
                if(isCorrect2&&isCorrect3){
                   isAddable=true;
                }else{
                    isAddable=false;
                    JFrame j1=new JFrame();
                    j1.setAlwaysOnTop(true);
                    JOptionPane.showMessageDialog(j1, "Not Correct Values in one of the fields ", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        });
        purchaseProducts[productCount].getjLabel2().addMouseListener(new MouseAdapter(){
            @Override
            public void mouseClicked(MouseEvent e) {
                JFrame j=new JFrame();
                j.setAlwaysOnTop(true);
                JLabel label = (JLabel)e.getSource();
                System.out.println("");label.getParent().getName();
                if(label.isEnabled()){
                    if(JOptionPane.showConfirmDialog(j,
                    "Are you sure ! \nOn selecting \"Yes\" this will Delete the Row...\n\n Deleted Row can not be restored  . . .", "Confermation Diloge",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){ //ConfermationDiloge()){
                        int i=Integer.parseInt(label.getParent().getName());
                        removeRow(Integer.parseInt(label.getParent().getName()));
                        deletePurchaseProduct(to.getText(),label.getParent().getName());
                    }
                }
            }
        });
        initializePanelListner(purchaseProducts[productCount]);
//        purchaseProducts[productCount].textFieldsEditableProducts(true);
        purchasePanel.add(purchaseProducts[productCount]);
        purchasePanel.revalidate();
    }
        boolean isAddable=true;
    private void update() {
        
    }
    private void removeRow(int productIndex) {
        //System.out.println("purchaseProducts["+productIndex+"] : "+purchaseProducts[productIndex].getName());
        purchasePanel.remove(purchaseProducts[productIndex]);
///*
    purchaseProducts[productIndex].getStPcs().setText("zzzz");
    purchaseProducts[productIndex].getEndPcs().setText("zzzz");
//*/
        purchasePanel.revalidate();
        purchasePanel.repaint();
    }
    private void deletePurchaseProduct(String s,String s1) {
        try {
            PAK_SLABPER_DB data =new PAK_SLABPER_DB();
            Connection conn;     
            conn = data.connect_database();
            data.delete_purchase_product(conn, s,s1);
                String s2 = "Seq # "+s1+" Ref # "+invNo1+" against: "+remarks1;
//            }
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(SLABPER.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initializePanelListner(final JPanel p) {
//        p=new JPanel();
        p.addMouseListener(new MouseListener(){

            @Override
            public void mouseClicked(MouseEvent me) {
                
//                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void mousePressed(MouseEvent me) {
//                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void mouseReleased(MouseEvent me) {
//                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                p.setBackground(Color.green);
            }

            @Override
            public void mouseExited(MouseEvent me) {
//                java.awt.Point p1 = new java.awt.Point(me.getLocationOnScreen());
//                SwingUtilities.convertPointFromScreen(p1, me.getComponent());
//                if(me.getComponent().contains(p1)) {return;}
                p.setBackground(null);
            }
        });
    }
private void setLastRec() throws ParseException {
        try {
            PAK_SLABPER_DB data =new PAK_SLABPER_DB();
            Connection conn;
            conn = data.connect_database();
            ArrayList<String> stock = data.get_last_purchase(conn);
            if(stock==null){
                JFrame j=new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Welcome Enter First Record", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
                btnAdd.doClick();
                btnCancel.setVisible(false);
                editableProductPanel(true);
            }else{
                setTextinPurchase(stock, dateField);
                editableProductPanel(false);
            }
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(SLABPER.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setTextinPurchase(ArrayList<String> stock, Conversions dateField) {
        try {
            //          DOCNO,ODATE,REFNO,DESCR,TD,TC
            to.setText(stock.get(0));
            
            oDate.setDate(dateField.toDate(stock.get(2)));
            cDate.setDate(dateField.toDate(stock.get(3)));
            loadProductsPanel(to.getText());
        } catch (ParseException ex) {
            Logger.getLogger(SLABPER.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setFirstRec() throws ParseException {
        try {
            PAK_SLABPER_DB data =new PAK_SLABPER_DB();
            Connection conn;
            conn = data.connect_database();
            ArrayList<String> stock= data.get_first_purchase(conn);
            if(stock==null){
                setNullTextFields();
                JFrame j=new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "No data Found", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
            }else{
                setTextinPurchase(stock,dateField);
            }
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(SLABPER.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

     private void findRecords(String text) {
        try {
            PAK_SLABPER_DB data =new PAK_SLABPER_DB();
            Connection conn;
            conn = data.connect_database();
            ArrayList<String> s=data.find_purchase_by_code(conn, text);
            if (s!=null){
                saveUpdateBtnVisible("all", false);
                setTextinPurchase(s, dateField);
                textFieldsEditable(false);
                forBackBtnEnable(true);
                recEditBtnEnable(true);
                recEditActionBtnVisible(false);
            }else{
                JFrame j=new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Not Found", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
            }
            System.out.println("Asset Found is :"+ s);
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(SLABPER.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void recEditActionBtnVisible(boolean b) {
        btnSave.setVisible(b);
        btnUpdate.setVisible(b);
        btnSearchNow.setVisible(b);
        btnCancel.setVisible(b);
    }

    
    private GraphicsEnvironment setEnvironment() {
        return getLocal();
    }

    private GraphicsEnvironment getLocal() {
        return GraphicsEnvironment.getLocalGraphicsEnvironment();
    }

    private void boundsSize() {
        this.setMaximizedBounds(setEnvironment().getMaximumWindowBounds());
    }

    private void extend() {
        this.setExtendedState(this.getExtendedState() | this.MAXIMIZED_BOTH);
    }

    private void maximize() {
        boundsSize();
        extend();
    }

    
   private void initPanel() {
        purchasePanel = new JPanel();
        purchasePanel.setLayout(new BoxLayout(purchasePanel, BoxLayout.PAGE_AXIS));
        purchasePanel.add(purchaseHeaderPanel);
        addRow();
            
        purchaseScrollPane.getViewport().setView(purchasePanel);
    }

    private void loadProductsPanel(String text) {
        try {
            inetializePrductPanel();
            PAK_SLABPER_DB data =new PAK_SLABPER_DB();
            Connection conn;
            conn = data.connect_database();
            ArrayList<String> name[]=data.search_products(conn,text);
            removeRow(productCount);
            productCount--;
            int lastSeqNo=0;
            for(int i=0;i<name.length;i++){
//                System.out.println("name["+i+"].get(1)"+name[i].get(4));
                addRow(Integer.parseInt(name[i].get(1))-1);
                System.out.println("productCount :----:"+productCount);
                for(int j=0;j<9;j++){
                    switch(j)
                    {
                        /*
                        cat.add(0,code );//to
                        cat.add(1,c );//pcode
                        cat.add(2,co );//srno
                        cat.add(3,ad2 );//odate
                        cat.add(4,add );//cdate
                        cat.add(5,add1 );//stpcs
                        cat.add(6,add12 );//endpcs
                        cat.add(7,add13 );//unitd
                        cat.add(8,add14 );//schrs
                       */
//                        case 0:
//                            to.setText(name[i].get(j));
//                            break;
//                        case 1:
//                            pCode.setText(name[i].get(j));    
////                            lastSeqNo=Integer.parseInt(name[i].get(j));
//                            break;
                        case 1:
                            purchaseProducts[productCount].getSeqno().setText(name[i].get(j));
                            lastSeqNo=Integer.parseInt(purchaseProducts[productCount].getSeqno().getText());
                            purchaseProducts[productCount].setName(lastSeqNo+"");
                            break;
//                        case 3:
//                            purchaseProducts[productCount].getStPcs().setText(name[i].get(j));
//                            break;
//                        case 4:
//                            purchaseProducts[productCount].getEndPcs().setText(name[i].get(j));
//                            break;
                        case 4:
                            purchaseProducts[productCount].getStPcs().setText(name[i].get(j));   
                            break;
                        case 5:
                            purchaseProducts[productCount].getEndPcs().setText(name[i].get(j));   
                            break;
                        case 6:
                            purchaseProducts[productCount].getSchRs().setText(name[i].get(j));   
                            break;
                    }
                }
                //System.out.println("");
            }
            productCount=lastSeqNo;
            data.close_database(conn);
            editableProductPanel(false);
        } catch (SQLException ex) {
            Logger.getLogger(SLABPER.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void addRow(int tempProductCount) {
        productCount=tempProductCount;
        addRow();
    }
    
/*
private void frmRemaning() {
    try{
//           remaining.setText(round((Float.parseFloat(netpayable.getText())-Float.parseFloat(paid.getText())),3)+"");
            BigDecimal paidBD = BigDecimal.valueOf(Float.parseFloat(paid.getText()));
            BigDecimal netpayableBD = BigDecimal.valueOf(Float.parseFloat(netpayable.getText()));
            BigDecimal temp1 = netpayableBD.subtract(paidBD);
            remaining.setText(temp1+"");
        }catch(NumberFormatException ex){
            if(ex.getMessage().matches("empty String")){
//                //System.out.println("Do Nothing: "+ex);
            }else{
                JFrame j=new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Invalid Input", "InfoBox: ", JOptionPane.ERROR_MESSAGE);
//                //System.out.println("Number Format is InCorrect: "+ex.getMessage());
            }
        }
    }  
*/

     private String getCode(String name) {
        String s="";
         PAK_SLABPER_DB data =new PAK_SLABPER_DB();
        Connection conn;
        try {
            conn = data.connect_database();
            if(!name.equals("")){
                s=data.find_product_code_by_name(conn,name);
            }else{
//                JFrame j=new JFrame();
//                j.setAlwaysOnTop(true);
//                JOptionPane.showMessageDialog(j, "Emter Id Found");
            }       
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(PAYSELLER.class.getName()).log(Level.SEVERE, null, ex);
        }
        return s;
    }
     public boolean setSelectedComboItem(JTextField textField,JComboBox comboBox, String value)
    {
        boolean tf=false;
        String item;
        if(value!=null){
            for (int i = 0; i < comboBox.getItemCount(); i++)
            {
                item = (String)comboBox.getItemAt(i);
                System.out.println("item:"+item);
                if (!item.isEmpty())
                {
                    if (item.equals(value))
                    {
                        comboBox.setSelectedIndex(i);
                        tf=true;
                        break;
                    }
                }else{
                    System.out.println(">== Message: Item is empty. . . ");
                    JFrame j=new JFrame();
                    j.setAlwaysOnTop(true);
                    JOptionPane.showMessageDialog(j, "First Add Items in : "+comboBox.getName(), "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
                }
            }   
        }else{
            System.out.println(">== Message: Value could not be  Selected . . . ");
            comboBox.setSelectedIndex(0);
        }
        return tf;
    }
    public static DefaultComboBoxModel buildAllComboBoxModel() throws Exception {
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        PAK_SLABPER_DB data =new PAK_SLABPER_DB();
        Connection conn;
        ArrayList<String> elements = new <String> ArrayList() ;
        try {
            conn = data.connect_database();
            boolean tf=false;
            elements=data.find_all_product_name_size_by_code(conn);
            if(elements!=null){    
                for(String s : elements){
                    comboBoxModel.addElement(s);
                }
            }else{
                JFrame j=new JFrame();
                    j.setAlwaysOnTop(true);
                    JOptionPane.showMessageDialog(j, "Not Edited", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
            }
            System.out.println("Is Inserted :"+ tf);
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(PAYSELLER.class.getName()).log(Level.SEVERE, null, ex);
        }
        return comboBoxModel;
    }

    private void updateComboBox(JTextField textField,JComboBox comboBox) throws Exception {
        comboBox.setModel(buildOneComboBoxModel(textField.getText()));
    }

    public DefaultComboBoxModel buildOneComboBoxModel(String id) throws Exception {
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        PAK_SLABPER_DB data =new PAK_SLABPER_DB();
        Connection conn;
        String element = "";
        conn = data.connect_database();
        String temp;
        String temp1;
        if(!id.equals("")){
            temp=data.find_product_rec_by_code(conn, id);
//            temp1=data.find_product_rate_by_code(conn, id);
            String s2 =null;
            if(temp!=null){
                element=temp;
//                endPcs.setText(temp1);
                comboBoxModel.addElement(element);
            }
        }
        return comboBoxModel;
    }
    private void styleComboBox(JComboBox combo) {
        combo.setRenderer(new DefaultListCellRenderer() {
            public void paint(Graphics g) {
                super.paint(g);
            }
        });
    }

    private boolean isDateBigger() {
        boolean b = false;
        Calendar date = Calendar.getInstance();Calendar date1 = Calendar.getInstance();
        date.setTime(oDate.getDate());date1.setTime(cDate.getDate());
        if(date1.getTimeInMillis()>=date.getTimeInMillis()){
            b=true;
        }else{
            b=false;
        }
        return b;
    }
}
