/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DynamicERP.frames.salesRtn;

import DB.PAK_DB;
import DB.PAK_GENERAL_DB;
import DB.PAK_GLOBAL_DB;
import DB.PAK_SALERTN_DB;
import DynamicERP.dialoge.viewforms.dialogeClass;
import static DynamicERP.frames.issueSales.PakIsSalesFieldPanel1.buildOneDateComboBoxModel;
import java.awt.Graphics;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import DynamicERP.frames.newdataentry.FIRMREC;
import static DynamicERP.frames.purchase.PakPurchaseFieldPanel1.round;
import DynamicERP.frames.relationalforms.CUSTREC;
import DynamicERP.frames.relationalforms.RECOVERY;
import static DynamicERP.frames.relationalforms.RECOVERY.buildAllComboBoxModel;
import static DynamicERP.frames.sales.PakSalesFieldPanel1.round;
import DynamicERP.frames.sales.SALES;
import static DynamicERP.frames.salesRtn.SALESRTN.addClicked;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashSet;
import java.util.Set;
import javax.swing.Box;
import javax.swing.KeyStroke;
import logical.EcLogger;

/**
 *
 * @author Shan
 */
public class PakSalesRtnFieldPanel extends javax.swing.JPanel {

    /**
     * Creates new form PakPurchaseFieldPanel
     */
       
    PAK_GLOBAL_DB dataAA =new PAK_GLOBAL_DB();
    Connection connAA;

    public PakSalesRtnFieldPanel() {
        initComponents();
//        styleComboBox(pName);
        textFieldsEditableProducts(true); 
//        KeyStroke enter = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0);
//        Set<KeyStroke> keys = new HashSet<>();
//        keys.add(enter);
//        KeyboardFocusManager.getCurrentKeyboardFocusManager().setDefaultFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, keys);
        try {
            connAA = dataAA.connect_database();
        }catch (SQLException e) {
            System.out.println("Exception ===> "+e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Custome = new javax.swing.JComboBox();
        customSize = new javax.swing.JTextField();
        seek = new javax.swing.JTextField();
        seqNo = new javax.swing.JTextField();
        totalQty33 = new javax.swing.JTextField();
        rate = new javax.swing.JTextField();
        taxRs = new javax.swing.JTextField();
        taxPer = new javax.swing.JTextField();
        grossAmt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        discRs = new javax.swing.JTextField();
        discPer = new javax.swing.JTextField();
        netAmt = new javax.swing.JTextField();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        returnQty = new javax.swing.JTextField();
        totalQty = new javax.swing.JTextField();
        free = new javax.swing.JTextField();
        damage = new javax.swing.JTextField();
        tdo = new javax.swing.JTextField();
        fmr = new javax.swing.JTextField();
        fmrrs = new javax.swing.JTextField();
        ctn = new javax.swing.JTextField();
        pcs = new javax.swing.JTextField();
        Date = new javax.swing.JComboBox();
        pName = new javax.swing.JTextField();

        Custome.setFont(new java.awt.Font("Calibri", 1, 11)); // NOI18N
        Custome.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Chocorama Van Rs 5 1 x 12 Box", "Item 3", "Item 4" }));
        Custome.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                CustomePopupMenuWillBecomeVisible(evt);
            }
        });
        Custome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustomeActionPerformed(evt);
            }
        });

        customSize.setEditable(false);
        customSize.setBackground(new java.awt.Color(255, 255, 204));
        customSize.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        customSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customSizeActionPerformed(evt);
            }
        });
        customSize.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                customSizeKeyReleased(evt);
            }
        });

        setMinimumSize(new java.awt.Dimension(1100, 20));
        setPreferredSize(new java.awt.Dimension(1193, 20));

        seek.setEditable(false);
        seek.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        seek.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                seekCaretUpdate(evt);
            }
        });
        seek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seekActionPerformed(evt);
            }
        });
        seek.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                seekKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                seekKeyReleased(evt);
            }
        });

        seqNo.setEditable(false);
        seqNo.setBackground(new java.awt.Color(255, 255, 204));
        seqNo.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        seqNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seqNoActionPerformed(evt);
            }
        });

        totalQty33.setEditable(false);
        totalQty33.setBackground(new java.awt.Color(255, 255, 204));
        totalQty33.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        totalQty33.setText("0");
        totalQty33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalQty33ActionPerformed(evt);
            }
        });
        totalQty33.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                totalQty33KeyReleased(evt);
            }
        });

        rate.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rate.setText("0");
        rate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rateActionPerformed(evt);
            }
        });
        rate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rateKeyReleased(evt);
            }
        });

        taxRs.setBackground(new java.awt.Color(255, 204, 204));
        taxRs.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        taxRs.setText("0");
        taxRs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                taxRsKeyReleased(evt);
            }
        });

        taxPer.setBackground(new java.awt.Color(255, 204, 204));
        taxPer.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        taxPer.setText("0");
        taxPer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taxPerActionPerformed(evt);
            }
        });
        taxPer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                taxPerKeyReleased(evt);
            }
        });

        grossAmt.setBackground(new java.awt.Color(153, 255, 204));
        grossAmt.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        grossAmt.setText("0");
        grossAmt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                grossAmtKeyReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oracledms/frames/resources/db_rem1.png"))); // NOI18N

        discRs.setBackground(new java.awt.Color(153, 255, 153));
        discRs.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        discRs.setText("0");
        discRs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                discRsKeyReleased(evt);
            }
        });

        discPer.setBackground(new java.awt.Color(153, 255, 153));
        discPer.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        discPer.setText("0");
        discPer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discPerActionPerformed(evt);
            }
        });
        discPer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                discPerKeyReleased(evt);
            }
        });

        netAmt.setEditable(false);
        netAmt.setBackground(new java.awt.Color(255, 255, 204));
        netAmt.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        netAmt.setText("0.0");

        returnQty.setEditable(false);
        returnQty.setBackground(new java.awt.Color(255, 255, 204));
        returnQty.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        returnQty.setText("0");
        returnQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnQtyActionPerformed(evt);
            }
        });
        returnQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                returnQtyKeyReleased(evt);
            }
        });

        totalQty.setEditable(false);
        totalQty.setBackground(new java.awt.Color(255, 255, 204));
        totalQty.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        totalQty.setText("0");
        totalQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                totalQtyKeyReleased(evt);
            }
        });

        free.setBackground(new java.awt.Color(255, 255, 204));
        free.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        free.setText("0");
        free.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                freeActionPerformed(evt);
            }
        });
        free.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                freeKeyReleased(evt);
            }
        });

        damage.setBackground(new java.awt.Color(255, 255, 204));
        damage.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        damage.setText("0");
        damage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                damageActionPerformed(evt);
            }
        });
        damage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                damageKeyReleased(evt);
            }
        });

        tdo.setBackground(new java.awt.Color(153, 255, 153));
        tdo.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        tdo.setText("0");
        tdo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tdoKeyReleased(evt);
            }
        });

        fmr.setBackground(new java.awt.Color(153, 255, 153));
        fmr.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        fmr.setText("0");
        fmr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fmrActionPerformed(evt);
            }
        });
        fmr.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fmrKeyReleased(evt);
            }
        });

        fmrrs.setBackground(new java.awt.Color(153, 255, 153));
        fmrrs.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        fmrrs.setText("0");
        fmrrs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fmrrsActionPerformed(evt);
            }
        });
        fmrrs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fmrrsKeyReleased(evt);
            }
        });

        ctn.setEditable(false);
        ctn.setBackground(new java.awt.Color(255, 255, 204));
        ctn.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        ctn.setText("0");
        ctn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ctnKeyReleased(evt);
            }
        });

        pcs.setEditable(false);
        pcs.setBackground(new java.awt.Color(255, 255, 204));
        pcs.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        pcs.setText("0");
        pcs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pcsKeyReleased(evt);
            }
        });

        Date.setFont(new java.awt.Font("Calibri", 1, 11)); // NOI18N
        Date.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Chocorama Van Rs 5 1 x 12 Box", "Item 3", "Item 4" }));
        Date.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                DatePopupMenuWillBecomeVisible(evt);
            }
        });
        Date.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DateActionPerformed(evt);
            }
        });

        pName.setEditable(false);
        pName.setBackground(new java.awt.Color(255, 255, 204));
        pName.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        pName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(seqNo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(seek, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pName, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ctn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(pcs, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(totalQty, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(returnQty, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(totalQty33, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(rate, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(grossAmt, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(discPer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(discRs, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(taxPer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(taxRs, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(tdo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(fmr, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(fmrrs, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(free, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(damage, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(netAmt, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(Date, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(141, 141, 141))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(seqNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(seek, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(ctn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(pName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(taxPer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(taxRs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(free, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(damage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(fmrrs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(fmr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(discPer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(discRs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(netAmt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(tdo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(Date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(returnQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(totalQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(pcs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(totalQty33, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(rate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(grossAmt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public JTextField getDamage() {
        return damage;
    }

    public void setDamage(JTextField damage) {
        this.damage = damage;
    }

    public JTextField getFree() {
        return free;
    }

    public void setFree(JTextField free) {
        this.free = free;
    }

    private void totalQty33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalQty33ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalQty33ActionPerformed

    private void rateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rateActionPerformed

    private void taxPerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taxPerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_taxPerActionPerformed

    private void discPerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discPerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_discPerActionPerformed

    private void seekKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_seekKeyReleased
        if((evt.getKeyCode() == KeyEvent.VK_ENTER) && seek.getText().isEmpty()) {
            try 
            {
                dialogeClass.createViewProductRecWin();
            } catch (SQLException ex) {
                Logger.getLogger(SALES.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(DynamicERP.dialoge.viewforms.ViewForm11.isSaved){
                seek.setText(dialogeClass.codeProductRec);
                
                seek.requestFocus();seek.selectAll();
            }
        }else if((evt.getKeyCode() == KeyEvent.VK_ENTER)&&!seek.getText().isEmpty()) {
            ctn.requestFocus();ctn.selectAll();
        }
        
                try {
                    updateComboBox(seek, pName);
                } catch (Exception ex) {
                    Logger.getLogger(RECOVERY.class.getName()).log(Level.SEVERE, null, ex);
                }
                setAllFieldData();
    }//GEN-LAST:event_seekKeyReleased

    private void seqNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seqNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_seqNoActionPerformed

    private void totalQty33KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_totalQty33KeyReleased
        BigDecimal d = new BigDecimal(totalQty.getText());
        BigDecimal d1 = new BigDecimal(totalQty33.getText());
        returnQty.setText(d.subtract(d1)+"");
        
        try{
            BigDecimal totalQtyBD = BigDecimal.valueOf(Float.parseFloat(totalQty33.getText()));
            BigDecimal rateBD = BigDecimal.valueOf(Float.parseFloat(rate.getText()));
            BigDecimal temp1 = totalQtyBD.multiply(rateBD);grossAmt.setText(round((temp1),3)+"");
        }catch(NumberFormatException ex){
        }
        frmTaxRs();
        frmFmrRs();
        frmDiscRs();
        frmNetAmount();
    }//GEN-LAST:event_totalQty33KeyReleased

    private void taxPerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taxPerKeyReleased
        frmTaxRs();
        frmNetAmount();
    }//GEN-LAST:event_taxPerKeyReleased

    private void taxRsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taxRsKeyReleased
        frmTaxPer();
        frmNetAmount();
    }//GEN-LAST:event_taxRsKeyReleased

    private void discRsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_discRsKeyReleased
        frmDiscPer();
        frmNetAmount();
    }//GEN-LAST:event_discRsKeyReleased

    private void discPerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_discPerKeyReleased
        frmDiscRs();
        frmNetAmount();
    }//GEN-LAST:event_discPerKeyReleased

    private void rateKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rateKeyReleased
        try{
            BigDecimal totalQtyBD = BigDecimal.valueOf(Float.parseFloat(totalQty33.getText()));
            BigDecimal rateBD = BigDecimal.valueOf(Float.parseFloat(rate.getText()));
            BigDecimal temp1 = totalQtyBD.multiply(rateBD);grossAmt.setText(round((temp1),3)+"");
        }catch(NumberFormatException ex){
        }
        frmTaxRs();
        frmFmrRs();
        frmDiscRs();
        frmNetAmount();
    }//GEN-LAST:event_rateKeyReleased

    private void grossAmtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_grossAmtKeyReleased
        /*try{
            
            switch (pType.getSelectedItem()+"") 
            {
               case "SFT":
                  rate.setText(round((Float.parseFloat(grossAmt.getText())/Float.parseFloat(totalSize.getText())),3)+"");

                   break;
               case "RFT":
                  rate.setText(round((Float.parseFloat(grossAmt.getText())/Float.parseFloat(totalSize.getText())),3)+"");
                  break;
               case "PER PIECE":*/
                if(Float.parseFloat(totalQty33.getText())!=0){
                    rate.setText(round((Float.parseFloat(grossAmt.getText())/Float.parseFloat(totalQty33.getText())),3)+"");
                }
/*                  break;
               case "CUSTOME":
                  rate.setText(round((Float.parseFloat(grossAmt.getText())/Float.parseFloat(totalSize.getText())),3)+"");
                  break;
            }
    
            
        }catch(NumberFormatException ex){
//            if(ex.getMessage().matches("empty String")){
////                System.out.println("Do Nothing: "+ex);
//            }else{
//                JFrame j=new JFrame();
//                j.setAlwaysOnTop(true);
//                JOptionPane.showMessageDialog(j, "Invalid Input", "InfoBox: ", JOptionPane.ERROR_MESSAGE);
////                System.out.println("Number Format is InCorrect: "+ex.getMessage());
//            }
        } */
        
        frmTaxRs();
        frmFmrRs();
        frmDiscRs();
        frmNetAmount();
    }//GEN-LAST:event_grossAmtKeyReleased

    private void returnQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnQtyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_returnQtyActionPerformed

    private void customSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customSizeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customSizeActionPerformed

    private void customSizeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customSizeKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_customSizeKeyReleased

    private void seekKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_seekKeyPressed
        /*if((evt.getKeyCode() == KeyEvent.VK_ENTER)&&seek.getText().isEmpty()) {
            try {
                dialogeClass.createViewProductRecWin();
            } catch (SQLException ex) {Logger.getLogger(SALES.class.getName()).log(Level.SEVERE, null, ex);}
            if(DynamicERP.dialoge.viewforms.ViewForm11.isSaved){
                seek.setText(dialogeClass.codeProductRec);
                ctn.requestFocus();
                ctn.selectAll();
            }else{
            }
        }else if((evt.getKeyCode() == KeyEvent.VK_ENTER)&&!seek.getText().isEmpty()) {
            ctn.requestFocus();
            ctn.selectAll();
        }
        try {
            updateComboBox(seek, pName);
        } catch (Exception ex) {
            Logger.getLogger(RECOVERY.class.getName()).log(Level.SEVERE, null, ex);
        }
        setAllFieldData();*/
    }//GEN-LAST:event_seekKeyPressed

    private void returnQtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_returnQtyKeyReleased

        frmRQKR();
        
    }//GEN-LAST:event_returnQtyKeyReleased

    private void totalQtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_totalQtyKeyReleased

    }//GEN-LAST:event_totalQtyKeyReleased

    private void freeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_freeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_freeActionPerformed

    private void freeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_freeKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_freeKeyReleased

    private void damageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_damageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_damageActionPerformed

    private void damageKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_damageKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_damageKeyReleased

    private void seekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seekActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_seekActionPerformed

    private void tdoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tdoKeyReleased
        frmDiscRs();
        frmNetAmount();
    }//GEN-LAST:event_tdoKeyReleased

    private void fmrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fmrActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fmrActionPerformed

    private void fmrKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fmrKeyReleased
        frmFmrRs();
        frmNetAmount();
    }//GEN-LAST:event_fmrKeyReleased

    private void fmrrsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fmrrsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fmrrsActionPerformed

    private void fmrrsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fmrrsKeyReleased
        // TODO add your handling code here:
        frmFmrPer();
        frmNetAmount();
    }//GEN-LAST:event_fmrrsKeyReleased

    private void ctnKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ctnKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_ctnKeyReleased

    private void pcsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pcsKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_pcsKeyReleased

    private void DatePopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_DatePopupMenuWillBecomeVisible
        PAK_DB data =new PAK_DB();
        Connection conn;
        try {
            conn = data.connect_database();        
            
            Date.setModel(buildAllDtlComboBoxModel("date",seek.getText(),(Date.getSelectedItem()!=null?Date.getSelectedItem().toString():"")));
            
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(CUSTREC.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(CUSTREC.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_DatePopupMenuWillBecomeVisible

    private void DateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DateActionPerformed

    private void CustomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CustomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CustomeActionPerformed

    private void CustomePopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_CustomePopupMenuWillBecomeVisible
        PAK_DB data =new PAK_DB();
        Connection conn;
        try {
            conn = data.connect_database();

            Custome.setModel(buildAllDtlComboBoxModel("custome",seek.getText(),(Custome.getSelectedItem()!=null?Custome.getSelectedItem().toString():"")));

            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(CUSTREC.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(CUSTREC.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CustomePopupMenuWillBecomeVisible

    private void seekCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_seekCaretUpdate
        try {
            Date.setModel(buildOneDateComboBoxModel(seek.getText(),connAA));
        } catch (Exception ex) {
            Logger.getLogger(PakSalesRtnFieldPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_seekCaretUpdate

    private void pNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pNameActionPerformed
    public static DefaultComboBoxModel buildAllDtlComboBoxModel(String c,String c1,String c2) throws Exception {
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        PAK_DB data =new PAK_DB();
        Connection conn;
        ArrayList<String> elements = new <String> ArrayList() ;
        try {
            conn = data.connect_database();
            boolean tf=false;
            switch(c){
                case "date":
                    elements=data.find_all_date_by_product_code(conn,c1);
                    break;
                case "custome":
                    elements=data.find_all_custome_by_product_code(conn,c1,c2);
                    break;
            }
            if(elements!=null){    
                for(String s : elements){
                    comboBoxModel.addElement(s);
                }
            }else{
                JFrame j=new JFrame();
                    j.setAlwaysOnTop(true);
                    JOptionPane.showMessageDialog(j, "Not Edited", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
            }
            System.out.println("Is Inserted :"+ tf);
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
        }
        return comboBoxModel;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox Custome;
    private javax.swing.JComboBox Date;
    private javax.swing.JTextField ctn;
    private javax.swing.JTextField customSize;
    private javax.swing.JTextField damage;
    private javax.swing.JTextField discPer;
    private javax.swing.JTextField discRs;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JTextField fmr;
    private javax.swing.JTextField fmrrs;
    private javax.swing.JTextField free;
    private javax.swing.JTextField grossAmt;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField netAmt;
    private javax.swing.JTextField pName;
    private javax.swing.JTextField pcs;
    private javax.swing.JTextField rate;
    private javax.swing.JTextField returnQty;
    private javax.swing.JTextField seek;
    private javax.swing.JTextField seqNo;
    private javax.swing.JTextField taxPer;
    private javax.swing.JTextField taxRs;
    private javax.swing.JTextField tdo;
    private javax.swing.JTextField totalQty;
    private javax.swing.JTextField totalQty33;
    // End of variables declaration//GEN-END:variables

    public JComboBox getCustome() {
        return Custome;
    }

    public void setCustome(JComboBox Custome) {
        this.Custome = Custome;
    }

    public JComboBox getDate() {
        return Date;
    }

    public void setDate(JComboBox Date) {
        this.Date = Date;
    }

    public JTextField getPcs() {
        return pcs;
    }

    public JTextField getCtn() {
        return ctn;
    }

    public JTextField getFmrrs() {
        return fmrrs;
    }

    public JTextField getFmr() {
        return fmr;
    }

    public JTextField getTdo() {
        return tdo;
    }

    public JTextField getCustomSize() {
        return customSize;
    }

    public void setCustomSize(JTextField customSize) {
        this.customSize = customSize;
    }

    public JTextField getReturnQty() {
        return returnQty;
    }

    public void setReturnQty(JTextField returnQty) {
        this.returnQty = returnQty;
    }

    public JTextField getTotalQty1() {
        return totalQty;
    }

    public void setTotalQty1(JTextField totalQty1) {
        this.totalQty = totalQty1;
    }

    public Box.Filler getFiller1() {
        return filler1;
    }

    public void setFiller1(Box.Filler filler1) {
        this.filler1 = filler1;
    }

    
    public JTextField getSeqNo() {
        return seqNo;
    }

    public void setSeqNo(JTextField seqNo) {
        this.seqNo = seqNo;
    }

    public void setDiscPer(String discPer) {
        this.discPer.setText(discPer);
    }

    public void setDiscRs(String discRs) {
        this.discRs.setText(discRs);
    }

    public void setGrossAmt(String grossAmt) {
        this.grossAmt.setText(grossAmt);
    }

    public void setNetAmt(String netAmt) {
        this.netAmt.setText(netAmt);
    }

    public void setpName(String pName) {
        try {
                this.pName.setText(buildOneComboBoxModel(pName));
            } catch (Exception ex) {
                Logger.getLogger(SALES.class.getName()).log(Level.SEVERE, null, ex);
            }
    }

    public void setRate(String rate) {
        this.rate.setText(rate);
    }

    public void setSeek(String seek) {
        this.seek.setText(seek);
    }

    public void setTaxPer(String taxPer) {
        this.taxPer.setText(taxPer);
    }

    public void setTaxRs(String taxRs) {
        this.taxRs.setText(taxRs);
    }

    public void setTotalQty(String totalQty) {
        this.totalQty33.setText(totalQty);
    }

    public JTextField getDiscPer() {
        return discPer;
    }
    public String getDiscPerText() {
        return discPer.getText();
    }

    public JTextField getDiscRs() {
        return discRs;
    }
    public String getDiscRsText() {
        return discRs.getText();
    }

    public JTextField getGrossAmt() {
        return grossAmt;
    }
    public String getGrossAmtText() {
        return grossAmt.getText();
    }

    public JTextField getNetAmt() {
        return netAmt;
    }
    public String getNetAmtText() {
        return netAmt.getText();
    }
    /*
    public JComboBox getpName() {
        return pName;
    }
    */
    public JTextField getRate() {
        return rate;
    }
    public String getRateText() {
        return rate.getText();
    }

    public JTextField getSeek() {
        return seek;
    }
    public String getSeekText() {
        return seek.getText();
    }

    public JTextField getTaxPer() {
        return taxPer;
    }
    public String getTaxPerText() {
        return taxPer.getText();
    }

    public JTextField getTaxRs() {
        return taxRs;
    }
    public String getTaxRsText() {
        return taxRs.getText();
    }

    public JTextField getTotalQty() {
        return totalQty33;
    }
    public String getTotalQtyText() {
        return totalQty33.getText();
    }

    public void setjLabel2(JLabel jLabel2) {
        this.jLabel2 = jLabel2;
    }

    public JLabel getjLabel2() {
        return jLabel2;
    }

    public void setSeqNoTextField(JTextField seqNoTextField) {
        this.seqNo = seqNoTextField;
    }

    public JTextField getSeqNoTextField() {
        return seqNo;
    }
    public void setSeqNoText(String seqNoTextField) {
        this.seqNo.setText(seqNoTextField);
    }

    public String getSeqNoText() {
        return seqNo.getText();
    }
    /*
    public boolean setSelectedComboItem(JTextField textField,JComboBox comboBox, String value)
    {
        boolean tf=false;
        String item;
        if(value!=null){
            for (int i = 0; i < comboBox.getItemCount(); i++)
            {
                item = getSubName((String)comboBox.getItemAt(i));
                System.out.println("item:"+item);
                if (!item.isEmpty())
                {
                    if (item.equals(value))
                    {
                        comboBox.setSelectedIndex(i);
                        tf=true;
                        break;
                    }
                }else{
                    System.out.println(">== Message: Item is empty. . . ");
                    JFrame j=new JFrame();
                    j.setAlwaysOnTop(true);
                    JOptionPane.showMessageDialog(j, "First Add Items in : "+comboBox.getName(), "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
                }
            }   
        }else{
            System.out.println(">== Message: Value could not be  Selected . . . ");
            comboBox.setSelectedIndex(0);
        }
        return tf;
    }*/
    private void updateComboBox(JTextField textField,JTextField comboBox) throws Exception {
        comboBox.setText(buildOneComboBoxModel(textField.getText()));
    }
    public static DefaultComboBoxModel buildAllComboBoxModel() throws Exception {
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        PAK_DB data =new PAK_DB();
        Connection conn;
        ArrayList<String> elements = new <String> ArrayList() ;
        try {
            conn = data.connect_database();
            boolean tf=false;
            elements=data.find_all_product_name_size_by_code(conn);
            if(elements!=null){    
                for(String s : elements){
                    comboBoxModel.addElement(s);
                }
            }else{
                JFrame j=new JFrame();
                    j.setAlwaysOnTop(true);
                    JOptionPane.showMessageDialog(j, "Not Edited", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
            }
            System.out.println("Is Inserted :"+ tf);
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
        }
        return comboBoxModel;
    }
    public String buildOneComboBoxModel(String id) throws Exception {
        String comboBoxModel = "";//new DefaultComboBoxModel();
        PAK_DB data =new PAK_DB();
        Connection conn;
        String element="";
        try {
            conn = data.connect_database();
            ArrayList<String> temp;
            if(!id.equals("")){
                temp=data.find_product_rec_by_code(conn, id);
                String s1=null,s2 =null;
                if(temp!=null){
                    for(int i=0;i<temp.size();i++){
                        if(i==1||i==2){//||i==6||i==10){
                            if(i==2){
                                s1 = temp.get(i);
                            }else if(i==1){
                                s2 = temp.get(i);
                            }
                            System.out.println("i="+i+" : "+temp.get(i));
                        }else{
                        }
                        if(i==3){
                            rate.setText(temp.get(i));
                        }
                    }
                    element=s2+" | "+s1;
                    comboBoxModel=element;
                }else{
                    rate.setText("0.00");
                }
            }else{
                 rate.setText("0.00");
//                JFrame j=new JFrame();
//                j.setAlwaysOnTop(true);
//                J}OptionPane.showMessageDialog(j, "no Id Found");
            }
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
        }
        return comboBoxModel;
    }

    private String getCode(String name) {
        String s="";
        PAK_DB data =new PAK_DB();
        Connection conn;
        try {
            conn = data.connect_database();
            if(!name.equals("")){
                s=data.find_product_code_by_name(conn,name);
//                s=data.find_product_code_by_name(conn,name);
            }else{
//                JFrame j=new JFrame();
//                j.setAlwaysOnTop(true);
//                JOptionPane.showMessageDialog(j, "Emter Id Found");
            }       
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
        }
        return s;
    }
    /*
    private String getSubName() {
        String s=pName.getSelectedItem().toString().substring(0, pName.getSelectedItem().toString().indexOf("|")-1);        
        return s;
    }
    private String getSubName(String p) {
        String s=p.substring(0, p.indexOf("|")-1);  
        return s;
    }
    */
    private String getRate(String name) {
        String s="";
        PAK_DB data =new PAK_DB();
        Connection conn;
        try {
            conn = data.connect_database();
            if(!name.equals("")){
                s=data.find_product_rate_by_name(conn,name);
            }else{
//                JFrame j=new JFrame();
//                j.setAlwaysOnTop(true);
//                JOptionPane.showMessageDialog(j, "Emter Id Found");
            }       
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
        }
        return s;
    }
    private String getWeight(String name) {
        String s="";
        PAK_DB data =new PAK_DB();
        Connection conn;
        try {
            conn = data.connect_database();
            if(!name.equals("")){
                s=data.find_product_weight_by_name(conn,name.trim());
            }else{
//                JFrame j=new JFrame();
//                j.setAlwaysOnTop(true);
//                JOptionPane.showMessageDialog(j, "Emter Id Found");
            }       
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
        }
        return s;
    }
    private void styleComboBox(JComboBox combo) {
        combo.setRenderer(new DefaultListCellRenderer() {
            public void paint(Graphics g) {
                super.paint(g);
            }
        });
    }
    public void textFieldsEditableProducts(boolean b) {
        totalQty33.setEditable(b);
        returnQty.setEditable(b);
        customSize.setEditable(b);
        rate.setEditable(b);
        grossAmt.setEditable(b);
        discPer.setEditable(b);
        discRs.setEditable(b);
        taxPer.setEditable(b);
        taxRs.setEditable(b);
        fmr.setEditable(b);
        fmrrs.setEditable(b);
        tdo.setEditable(b);
        Date.setEnabled(b);
        Custome.setEnabled(b);
        
        if(!addClicked){
            totalQty.setEditable(false);
            seqNo.setEditable(false);
            seek.setEditable(false);
            pName.setEnabled(false);
            jLabel2.setEnabled(false);
        }else{
            totalQty.setEditable(true);
            seqNo.setEditable(true);
            seek.setEditable(true);
            pName.setEnabled(true);
            jLabel2.setEnabled(true);
        }        
        //dont edit it 
        netAmt.setEditable(false);
        
    }

    public void frmNetAmount() {
        try{
//           netAmt.setText(round(((Float.parseFloat(grossAmt.getText())+Float.parseFloat(taxRs.getText()))-Float.parseFloat(discRs.getText())),3)+"");
            BigDecimal grossAmtBD = BigDecimal.valueOf(Float.parseFloat(grossAmt.getText()));
            BigDecimal taxRsBD = BigDecimal.valueOf(Float.parseFloat(taxRs.getText()));
            BigDecimal discRsBD = BigDecimal.valueOf(Float.parseFloat(discRs.getText()));
            BigDecimal temp1 = grossAmtBD.add(taxRsBD);
            BigDecimal result1 = temp1.subtract(discRsBD);
            result1 = result1.subtract( BigDecimal.valueOf(Float.parseFloat(fmrrs.getText())));
            result1 = result1.subtract( BigDecimal.valueOf(Float.parseFloat(tdo.getText())));
            netAmt.setText(round((result1),3)+"");
        }catch(NumberFormatException ex){

        }
    }

    private void frmGrossAmount() {
    /*switch (pType.getSelectedItem()+"") 
        {
           case "SFT":
               try{
                    BigDecimal totalQtyBD = BigDecimal.valueOf(Float.parseFloat(totalSize.getText()));
                    BigDecimal rateBD = BigDecimal.valueOf(Float.parseFloat(rate.getText()));
                    BigDecimal temp1 = totalQtyBD.multiply(rateBD);grossAmt.setText(round((temp1),3)+"");
                }catch(NumberFormatException ex){
                }
               break;
           case "RFT":
                try{
                    BigDecimal totalQtyBD = BigDecimal.valueOf(Float.parseFloat(totalSize.getText()));
                    BigDecimal rateBD = BigDecimal.valueOf(Float.parseFloat(rate.getText()));
                    BigDecimal temp1 = totalQtyBD.multiply(rateBD);grossAmt.setText(round((temp1),3)+"");
                }catch(NumberFormatException ex){
                }
               break;
           case "PER PIECE":
            */    try{
                    BigDecimal totalQtyBD = BigDecimal.valueOf(Float.parseFloat(totalQty33.getText()));
                    BigDecimal rateBD = BigDecimal.valueOf(Float.parseFloat(rate.getText()));
                    BigDecimal temp1 = totalQtyBD.multiply(rateBD);grossAmt.setText(round((temp1),3)+"");
                }catch(NumberFormatException ex){
                }
            /*   break;
           case "CUSTOME":
               try{
                    BigDecimal totalQtyBD = BigDecimal.valueOf(Float.parseFloat(totalSize.getText()));
                    BigDecimal rateBD = BigDecimal.valueOf(Float.parseFloat(rate.getText()));
                    BigDecimal temp1 = totalQtyBD.multiply(rateBD);grossAmt.setText(round((temp1),3)+"");
                }catch(NumberFormatException ex){
                }
               break;
        }*/
    }

    public void frmDiscRs() {
        String lineL[] = new String[2];
        try {
            File fin = new File("out.txt");
            FileInputStream fis = new FileInputStream(fin);
            BufferedReader br = new BufferedReader(new InputStreamReader(fis));
            String line = null;int i=0;
            while ((line = br.readLine()) != null) {lineL[i] = line;i++;}br.close();
        } catch (IOException ex) {
            Logger.getLogger(SALES.class.getName()).log(Level.SEVERE, null, ex);
        }
        EcLogger ec = new EcLogger();
        if(has_access(ec.classDeLoade(lineL[0]),"101")){
            try{
                discRs.setText(round(((Float.parseFloat(grossAmt.getText())*Float.parseFloat(discPer.getText()))/100),3)+"");
            }catch(NumberFormatException ex){

            }
        }else{
            try{
                float f=Float.parseFloat(grossAmt.getText())-Float.parseFloat(tdo.getText());
                discRs.setText(round(((f*Float.parseFloat(discPer.getText()))/100),3)+"");
            }catch(NumberFormatException ex){

            }
        }
    }

    private void frmDiscPer() {
        String lineL[] = new String[2];
        try {
            File fin = new File("out.txt");
            FileInputStream fis = new FileInputStream(fin);
            BufferedReader br = new BufferedReader(new InputStreamReader(fis));
            String line = null;int i=0;
            while ((line = br.readLine()) != null) {lineL[i] = line;i++;}br.close();
        } catch (IOException ex) {
            Logger.getLogger(SALES.class.getName()).log(Level.SEVERE, null, ex);
        }
        EcLogger ec = new EcLogger();
        if(has_access(ec.classDeLoade(lineL[0]),"101")){
            try{
               discPer.setText(round(((Float.parseFloat(discRs.getText())*100)/Float.parseFloat(grossAmt.getText())),3)+"");
            }catch(NumberFormatException ex){
            }
        }else{
                float f=Float.parseFloat(grossAmt.getText())-Float.parseFloat(tdo.getText());
                try{
                   discPer.setText(round(((Float.parseFloat(discRs.getText())*100)/f),3)+"");
                }catch(NumberFormatException ex){
                }
        }
    }

    
    public void frmTaxRs() {
        
//        /*
        String lineL[] = new String[2];
        try {
            File fin = new File("out.txt");
            FileInputStream fis = new FileInputStream(fin);
            BufferedReader br = new BufferedReader(new InputStreamReader(fis));
            String line = null;int i=0;
            while ((line = br.readLine()) != null) {lineL[i] = line;i++;}br.close();
        } catch (IOException ex) {
            Logger.getLogger(SALES.class.getName()).log(Level.SEVERE, null, ex);
        }
        EcLogger ec = new EcLogger();
        if(has_access(ec.classDeLoade(lineL[0]),"102")){
            try{
                taxRs.setText(round(((Float.parseFloat(grossAmt.getText()) * Float.parseFloat(taxPer.getText())) / 100),3)+"");
            }catch(NumberFormatException ex){
            }
            
        }else{
            try{
                float f= Float.parseFloat(grossAmt.getText())-Float.parseFloat(tdo.getText());
                taxRs.setText(round(((f * Float.parseFloat(taxPer.getText())) / 100),3)+"");
            }catch(NumberFormatException ex){
            }
            
        }
        
    }
    private boolean has_access(String string,String roleGrant) {
        boolean s1=false;
        PAK_GENERAL_DB data =new PAK_GENERAL_DB();
        Connection conn;
        try {
            conn = data.connect_database();
            String next = data.get_role_from_userLogin(conn,string);
            if(next!=null){
                String grant = data.get_access_from_grant(conn,roleGrant,next);
                if((1==(grant.compareTo("y")))||(1==(grant.compareTo("Y")))){
                    s1=true;
                }else{
                    s1=false;
                }
            }else{
                JFrame j=new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Next not found", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
            }
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(SALES.class.getName()).log(Level.SEVERE, null, ex);
        }
        return s1;
    }
    
    private void frmTaxPer() {
        String lineL[] = new String[2];
        try {
            File fin = new File("out.txt");
            FileInputStream fis = new FileInputStream(fin);
            BufferedReader br = new BufferedReader(new InputStreamReader(fis));
            String line = null;int i=0;
            while ((line = br.readLine()) != null) {lineL[i] = line;i++;}br.close();
        } catch (IOException ex) {
            Logger.getLogger(SALES.class.getName()).log(Level.SEVERE, null, ex);
        }
        EcLogger ec = new EcLogger();
        if(has_access(ec.classDeLoade(lineL[0]),"102")){
            try{
                taxPer.setText(round((Float.parseFloat(taxRs.getText())*100)/Float.parseFloat(grossAmt.getText()),3)+"");
            }catch(NumberFormatException ex){
            }
        }else{
             try{
                float f= Float.parseFloat(grossAmt.getText())-Float.parseFloat(tdo.getText()); 
                taxPer.setText(round((Float.parseFloat(taxRs.getText())*100)/f,3)+"");
            }catch(NumberFormatException ex){
            }
        }
    }
    public void frmFmrRs() {
        try{
           fmrrs.setText(round(((Float.parseFloat(grossAmt.getText()) * Float.parseFloat(fmr.getText())) / 100),3)+"");
        }catch(NumberFormatException ex){
        }
    }

    private void frmFmrPer() {
        try{
           fmr.setText(round((Float.parseFloat(fmrrs.getText())*100)/Float.parseFloat(grossAmt.getText()),3)+"");
        }catch(NumberFormatException ex){
        }
    }
    /**
     * Round to certain number of decimals
     * 
     * @param d
     * @param decimalPlace
     * @return
     */
    public static float round(float d, int decimalPlace) {
        BigDecimal bd = new BigDecimal(Float.toString(d));
        bd = bd.setScale(decimalPlace, BigDecimal.ROUND_HALF_UP);
        return bd.floatValue();
    }
    public static BigDecimal round(BigDecimal d, int decimalPlace) {
        d = d.setScale(decimalPlace, BigDecimal.ROUND_HALF_UP);
        return d;
    }

    public void setAllFieldData() {
        if(totalQty33.getText().isEmpty()){
            totalQty33.setText("0");
        }
        if(taxPer.getText().isEmpty()){
            taxPer.setText("0");
        }
        if(discPer.getText().isEmpty()){
            discPer.setText("0");
        }
        if(rate.getText().isEmpty()){
            rate.setText("0");
        }
        frmGrossAmount();
        frmTaxRs();
        frmDiscRs();
        frmNetAmount();
    }

    public void frmRQKR() {
        BigDecimal d = new BigDecimal(totalQty.getText());
        BigDecimal d1 = new BigDecimal(returnQty.getText());
        totalQty33.setText(d.subtract(d1)+"");

        try{
            BigDecimal totalQtyBD = BigDecimal.valueOf(Float.parseFloat(totalQty33.getText()));
            BigDecimal rateBD = BigDecimal.valueOf(Float.parseFloat(rate.getText()));
            BigDecimal temp1 = totalQtyBD.multiply(rateBD);grossAmt.setText(round((temp1),3)+"");
        }catch(NumberFormatException ex){
        }
        frmTaxRs();
        frmFmrRs();
        frmDiscRs();
        frmNetAmount();
    }
    public void frmCtn(String s) {
        if(Float.parseFloat(s)!=0&&!totalQty.getText().equals("")){
            float f = Float.parseFloat(totalQty.getText())/Float.parseFloat(s);int i = (int)f;ctn.setText(i+"");
            System.out.println("i"+i);
        }
    }
    public void frmPcs(String s) {
        if(Float.parseFloat(s)!=0&&!totalQty.getText().equals("")){float f = Float.parseFloat(totalQty.getText())%Float.parseFloat(s);int i=(int)f;pcs.setText(i+"");}
    }
    public String getNoOfPcsInCtn() {
        String s="0";
        PAK_GENERAL_DB data= new PAK_GENERAL_DB();
        Connection conn=null;
        try{
            conn=data.connect_database();        
            s=data.getNoOfPcsInCtn(conn,seek.getText());
            data.close_database(conn);
        }catch(SQLException ex){System.out.println("ex : "+ex);}
        
        return s;
    }

    private void frmQty() {
        float f=(Float.parseFloat(ctn.getText())*Float.parseFloat(getNoOfPcsInCtn()))+Float.parseFloat(pcs.getText());
        totalQty.setText(f+"");        
    }
}
