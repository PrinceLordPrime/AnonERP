/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DynamicERP.frames.purchase;

import DB.PAK_DB;
import DB.PAK_GLOBAL_DB;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GraphicsEnvironment;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import static java.util.Collections.list;
import java.util.Iterator;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractCellEditor;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRootPane;
import javax.swing.JSeparator;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.ViewportLayout;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import logical.Conversions;
import newpackage.ButtonTextFieldCellTest;
import DynamicERP.dialoge.viewforms.dialogeClass;
import DynamicERP.frames.newdataentry.FIRMREC;
import DynamicERP.frames.relationalforms.CUSTREC;
import DynamicERP.frames.relationalforms.RECOVERY;
import static DynamicERP.frames.relationalforms.RECOVERY.buildAllComboBoxModel;
import static DynamicERP.frames.purchase.PakPurchaseFieldPanel1.round;
import static DynamicERP.dialoge.viewforms.ViewFormId11.isSaved;
import DynamicERP.frames.sales.SALES;
import java.awt.Point;
import javax.swing.AbstractAction;
import javax.swing.KeyStroke;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.table.JTableHeader;

// PrinceLord Prime

import princelordprime.princecode;

/**
 *
 * @author Shan
 */
public class PURCHASE extends
        javax.swing.JFrame {

    Conversions dateField = new Conversions();
    princecode code = new princecode();

    /**
     * Creates new form PURCHASE
     */PAK_GLOBAL_DB dataAA =new PAK_GLOBAL_DB();
    Connection connAA;
    public PURCHASE() {
        try {
                connAA = dataAA.connect_database();
            
            }catch (SQLException e) {
                //System.out.println("Exception ===> "+e);
            }  
        initComponents();
        styleComboBox(suppName);
        styleComboBox(dName);

        maximize();

        panel.setBorder(BorderFactory.createTitledBorder("Purchase Invoice Properties: "));
        purchaseScrollPane.setBorder(BorderFactory.createTitledBorder("Products Sales Adjustments in invoice: "));
        jpanspl.setBorder(BorderFactory.createTitledBorder("Invoice Details & SPL Adjustments: "));
        custhist.setBorder(BorderFactory.createTitledBorder("Product History As per Sellers: "));
        pan_prints.setBorder(BorderFactory.createTitledBorder(""));
        saveUpdateBtnVisible("all", false);
        textFieldsPInvoiceEditable(false);
//      initTable();
//      initScrollPanel();
        initPanel();
        try {
            setLastRec();
//            setFirstRec();
        } catch (ParseException ex) {
            Logger.getLogger(PURCHASE.class.getName()).log(Level.SEVERE, null, ex);
        }
        setLastInvoice();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel11 = new javax.swing.JLabel();
        dName = new javax.swing.JComboBox();
        dcode = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        link9 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        purchaseScrollPane = new javax.swing.JScrollPane();
        jpanspl = new javax.swing.JPanel();
        splPanel = new javax.swing.JPanel();
        splPer = new javax.swing.JTextField();
        Builty11 = new javax.swing.JLabel();
        splRs = new javax.swing.JTextField();
        Builty17 = new javax.swing.JLabel();
        Builty21 = new javax.swing.JLabel();
        paid = new javax.swing.JTextField();
        Builty15 = new javax.swing.JLabel();
        netpayable = new javax.swing.JTextField();
        Builty18 = new javax.swing.JLabel();
        otherExp = new javax.swing.JTextField();
        Builty12 = new javax.swing.JLabel();
        remaining = new javax.swing.JTextField();
        Builty4 = new javax.swing.JLabel();
        splFmrRs = new javax.swing.JTextField();
        splFmrPer = new javax.swing.JTextField();
        Builty14 = new javax.swing.JLabel();
        sumPanel = new javax.swing.JPanel();
        taxPer = new javax.swing.JTextField();
        Builty3 = new javax.swing.JLabel();
        taxRs = new javax.swing.JTextField();
        netAmt = new javax.swing.JTextField();
        Builty8 = new javax.swing.JLabel();
        Builty2 = new javax.swing.JLabel();
        avediscper = new javax.swing.JTextField();
        discount = new javax.swing.JTextField();
        Builty19 = new javax.swing.JLabel();
        Builty20 = new javax.swing.JLabel();
        Builty1 = new javax.swing.JLabel();
        grossAmt = new javax.swing.JTextField();
        linvNo = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        fmrsum = new javax.swing.JTextField();
        fmrsumrs = new javax.swing.JTextField();
        Builty22 = new javax.swing.JLabel();
        Builty16 = new javax.swing.JLabel();
        tdosum = new javax.swing.JTextField();
        panel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        invNo = new javax.swing.JTextField();
        refNo = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        suppCode = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        suppName = new javax.swing.JComboBox();
        oDate = new com.toedter.calendar.JDateChooser();
        btnDel = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnPrior = new javax.swing.JButton();
        btnFirst = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnSearchNow = new javax.swing.JButton();
        btnAddRow = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        remarks = new javax.swing.JTextField();
        custhist = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        custHistory = new javax.swing.JTable();
        histogram = new javax.swing.JCheckBox();
        pan_prints = new javax.swing.JPanel();
        btnexit = new javax.swing.JButton();
        netTotalStock = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();

        jLabel11.setText("Dealer:");

        dName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        dName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        dName.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                dNamePopupMenuWillBecomeVisible(evt);
            }
        });
        dName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dNameActionPerformed(evt);
            }
        });

        dcode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dcodeActionPerformed(evt);
            }
        });
        dcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dcodeKeyReleased(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DynamicSP Purchase Record Managements (http://dspak.com)");
        setAutoRequestFocus(false);
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setMinimumSize(new java.awt.Dimension(940, 660));
        setModalExclusionType(null);

        jPanel4.setBackground(new java.awt.Color(0, 102, 102));
        jPanel4.setPreferredSize(new java.awt.Dimension(1024, 50));

        jLabel9.setBackground(new java.awt.Color(0, 102, 102));
        jLabel9.setFont(new java.awt.Font("Impact", 0, 36)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Purchase Record Managements");
        jLabel9.setToolTipText("");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));

        link9.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        link9.setForeground(new java.awt.Color(255, 255, 255));
        link9.setText("http://dspak.com | https://ds-pak.com | https://facebook.com/dspak | https://dailymotion.com/dspak");
        link9.setToolTipText("");
        link9.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        link9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                link9MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                link9MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                link9MouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                link9MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(264, Short.MAX_VALUE)
                    .addComponent(link9, javax.swing.GroupLayout.PREFERRED_SIZE, 775, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(269, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 49, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(link9, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        purchaseScrollPane.setAutoscrolls(true);
        purchaseScrollPane.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        purchaseScrollPane.setFocusCycleRoot(true);
        purchaseScrollPane.setMaximumSize(new java.awt.Dimension(1280, 450));

        splPanel.setBackground(new java.awt.Color(204, 204, 255));
        splPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        splPanel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                splPanelKeyReleased(evt);
            }
        });

        splPer.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        splPer.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        splPer.setText("0.0");
        splPer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                splPerActionPerformed(evt);
            }
        });
        splPer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                splPerKeyReleased(evt);
            }
        });

        Builty11.setText("SPL Disc");

        splRs.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        splRs.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        splRs.setText("0.0");
        splRs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                splRsActionPerformed(evt);
            }
        });
        splRs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                splRsKeyReleased(evt);
            }
        });

        Builty17.setText("%age");

        Builty21.setText("In Rupees");

        paid.setEditable(false);
        paid.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        paid.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        paid.setText("0.0");
        paid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paidActionPerformed(evt);
            }
        });
        paid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                paidKeyReleased(evt);
            }
        });

        Builty15.setText("Paid");

        netpayable.setEditable(false);
        netpayable.setBackground(new java.awt.Color(0, 204, 102));
        netpayable.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        netpayable.setForeground(new java.awt.Color(255, 255, 255));
        netpayable.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        netpayable.setText("0.0");
        netpayable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                netpayableActionPerformed(evt);
            }
        });

        Builty18.setText("Net Payable");

        otherExp.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        otherExp.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        otherExp.setText("0.0");
        otherExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                otherExpActionPerformed(evt);
            }
        });
        otherExp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                otherExpKeyReleased(evt);
            }
        });

        Builty12.setText("Oth Exp");

        remaining.setEditable(false);
        remaining.setBackground(new java.awt.Color(204, 255, 204));
        remaining.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        remaining.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        remaining.setText("0.0");
        remaining.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remainingActionPerformed(evt);
            }
        });

        Builty4.setText("Remaining");

        splFmrRs.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        splFmrRs.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        splFmrRs.setText("0.0");
        splFmrRs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                splFmrRsActionPerformed(evt);
            }
        });
        splFmrRs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                splFmrRsKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                splFmrRsKeyTyped(evt);
            }
        });

        splFmrPer.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        splFmrPer.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        splFmrPer.setText("0.0");
        splFmrPer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                splFmrPerActionPerformed(evt);
            }
        });
        splFmrPer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                splFmrPerKeyReleased(evt);
            }
        });

        Builty14.setText("SPL FMR");

        javax.swing.GroupLayout splPanelLayout = new javax.swing.GroupLayout(splPanel);
        splPanel.setLayout(splPanelLayout);
        splPanelLayout.setHorizontalGroup(
            splPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(splPanelLayout.createSequentialGroup()
                .addGroup(splPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(splPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(splPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Builty15)
                            .addComponent(Builty4)
                            .addComponent(Builty18)
                            .addComponent(Builty12)
                            .addComponent(Builty11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(splPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(paid)
                            .addComponent(netpayable)
                            .addComponent(remaining)
                            .addGroup(splPanelLayout.createSequentialGroup()
                                .addComponent(splPer, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(splRs, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(otherExp)))
                    .addGroup(splPanelLayout.createSequentialGroup()
                        .addGroup(splPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(splPanelLayout.createSequentialGroup()
                                .addGap(120, 120, 120)
                                .addComponent(Builty21))
                            .addGroup(splPanelLayout.createSequentialGroup()
                                .addGap(77, 77, 77)
                                .addComponent(Builty17)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, splPanelLayout.createSequentialGroup()
                        .addComponent(Builty14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(splFmrPer, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(splFmrRs)))
                .addContainerGap())
        );
        splPanelLayout.setVerticalGroup(
            splPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, splPanelLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(splPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Builty17)
                    .addComponent(Builty21))
                .addGap(1, 1, 1)
                .addGroup(splPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Builty11)
                    .addComponent(splPer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(splRs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(splPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Builty14)
                    .addComponent(splFmrPer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(splFmrRs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(splPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Builty12)
                    .addComponent(otherExp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(splPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Builty18)
                    .addComponent(netpayable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(splPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Builty15)
                    .addComponent(paid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(splPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(remaining, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Builty4)))
        );

        sumPanel.setBackground(new java.awt.Color(204, 204, 255));
        sumPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        taxPer.setEditable(false);
        taxPer.setBackground(new java.awt.Color(255, 153, 153));
        taxPer.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        taxPer.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        taxPer.setText("0.0");
        taxPer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taxPerActionPerformed(evt);
            }
        });

        Builty3.setText("Tax");

        taxRs.setEditable(false);
        taxRs.setBackground(new java.awt.Color(255, 153, 153));
        taxRs.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        taxRs.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        taxRs.setText("0.0");
        taxRs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taxRsActionPerformed(evt);
            }
        });

        netAmt.setEditable(false);
        netAmt.setBackground(new java.awt.Color(0, 204, 102));
        netAmt.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        netAmt.setForeground(new java.awt.Color(255, 255, 255));
        netAmt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        netAmt.setText("0.0");
        netAmt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                netAmtActionPerformed(evt);
            }
        });

        Builty8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Builty8.setText("Pro Net Amount:");

        Builty2.setText("Discount");

        avediscper.setEditable(false);
        avediscper.setBackground(new java.awt.Color(204, 255, 204));
        avediscper.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        avediscper.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        avediscper.setText("0.0");
        avediscper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                avediscperActionPerformed(evt);
            }
        });

        discount.setEditable(false);
        discount.setBackground(new java.awt.Color(204, 255, 204));
        discount.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        discount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        discount.setText("0.0");
        discount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discountActionPerformed(evt);
            }
        });

        Builty19.setText("%age");

        Builty20.setText("In Rupees");

        Builty1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Builty1.setText("Gross Amount:");

        grossAmt.setEditable(false);
        grossAmt.setBackground(new java.awt.Color(0, 153, 153));
        grossAmt.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        grossAmt.setForeground(new java.awt.Color(255, 255, 255));
        grossAmt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        grossAmt.setText("0.0");
        grossAmt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grossAmtActionPerformed(evt);
            }
        });

        linvNo.setEditable(false);
        linvNo.setBackground(new java.awt.Color(0, 102, 102));
        linvNo.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        linvNo.setForeground(new java.awt.Color(255, 255, 255));
        linvNo.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        linvNo.setText("0");
        linvNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linvNoActionPerformed(evt);
            }
        });

        jLabel10.setText("Last Invoice No:");

        fmrsum.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        fmrsum.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        fmrsum.setText("0.0");
        fmrsum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fmrsumActionPerformed(evt);
            }
        });
        fmrsum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fmrsumKeyReleased(evt);
            }
        });

        fmrsumrs.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        fmrsumrs.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        fmrsumrs.setText("0.0");
        fmrsumrs.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                fmrsumrsCaretUpdate(evt);
            }
        });
        fmrsumrs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fmrsumrsActionPerformed(evt);
            }
        });
        fmrsumrs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fmrsumrsKeyReleased(evt);
            }
        });

        Builty22.setText("FMR");

        Builty16.setText("TDO sum");

        tdosum.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        tdosum.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tdosum.setText("0.0");
        tdosum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tdosumActionPerformed(evt);
            }
        });
        tdosum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tdosumKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout sumPanelLayout = new javax.swing.GroupLayout(sumPanel);
        sumPanel.setLayout(sumPanelLayout);
        sumPanelLayout.setHorizontalGroup(
            sumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sumPanelLayout.createSequentialGroup()
                .addGroup(sumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(sumPanelLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(sumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Builty2)
                            .addComponent(Builty3)
                            .addComponent(Builty22))
                        .addGap(6, 6, 6)
                        .addGroup(sumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Builty19)
                            .addGroup(sumPanelLayout.createSequentialGroup()
                                .addGroup(sumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(fmrsum, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(taxPer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                                    .addComponent(avediscper, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(0, 0, 0)
                                .addGroup(sumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(discount, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(taxRs, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Builty20)
                                    .addComponent(fmrsumrs, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(sumPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(sumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(sumPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(linvNo, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(sumPanelLayout.createSequentialGroup()
                                .addGroup(sumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Builty1, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(Builty8, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(sumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(netAmt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                                    .addComponent(grossAmt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sumPanelLayout.createSequentialGroup()
                .addComponent(Builty16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tdosum, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        sumPanelLayout.setVerticalGroup(
            sumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sumPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(sumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Builty1)
                    .addComponent(grossAmt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addGroup(sumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Builty19)
                    .addComponent(Builty20))
                .addGap(1, 1, 1)
                .addGroup(sumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(avediscper, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Builty2)
                    .addComponent(discount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addGroup(sumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Builty3)
                    .addComponent(taxPer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(taxRs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(sumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fmrsum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fmrsumrs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Builty22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addGroup(sumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(netAmt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Builty8))
                .addGap(0, 0, 0)
                .addGroup(sumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(linvNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(sumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Builty16)
                    .addComponent(tdosum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jpansplLayout = new javax.swing.GroupLayout(jpanspl);
        jpanspl.setLayout(jpansplLayout);
        jpansplLayout.setHorizontalGroup(
            jpansplLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpansplLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sumPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(splPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpansplLayout.setVerticalGroup(
            jpansplLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpansplLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpansplLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sumPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(splPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jLabel1.setText("Invoice No:");

        jLabel2.setText("Ref No: ");

        invNo.setEditable(false);
        invNo.setBackground(new java.awt.Color(204, 255, 204));
        invNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invNoActionPerformed(evt);
            }
        });

        jLabel5.setText("Order Date");

        suppCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suppCodeActionPerformed(evt);
            }
        });
        suppCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                suppCodeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                suppCodeKeyReleased(evt);
            }
        });

        jLabel7.setText("Remarks:");

        jLabel8.setText("Seller:");

        suppName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        suppName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        suppName.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                suppNamePopupMenuWillBecomeVisible(evt);
            }
        });
        suppName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suppNameActionPerformed(evt);
            }
        });

        btnDel.setBackground(new java.awt.Color(255, 102, 102));
        btnDel.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnDel.setMnemonic('D');
        btnDel.setText("Delete");
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });

        btnLast.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oracledms/frames/resources/R2_24.png"))); // NOI18N
        btnLast.setMnemonic('L');
        btnLast.setText("Last");
        btnLast.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });

        btnNext.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oracledms/frames/resources/R1_24.png"))); // NOI18N
        btnNext.setMnemonic('N');
        btnNext.setText("Next");
        btnNext.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnPrior.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnPrior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oracledms/frames/resources/L1_24.png"))); // NOI18N
        btnPrior.setMnemonic('P');
        btnPrior.setText("Prior");
        btnPrior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPriorActionPerformed(evt);
            }
        });

        btnFirst.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oracledms/frames/resources/L2_24.png"))); // NOI18N
        btnFirst.setMnemonic('F');
        btnFirst.setText("First");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnCancel.setMnemonic('C');
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnSearchNow.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnSearchNow.setMnemonic('S');
        btnSearchNow.setText("Search Now");
        btnSearchNow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchNowActionPerformed(evt);
            }
        });

        btnAddRow.setMnemonic('A');
        btnAddRow.setText("Add Row");
        btnAddRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRowActionPerformed(evt);
            }
        });

        btnView.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnView.setMnemonic('V');
        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnSearch.setMnemonic('S');
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(0, 102, 51));
        btnAdd.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setMnemonic('A');
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnEdit.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnEdit.setMnemonic('E');
        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnSave.setMnemonic('S');
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnUpdate.setMnemonic('U');
        btnUpdate.setText("update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        remarks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                remarksKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jLabel7))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                                .addComponent(invNo, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(refNo, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(suppCode, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(suppName, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelLayout.createSequentialGroup()
                                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelLayout.createSequentialGroup()
                                        .addComponent(btnAddRow)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnUpdate)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnSearchNow)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnCancel))
                                    .addComponent(remarks, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnFirst)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPrior)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNext)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLast)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(oDate, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDel, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(oDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(btnLast))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                .addComponent(suppCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8)
                                .addComponent(refNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2)
                                .addComponent(invNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1))
                            .addComponent(suppName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addComponent(btnNext)
                    .addComponent(btnPrior)
                    .addComponent(btnFirst))
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(remarks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(btnSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnView)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDel)
                            .addComponent(btnAddRow)
                            .addComponent(btnCancel)
                            .addComponent(btnSearchNow)
                            .addComponent(btnSave)
                            .addComponent(btnUpdate))))
                .addGap(0, 2, Short.MAX_VALUE))
        );

        custHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(custHistory);

        histogram.setText("Display History");
        histogram.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                histogramStateChanged(evt);
            }
        });

        javax.swing.GroupLayout custhistLayout = new javax.swing.GroupLayout(custhist);
        custhist.setLayout(custhistLayout);
        custhistLayout.setHorizontalGroup(
            custhistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(custhistLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(custhistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(custhistLayout.createSequentialGroup()
                        .addComponent(histogram)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        custhistLayout.setVerticalGroup(
            custhistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(custhistLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(histogram)
                .addGap(14, 14, 14)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnexit.setBackground(new java.awt.Color(0, 102, 102));
        btnexit.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnexit.setForeground(new java.awt.Color(255, 255, 255));
        btnexit.setMnemonic('X');
        btnexit.setText("Exit");
        btnexit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnexitActionPerformed(evt);
            }
        });

        netTotalStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                netTotalStockActionPerformed(evt);
            }
        });

        jLabel14.setText("NTS:");

        javax.swing.GroupLayout pan_printsLayout = new javax.swing.GroupLayout(pan_prints);
        pan_prints.setLayout(pan_printsLayout);
        pan_printsLayout.setHorizontalGroup(
            pan_printsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pan_printsLayout.createSequentialGroup()
                .addGap(295, 295, 295)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(netTotalStock, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnexit, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pan_printsLayout.setVerticalGroup(
            pan_printsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pan_printsLayout.createSequentialGroup()
                .addGroup(pan_printsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pan_printsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(netTotalStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel14))
                    .addComponent(btnexit, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 10, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(purchaseScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 896, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(custhist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(pan_prints, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpanspl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(80, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pan_prints, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jpanspl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(custhist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(purchaseScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jScrollPane2.setViewportView(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 1308, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void splPerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_splPerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_splPerActionPerformed

    private void otherExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_otherExpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_otherExpActionPerformed

    private void splRsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_splRsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_splRsActionPerformed

    private void paidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_paidActionPerformed
    String sellers1;
    String refNo1;
    String remarks1;
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        forBackBtnEnable(false);
        recEditBtnEnable(false);
        textFieldsPInvoiceEditable(true);
        saveUpdateBtnVisible("update", true);
        
        sellers1=(String)suppName.getSelectedItem();
        refNo1=refNo.getText();
        remarks1=remarks.getText();
        //System.out.println("At EDIT Max PC:"+productCount);
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        forBackBtnEnable(false);
        recEditBtnEnable(false);
        saveUpdateBtnVisible("save", true);
        textFieldsPInvoiceEditable(true);
        setNullTextFields();

        inetializePrductPanel();
        try {
            oDate.setDate(dateField.getPresentDate());
        } catch (ParseException ex) {
            Logger.getLogger(RECOVERY.class.getName()).log(Level.SEVERE, null, ex);
        }
        /*    route.setEditable(true);
         route.setText("");
         route.requestFocus();
         code.setText("");*/
        //System.out.println("At ADD Max PC:"+productCount);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
        JFrame j = new JFrame();
        j.setAlwaysOnTop(true);
        if (JOptionPane.showConfirmDialog(j,
                "Are you sure ! \nOn selecting \"Yes\" this will Delete the tasks?", "Confermation Diloge",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) { //ConfermationDiloge()){
                
                PAK_DB data = new PAK_DB();
            
            try {
                
                boolean tf = false;
                if (invNo.getText() == null) {
                } else {
                    
                    data.delete_purchase(connAA, invNo.getText());
                    data.delete_purchase_products_in_purchase(connAA, invNo.getText());
                    
                    setNullTextFields();
                    setLastRec();
                    setLastInvoice();
                }
                
            } catch (Exception ex) {
                Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {

        }
    }//GEN-LAST:event_btnDelActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        forBackBtnEnable(false);
        recEditBtnEnable(false);
        saveUpdateBtnVisible("search", true);
        textFieldsPInvoiceEditable(false);
        invNo.setEditable(true);
        setNullTextFields();
        invNo.setText("");
        invNo.requestFocus();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
//       /*        
        try {
//            dialogeClass.createViewPurchaseWin();
            dialogeClass.createViewPurchaseWin();
        } catch (SQLException ex) {
            Logger.getLogger(PURCHASE.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (isSaved) {
            invNo.setText(dialogeClass.codePurchase);
            findRecords(invNo.getText());
        } else {
            //            JFrame j=new JFrame();
            //                    j.setAlwaysOnTop(true);
            //                    JOptionPane.showMessageDialog(j, "Not Saved", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
        }
//                */
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        try {
            setLastRec();
        } catch (ParseException ex) {
            Logger.getLogger(PURCHASE.class.getName()).log(Level.SEVERE, null, ex);
        }
        //System.out.println("At LAST Max PC:"+productCount);
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // SELECT LAG(p.FirstName) OVER (ORDER BY p.BusinessEntityID) PreviousValue,p.FirstName FROM Person.Person p
        PAK_DB data = new PAK_DB();
        
        try {
            
            ArrayList<String> next = new ArrayList<String>();
            next = data.next_purchase(connAA, invNo.getText());
            if (next != null) {
                setTextinPurchase(next, dateField);
            } else {
                JFrame j = new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Next not found", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
            }
            
        } catch (Exception ex) {
            Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
        }
        //System.out.println("At NEXT Max PC:"+productCount);
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnPriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPriorActionPerformed
        // SELECT LAG(p.FirstName) OVER (ORDER BY p.BusinessEntityID) PreviousValue,p.FirstName FROM Person.Person p
        PAK_DB data = new PAK_DB();
        
        try {
            
            ArrayList<String> prior = new ArrayList<String>();
            prior = data.prior_purchase(connAA, invNo.getText());
            if (prior != null) {
                setTextinPurchase(prior, dateField);
            } else {
                JFrame j = new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Prior not found", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
            }

            
        } catch (Exception ex) {
            Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
        }
        //System.out.println("At PRIOR Max PC:"+productCount);
    }//GEN-LAST:event_btnPriorActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        try {
            setFirstRec();
        } catch (ParseException ex) {
            Logger.getLogger(PURCHASE.class.getName()).log(Level.SEVERE, null, ex);
        }
        //System.out.println("At FIRST Max PC:"+productCount);
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        saveUpdateBtnVisible("all", false);
        forBackBtnEnable(true);
        recEditBtnEnable(true);
        textFieldsPInvoiceEditable(false);
        try {
            setFirstRec();
        } catch (ParseException ex) {
            Logger.getLogger(RECOVERY.class.getName()).log(Level.SEVERE, null, ex);
        }
        editableProductPanel(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        
        updateSumSplPanel();
        boolean tf = false;
        PAK_DB data = new PAK_DB();
        Connection connAA = null;
        try {
            
            tf = data.update_purchase(connAA, code.get_correct_date(oDate.getDate()), invNo.getText() + "", refNo.getText(), suppCode.getText(), grossAmt.getText(), fmrsumrs.getText(), splRs.getText(), otherExp.getText(), avediscper.getText(), discount.getText(), taxPer.getText(), taxRs.getText(), netAmt.getText(), remaining.getText(), paid.getText(), remarks.getText(), netpayable.getText(), dcode.getText(),splFmrPer.getText());       
        } catch (Exception ex) {
            Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = 1; i <= productCount; i++) {
            System.out.println("-> " + i + " : productCount->" + productCount);
            if (purchaseProducts[i] != null && purchaseProducts[i].isDisplayable()) {
                if (!purchaseProducts[i].getSeekText().isEmpty()) {
                    boolean isPresent = false;
                    PAK_DB data1 = new PAK_DB();                   
                    try {
                        if (data.find_max_in_purchase_products(connAA, invNo.getText()) <= productCount) {
                            System.out.println("IF");
                            isPresent = data1.check_product_line_item_presence_new(connAA, invNo.getText(), purchaseProducts[i].getSeqNoText(), productCount);   
                        } else {
                            isPresent = false;
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    System.out.println("isPresent->" + isPresent);
                    if (isPresent) {
                        //==========delupdate ===========
                        System.out.println(invNo.getText() + "" + " UPDATE-> " + purchaseProducts[i].getSeqNoText());

                        PAK_DB data2 = new PAK_DB();
                        try {
                                String tempDate;
                                if(purchaseProducts[i].getExpDate().getDate()!=null){
                                    //tempDate=purchaseProducts[i].getExpDate().getDate().toString();
                                    tempDate=code.get_correct_date(purchaseProducts[i].getExpDate().getDate());
                                }else{
                                    tempDate=null;
                                }
                                tf=data2.update_purchase_products_in_table_new(connAA,
                                    invNo.getText(),purchaseProducts[i].getSeqNoText(),
                                    purchaseProducts[i].getSeekText(),
                                    purchaseProducts[i].getTotalQtyText(),
                                    purchaseProducts[i].getRateText(),
                                    purchaseProducts[i].getGrossAmtText(),
                                    purchaseProducts[i].getTdo().getText(),
                                    purchaseProducts[i].getDiscPerText(),
                                    purchaseProducts[i].getFmr().getText(),
                                    purchaseProducts[i].getTaxPerText(),
                                    purchaseProducts[i].getNetAmtText(),
                                    purchaseProducts[i].getDamage().getText(),
                                    purchaseProducts[i].getFree().getText(),
                                    "0.0",
                                    purchaseProducts[i].getCustom().getText(),
                                    tempDate);
                                    System.out.println("update_purchase_products_in_table_new "+tf);
                            
                        } catch (Exception ex) {
                            Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        System.out.println(invNo.getText() + "" + " INSERT-> " + purchaseProducts[i].getSeqNoText());

                        PAK_DB data3 = new PAK_DB();
                        try {
                        String tempDate;
                            if(purchaseProducts[i].getExpDate().getDate()!=null){
                                //tempDate=purchaseProducts[i].getExpDate().getDate().toString();
                                tempDate=code.get_correct_date(purchaseProducts[i].getExpDate().getDate());
                            }else{
                                tempDate=null;
                            }
                            tf=data3.insert_purchase_products_in_table(connAA,
                                    invNo.getText(),
                                    purchaseProducts[i].getSeqNoText(),
                                    purchaseProducts[i].getSeekText(),
                                    purchaseProducts[i].getTotalQtyText(),
                                    purchaseProducts[i].getRateText(),
                                    purchaseProducts[i].getGrossAmtText(),
                                    purchaseProducts[i].getTdo().getText(),
                                    purchaseProducts[i].getDiscPerText(),
                                    purchaseProducts[i].getFmr().getText(),
                                    purchaseProducts[i].getTaxPerText(),
                                    purchaseProducts[i].getNetAmtText(),
                                    purchaseProducts[i].getDamage().getText(),
                                    purchaseProducts[i].getFree().getText(),
                                    "0.0",
                                    purchaseProducts[i].getCustom().getText(),
                                    tempDate);
                            
                            
                        } catch (Exception ex) {
                            Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
                        } 
                    }
                } else {
                    JFrame j = new JFrame();
                    j.setAlwaysOnTop(true);
                    JOptionPane.showMessageDialog(j, "Empty Seek Value will not be updatd \n Nor will be deleted", "InfoBox: ", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        
        
        if (tf) {
            btnexit.setVisible(true);
            saveUpdateBtnVisible("all", false);
            forBackBtnEnable(true);
            recEditBtnEnable(true);
            recEditActionBtnVisible(false);
            textFieldsPInvoiceEditable(false);
            editableProductPanel(false);
        } else {
            JFrame j = new JFrame();
            j.setAlwaysOnTop(true);
            JOptionPane.showMessageDialog(j, "Not Edited", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
        }
        loadProductsPanel(invNo.getText());
        //System.out.println("At UPDATE Max PC:"+productCount);
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (!(suppCode.getText().toString().equalsIgnoreCase(""))) {
            PAK_DB data = new PAK_DB();
            
            try {
                
                boolean tf = false;

                ///Max
                int max = 0, codeInt = 0;
                max = data.find_max_in_purchase_code(connAA);

                System.out.println("Max:" + max);
                if (max == 0) {
                    codeInt = 1;
                } else {
                    codeInt = max + 1;
                }
                ///Max                 String.valueOf(codeInt)
                //dateField.toDateString(oDate.getDate().toString())
                
                String dated = code.get_correct_date(oDate.getDate());

                tf = data.insert_purchase_in_table(connAA, dated,
                        codeInt, refNo.getText(), suppCode.getText(), grossAmt.getText(), fmrsumrs.getText(),
                        splRs.getText(), otherExp.getText(), avediscper.getText(), discount.getText(), taxPer.getText(),
                        taxRs.getText(), netAmt.getText(), remaining.getText(), paid.getText(), remarks.getText(),
                        netpayable.getText(), dcode.getText(),splFmrPer.getText());
                
                for (int i = 1; i <= productCount; i++) {
                    if (purchaseProducts[i].isDisplayable() && !purchaseProducts[i].getSeekText().isEmpty()) {

                        
                        String tempDate;
                            if(purchaseProducts[i].getExpDate().getDate()!=null){
//                                tempDate=purchaseProducts[i].getExpDate().getDate().toString();
                                  tempDate=code.get_correct_date(purchaseProducts[i].getExpDate().getDate());
                            }else{
                                tempDate=null;
                            }                            
                            tf=data.insert_purchase_products_in_table(connAA,
                                    codeInt+"",
                                    purchaseProducts[i].getSeqNoText(),
                                    purchaseProducts[i].getSeekText(),
                                    purchaseProducts[i].getTotalQtyText(),
                                    purchaseProducts[i].getRateText(),
                                    purchaseProducts[i].getGrossAmtText(),
                                    purchaseProducts[i].getTdo().getText(),
                                    purchaseProducts[i].getDiscPerText(),
                                    purchaseProducts[i].getFmr().getText(),
                                    purchaseProducts[i].getTaxPerText(),
                                    purchaseProducts[i].getNetAmtText(),
                                    purchaseProducts[i].getDamage().getText(),
                                    purchaseProducts[i].getFree().getText(),
                                    "0.0",
                                    purchaseProducts[i].getCustom().getText(),
                                    tempDate);
                    }
                }
                
                if (tf) {
                    textFieldsPInvoiceEditable(false);
                    invNo.setText(String.valueOf(codeInt));
                    invNo.setEditable(false);
                    editableProductPanel(false);
                    forBackBtnEnable(true);
                    recEditBtnEnable(true);
                    recEditActionBtnVisible(false);
                    setLastInvoice();
                    saveUpdateBtnVisible("all", false);
                    btnexit.setVisible(true);
                }
                //System.out.println("Is Inserted :"+ tf);
                
            } catch (Exception ex) {
                Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JFrame j = new JFrame();
            j.setAlwaysOnTop(true);
            JOptionPane.showMessageDialog(j, "Enter Seller No And Others \n OR Press Cancel to Contine  ", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnSearchNowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchNowActionPerformed
        findRecords(invNo.getText());

    }//GEN-LAST:event_btnSearchNowActionPerformed

    private void btnexitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnexitActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnexitActionPerformed

    private void invNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_invNoActionPerformed

    private void btnAddRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRowActionPerformed
        addRow();
        System.out.println("At ADD ROW Max PC:" + productCount);
    }//GEN-LAST:event_btnAddRowActionPerformed

    private void suppCodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_suppCodeKeyReleased
        try {
            updateComboBox(suppCode, suppName, "supp");
        } catch (Exception ex) {
            Logger.getLogger(RECOVERY.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_suppCodeKeyReleased

    private void suppNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suppNameActionPerformed
        System.out.println("suppName.getSelectedItem().toString()" + suppName.getSelectedItem().toString());
        suppCode.setText(getCode(suppName.getSelectedItem().toString(), "supp"));
    }//GEN-LAST:event_suppNameActionPerformed

    private void suppNamePopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_suppNamePopupMenuWillBecomeVisible

        PAK_DB data = new PAK_DB();
        
        try {
            
            suppName.setModel(buildAllComboBoxModel("supp",connAA));
            System.out.println("=========================== suppCode.getText().isEmpty() :"+suppCode.getText());
            if (setSelectedComboItem(suppCode, suppName, ((!suppCode.getText().isEmpty()) ? data.find_supp_name_by_code(connAA, suppCode.getText()) : ""))) {
            } else {
                suppCode.setText(getCode(suppName.getSelectedItem().toString(), "supp"));
            }

            
        } catch (SQLException ex) {
            System.out.println("SQLException "+ex);
            Logger.getLogger(CUSTREC.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            System.out.println("Exception "+ex);
            Logger.getLogger(CUSTREC.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_suppNamePopupMenuWillBecomeVisible

    private void suppCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suppCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_suppCodeActionPerformed

    private void discountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_discountActionPerformed

    private void avediscperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_avediscperActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_avediscperActionPerformed

    private void remainingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remainingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_remainingActionPerformed

    private void netAmtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_netAmtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_netAmtActionPerformed

    private void taxRsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taxRsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_taxRsActionPerformed

    private void taxPerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taxPerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_taxPerActionPerformed

    private void grossAmtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grossAmtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_grossAmtActionPerformed

    private void linvNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linvNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_linvNoActionPerformed

    private void netpayableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_netpayableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_netpayableActionPerformed

    private void dNamePopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_dNamePopupMenuWillBecomeVisible
        PAK_DB data = new PAK_DB();
        
        try {
            
            dName.setModel(buildAllComboBoxModel("sm",connAA));
            System.out.println("=========================== dcode.getText().isEmpty() :"+dcode.getText());
            if (setSelectedComboItem(dcode, dName, ((!dcode.getText().isEmpty()) ? data.find_sm_name_by_code(connAA, dcode.getText()) : ""))) {

            } else {
                dcode.setText(getCode(dName.getSelectedItem().toString(), "sm"));
            }

            
        } catch (SQLException ex) {
            Logger.getLogger(CUSTREC.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(CUSTREC.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_dNamePopupMenuWillBecomeVisible

    private void dNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dNameActionPerformed
        System.out.println("dName.getSelectedItem().toString()" + dName.getSelectedItem().toString());
        dcode.setText(getCode(dName.getSelectedItem().toString(), "sm"));
    }//GEN-LAST:event_dNameActionPerformed

    private void dcodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dcodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dcodeActionPerformed

    private void dcodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dcodeKeyReleased
        try {
            updateComboBox(dcode, dName, "sm");
        } catch (Exception ex) {
            Logger.getLogger(RECOVERY.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_dcodeKeyReleased

    private void splPanelKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_splPanelKeyReleased

    }//GEN-LAST:event_splPanelKeyReleased

    private void paidKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paidKeyReleased
        frmRemaning();
    }//GEN-LAST:event_paidKeyReleased

    private void splPerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_splPerKeyReleased
        frmSplRs();
        frmNetPayable();
        frmRemaning();
    }//GEN-LAST:event_splPerKeyReleased

    private void splRsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_splRsKeyReleased
        frmSplPer();
        frmNetPayable();
        frmRemaning();
    }//GEN-LAST:event_splRsKeyReleased

    private void otherExpKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_otherExpKeyReleased
        frmNetPayable();
        frmRemaning();
    }//GEN-LAST:event_otherExpKeyReleased

    private void link9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_link9MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_link9MouseClicked

    private void link9MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_link9MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_link9MouseEntered

    private void link9MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_link9MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_link9MouseExited

    private void link9MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_link9MouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_link9MouseReleased

    private void suppCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_suppCodeKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
    //            dialogeClass.createViewSalesWin();
                dialogeClass.createViewSupRecWin();
            } catch (SQLException ex) {
                Logger.getLogger(PakPurchaseFieldPanel1.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(DynamicERP.dialoge.viewforms.ViewForm1.isSaved){
                suppCode.setText(dialogeClass.codeSupRec);
            }else{
            }
        }
        try {
            updateComboBox(suppCode, suppName,"supp");
        } catch (Exception ex) {
            Logger.getLogger(PakPurchaseFieldPanel1.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }//GEN-LAST:event_suppCodeKeyPressed

    private void fmrsumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fmrsumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fmrsumActionPerformed

    private void fmrsumKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fmrsumKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_fmrsumKeyReleased

    private void tdosumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tdosumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tdosumActionPerformed

    private void tdosumKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tdosumKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_tdosumKeyReleased

    private void fmrsumrsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fmrsumrsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fmrsumrsActionPerformed

    private void fmrsumrsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fmrsumrsKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_fmrsumrsKeyReleased

    private void fmrsumrsCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_fmrsumrsCaretUpdate
//        if(fmrsumrs.getText()!=null){
//            float f = Float.parseFloat(fmrsumrs.getText())/2;
//        fmrsum.setText(f+"");}
//        System.out.println("Caret Update");
////        fmrsumrs.setText(fmrsumrs.getText());
    }//GEN-LAST:event_fmrsumrsCaretUpdate

    private void splFmrRsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_splFmrRsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_splFmrRsActionPerformed

    private void splFmrRsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_splFmrRsKeyReleased
        frmSplFmrPer();
        frmNetPayable();
        frmRemaning();
    }//GEN-LAST:event_splFmrRsKeyReleased

    private void splFmrRsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_splFmrRsKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_splFmrRsKeyTyped

    private void splFmrPerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_splFmrPerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_splFmrPerActionPerformed

    private void splFmrPerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_splFmrPerKeyReleased
        frmSplFmrRs();
        frmNetPayable();
        frmRemaning();
    }//GEN-LAST:event_splFmrPerKeyReleased

    private void histogramStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_histogramStateChanged
        if(!histogram.isSelected()){khaliTable();}
    }//GEN-LAST:event_histogramStateChanged

    private void netTotalStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_netTotalStockActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_netTotalStockActionPerformed

    private void remarksKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_remarksKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {ffs();}
    }//GEN-LAST:event_remarksKeyReleased
    public boolean setSelectedComboItem(JTextField textField, JComboBox comboBox, String value) {
        boolean tf = false;
        String item;
        if (value!=null) {
            for (int i = 0; i < comboBox.getItemCount(); i++) {
                item = (String) comboBox.getItemAt(i);
                if (!item.isEmpty()) {
                    if (item.equals(value)) {
                        comboBox.setSelectedIndex(i);
                        tf = true;
                        break;
                    }
                } else {
                    System.out.println(">>>> Message: Item is empty. . . ");
                    JFrame j = new JFrame();
                    j.setAlwaysOnTop(true);
                    JOptionPane.showMessageDialog(j, "First Add Items in : " + comboBox.getName(), "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } else {
            System.out.println(">>>> Message: Value could not be  Selected . . . ");
            comboBox.setSelectedIndex(0);
        }
        return tf;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PURCHASE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PURCHASE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PURCHASE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PURCHASE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PURCHASE().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Builty1;
    private javax.swing.JLabel Builty11;
    private javax.swing.JLabel Builty12;
    private javax.swing.JLabel Builty14;
    private javax.swing.JLabel Builty15;
    private javax.swing.JLabel Builty16;
    private javax.swing.JLabel Builty17;
    private javax.swing.JLabel Builty18;
    private javax.swing.JLabel Builty19;
    private javax.swing.JLabel Builty2;
    private javax.swing.JLabel Builty20;
    private javax.swing.JLabel Builty21;
    private javax.swing.JLabel Builty22;
    private javax.swing.JLabel Builty3;
    private javax.swing.JLabel Builty4;
    private javax.swing.JLabel Builty8;
    private javax.swing.JTextField avediscper;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAddRow;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrior;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSearchNow;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnView;
    private javax.swing.JButton btnexit;
    private javax.swing.JTable custHistory;
    private javax.swing.JPanel custhist;
    private javax.swing.JComboBox dName;
    private javax.swing.JTextField dcode;
    private javax.swing.JTextField discount;
    private javax.swing.JTextField fmrsum;
    private javax.swing.JTextField fmrsumrs;
    private javax.swing.JTextField grossAmt;
    private javax.swing.JCheckBox histogram;
    private javax.swing.JTextField invNo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel jpanspl;
    private javax.swing.JLabel link9;
    private javax.swing.JTextField linvNo;
    private javax.swing.JTextField netAmt;
    private javax.swing.JTextField netTotalStock;
    private javax.swing.JTextField netpayable;
    private com.toedter.calendar.JDateChooser oDate;
    private javax.swing.JTextField otherExp;
    private javax.swing.JTextField paid;
    private javax.swing.JPanel pan_prints;
    private javax.swing.JPanel panel;
    private javax.swing.JScrollPane purchaseScrollPane;
    private javax.swing.JTextField refNo;
    private javax.swing.JTextField remaining;
    private javax.swing.JTextField remarks;
    private javax.swing.JTextField splFmrPer;
    private javax.swing.JTextField splFmrRs;
    private javax.swing.JPanel splPanel;
    private javax.swing.JTextField splPer;
    private javax.swing.JTextField splRs;
    private javax.swing.JPanel sumPanel;
    private javax.swing.JTextField suppCode;
    private javax.swing.JComboBox suppName;
    private javax.swing.JTextField taxPer;
    private javax.swing.JTextField taxRs;
    private javax.swing.JTextField tdosum;
    // End of variables declaration//GEN-END:variables

    public JTextField getAvediscper() {
        return avediscper;
    }

    public void setAvediscper(JTextField avediscper) {
        this.avediscper = avediscper;
    }

    public JTextField getDiscount() {
        return discount;
    }

    public void setDiscount(JTextField discount) {
        this.discount = discount;
    }

    public JTextField getGrossAmt() {
        return grossAmt;
    }

    public void setThisGrossAmt(JTextField grossAmt) {
        this.grossAmt = grossAmt;
    }

    public JTextField getNetAmt() {
        return netAmt;
    }

    public void setNetAmt(JTextField netAmt) {
        this.netAmt = netAmt;
    }

    public JTextField getNetpayable() {
        return netpayable;
    }

    public void setNetpayable(JTextField netpayable) {
        this.netpayable = netpayable;
    }

    public JTextField getRemaining() {
        return remaining;
    }

    public void setRemaining(JTextField remaining) {
        this.remaining = remaining;
    }

    public JPanel getSplPanel() {
        return splPanel;
    }

    public void setSplPanel(JPanel splPanel) {
        this.splPanel = splPanel;
    }

    public JTextField getSplPer() {
        return splPer;
    }

    public void setSplPer(JTextField splPer) {
        this.splPer = splPer;
    }

    public JTextField getSplRs() {
        return splRs;
    }

    public void setSplRs(JTextField splRs) {
        this.splRs = splRs;
    }

    public JTextField getTaxPer() {
        return taxPer;
    }

    public void setTaxPer(JTextField taxPer) {
        this.taxPer = taxPer;
    }

    public JTextField getTaxRs() {
        return taxRs;
    }

    public void setTaxRs(JTextField taxRs) {
        this.taxRs = taxRs;
    }

    // Start of my variables declaration   
    private JTable jTable1;
    DefaultTableModel model;
    Vector originalTableModel;
    ListSelectionModel selectionModel;

    private static int productCount = 0;
    private static PakPurchaseFieldPanel1[] purchaseProducts = new PakPurchaseFieldPanel1[500];
    private static PurchaseHeaderPanel purchaseHeaderPanel = new PurchaseHeaderPanel();
    private static JPanel purchasePanel;// = new JPanel();
    // End of my variables declaration                   

    private void initTable() {
//        String col[] = {"Seq#","PCode","BCode","ProductName","PurPCS","PurCTN","PurQTY","PurDMG","PurRate","GrossAmount","Disc%","DiscRS","Tax%","TaxRS","TOPcs","UCHRS","SCHRS","FMR%","FMRRS","TaxRS","Expiry","Batch","NetAmount"};
        String col[] = {"Seq#", "PCode", "BCode"};
        int k = 0;
        Object row[][] = new Object[][]{{"1", new ButtonTextFieldCellTest.ButtonTextFieldCell(), new ButtonTextFieldCellTest.ButtonTextFieldCell()},
        {"2", new ButtonTextFieldCellTest.ButtonTextFieldCell(), new ButtonTextFieldCellTest.ButtonTextFieldCell()},
        {"3", new ButtonTextFieldCellTest.ButtonTextFieldCell(), new ButtonTextFieldCellTest.ButtonTextFieldCell()},
        {"4", new ButtonTextFieldCellTest.ButtonTextFieldCell(), new ButtonTextFieldCellTest.ButtonTextFieldCell()}};
//        String row[][] =new String[3][23];
        /*
         for(int i = 0; i < 3; i++){
         for(int j = 0; j < 23; j++){
         row[i][j]=""+k++;
         }
         }
                
         */
//        row=new String[][]{{"Seq#","PCode","BCode","ProductName","PurPCS","PurCTN","PurQTY","PurDMG","PurRate","GrossAmount","Disc%","DiscRS","Tax%","TaxRS","TOPcs","UCHRS","SCHRS","FMR%","FMRRS","TaxRS","Expiry","Batch","NetAmount"},
//                                       {"1Seq#","1PCode","1BCode","ProductName","PurPCS","PurCTN","PurQTY","PurDMG","PurRate","GrossAmount","Disc%","DiscRS","Tax%","TaxRS","TOPcs","UCHRS","SCHRS","FMR%","FMRRS","TaxRS","Expiry","Batch","NetAmount"},
//                                       {"2Seq#","2PCode","2BCode","ProductName","PurPCS","PurCTN","PurQTY","PurDMG","PurRate","GrossAmount","Disc%","DiscRS","Tax%","TaxRS","TOPcs","UCHRS","SCHRS","FMR%","FMRRS","TaxRS","Expiry","Batch","NetAmount"}};
        model = new DefaultTableModel(row, col);
        jTable1 = new JTable(model);
        jTable1.setRowHeight(30);
        jTable1.setRowHeight(0, 30);
        jTable1.setPreferredSize(new Dimension(purchaseScrollPane.getWidth(), 35));
        purchaseScrollPane.setViewportView(jTable1);
    }
    JInternalFrame f = new JInternalFrame();
    javax.swing.JPanel panel1[] = new javax.swing.JPanel[2];
    JTextField J[][] = new JTextField[2][23];

    private void initScrollPanel() {

        f.getContentPane().setLayout(new BoxLayout(f.getContentPane(), BoxLayout.PAGE_AXIS));
//        f.putClientProperty("JInternalFrame.isPalette", Boolean.TRUE);
//        f.getRootPane().setWindowDecorationStyle(JRootPane.NONE);
        for (int j = 0; j < 2; j++) {
            initializePanelListner(panel1[j]);
            for (int i = 0; i < 23; i++) {
                J[j][i] = new JTextField(4);
                J[j][i].setBounds(150, 350 + i * 25, 20, 20);
                panel1[j].add(J[j][i]);
                panel1[j].setAlignmentX(Component.CENTER_ALIGNMENT);
            }
            f.add(panel1[j]);
        }

//        purchaseScrollPane.
        purchaseScrollPane.setViewportView(f);
    }

    private void initializePanelListner(final JPanel p) {
//        p=new JPanel();
        p.addMouseListener(new MouseListener() {

            @Override
            public void mouseClicked(MouseEvent me) {

//                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void mousePressed(MouseEvent me) {
//                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void mouseReleased(MouseEvent me) {
//                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                p.setBackground(Color.green);
            }

            @Override
            public void mouseExited(MouseEvent me) {
//                java.awt.Point p1 = new java.awt.Point(me.getLocationOnScreen());
//                SwingUtilities.convertPointFromScreen(p1, me.getComponent());
//                if(me.getComponent().contains(p1)) {return;}
                p.setBackground(null);
            }
        });
    }

    private void initPanel() {
        purchasePanel = new JPanel();
        purchasePanel.setLayout(new BoxLayout(purchasePanel, BoxLayout.PAGE_AXIS));
        purchasePanel.add(purchaseHeaderPanel);
        addRow();

        purchaseScrollPane.getViewport().setView(purchasePanel);
    }
    int i;
    private void addRow() {
        productCount++;
        purchaseProducts[productCount] = new PakPurchaseFieldPanel1();
        purchaseProducts[productCount].setName(productCount + "");
        purchaseProducts[productCount].setSeqNoText(productCount + "");
        
        for (i = 0; i < 22; i++) {
            switch(i)
            {
                case 1:case 4:case 5: case 6:case 7:case 8:case 9:case 10:case 11:case 13:case 12:case 14:case 15:case 16:case 17:case 18:case 19:case 20:
                purchaseProducts[productCount].getComponent(i).addKeyListener(new KeyAdapter(){
                    public void keyReleased(KeyEvent e) {
                        int keyCode = e.getKeyCode();
                        switch( keyCode ) { 
                            case KeyEvent.VK_UP:
                                perku(e);
                                break;
                            case KeyEvent.VK_DOWN:
                                perkd(e);
                                break;
                            case KeyEvent.VK_ENTER:
                                //if(i!=4){
                                    perke(e);
//                                }
                                break;
                        }
                    }
                });
                break;
                case 2:
                    purchaseProducts[productCount].getComponent(i).addKeyListener(new KeyAdapter(){
                        public void keyReleased(KeyEvent e) {
                            int keyCode = e.getKeyCode();
                            switch( keyCode ) { 
                                case KeyEvent.VK_UP:
                                    perku(e);
                                    break;
                                case KeyEvent.VK_DOWN:
                                    perkd(e);
                                    break;
                            }
                        }
                    });
                    break;
            }
        }
        purchaseProducts[productCount].getGrossAmt().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent e) {
//                System.out.print("T:"+purchaseProducts[productCount].getGrossAmt().getText());
                updateSumSplPanel();
            }
        });
        purchaseProducts[productCount].getSeek().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent e) {/*System.out.print("T:"+purchaseProducts[productCount].getGrossAmt().getText());*/                    JTextField t = (JTextField) e.getSource();
//                System.out.print("T:"+purchaseProducts[productCount].getGrossAmt().getText());
                updateSumSplPanel();
                if(histogram.isSelected()){
                String col[]={"Inv No","Date","Qty","Rate","Disc %"};
                updateTableView(col,purchaseProducts[Integer.parseInt(t.getParent().getName())].getSeek().getText());
                }
                netTotalStock.setText(SALES.setNetTotalStock(purchaseProducts[Integer.parseInt(t.getParent().getName())].getSeek().getText(),connAA));
                
            }
        });
        purchaseProducts[productCount].getSeek().addCaretListener(new CaretListener() {

            @Override
            public void caretUpdate(CaretEvent ce) { /*System.out.print("T:"+purchaseProducts[productCount].getGrossAmt().getText());*/                    JTextField t = (JTextField) ce.getSource();
                if(t.getText()!=null){
                if(histogram.isSelected()){
                String col[]={"Inv No","Date","Qty","Rate","Disc %"};
                updateTableView(col,purchaseProducts[Integer.parseInt(t.getParent().getName())].getSeek().getText());
                }
                }
            }
        });


        purchaseProducts[productCount].getpName().addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {/*System.out.print("T:"+purchaseProducts[productCount].getGrossAmt().getText());System.out.print("T:"+purchaseProducts[productCount].getGrossAmt().getText());*/                    JComboBox t= (JComboBox) ae.getSource();
                updateSumSplPanel();
                
                if(histogram.isSelected()){
                String col[]={"Inv No","Date","Qty","Rate","Disc %"};
                updateTableView(col,purchaseProducts[Integer.parseInt(t.getParent().getName())].getSeek().getText());
                }
            }
        });

        purchaseProducts[productCount].getRate().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent e) {
//                System.out.print("T:"+purchaseProducts[productCount].getGrossAmt().getText());
                updateSumSplPanel();
            }
        });
        purchaseProducts[productCount].getCtn().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent e) {
//                System.out.print("T:"+purchaseProducts[productCount].getGrossAmt().getText());
                updateSumSplPanel();
            }
        });
        purchaseProducts[productCount].getPcs().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent e) {
//                System.out.print("T:"+purchaseProducts[productCount].getGrossAmt().getText());
                updateSumSplPanel();
            }
        });
        purchaseProducts[productCount].getTotalQty().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent e) {
//                System.out.print("T:"+purchaseProducts[productCount].getGrossAmt().getText());
                updateSumSplPanel();
            }
        });
        purchaseProducts[productCount].getFmr().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent e) {
//                System.out.print("T:"+purchaseProducts[productCount].getGrossAmt().getText());
                updateSumSplPanel();
            }
        });
        purchaseProducts[productCount].getFmrrs().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent e) {
//                System.out.print("T:"+purchaseProducts[productCount].getGrossAmt().getText());
                updateSumSplPanel();
            }
        });
        purchaseProducts[productCount].getTdo().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent e) {
//                System.out.print("T:"+purchaseProducts[productCount].getGrossAmt().getText());
                updateSumSplPanel();
            }
        });
        purchaseProducts[productCount].getTaxPer().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent e) {
//                System.out.print("T:"+purchaseProducts[productCount].getGrossAmt().getText());
                updateSumSplPanel();
            }
        });
        purchaseProducts[productCount].getTaxRs().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent e) {
//                System.out.print("T:"+purchaseProducts[productCount].getGrossAmt().getText());
                updateSumSplPanel();
            }
        });
        purchaseProducts[productCount].getDiscPer().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent e) {
//                System.out.print("T:"+purchaseProducts[productCount].getGrossAmt().getText());
                updateSumSplPanel();
            }
        });
        purchaseProducts[productCount].getDiscRs().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent e) {
//                System.out.print("T:"+purchaseProducts[productCount].getGrossAmt().getText());
                updateSumSplPanel();
            }
        });

        purchaseProducts[productCount].getpName().addPopupMenuListener(new PopupMenuListener() {

            @Override
            public void popupMenuWillBecomeVisible(PopupMenuEvent pme) {
            }

            @Override
            public void popupMenuWillBecomeInvisible(PopupMenuEvent pme) {
                updateSumSplPanel();
            }

            @Override
            public void popupMenuCanceled(PopupMenuEvent pme) {
            }

        });
//        purchaseProducts[productCount].getpName().addKeyListener(new KeyAdapter(){
//            public void keyReleased(KeyEvent e) {
////                System.out.print("T:"+purchaseProducts[productCount].getGrossAmt().getText());
//                updateSumSplPanel();
//            }
//        });
        purchaseProducts[productCount].getjLabel2().addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                JFrame j = new JFrame();
                j.setAlwaysOnTop(true);//
                JLabel label = (JLabel) e.getSource();
                
                if(label.isEnabled()){
                    System.out.println("TotalQty");

                    if (JOptionPane.showConfirmDialog(j,
                            "Are you sure ! \nOn selecting \"Yes\" this will Delete the Row...\n\n Deleted Row can not be restored  . . .", "Confermation Diloge",
                            JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) { //ConfermationDiloge()){
                        btnCancel.setVisible(false);
                        btnexit.setVisible(false);
                        removeRow(Integer.parseInt(label.getParent().getName()));
String b = (new BigDecimal(Float.parseFloat(purchaseProducts[Integer.parseInt(label.getParent().getName())].getTotalQtyText())).add(new BigDecimal(Float.parseFloat(purchaseProducts[Integer.parseInt(label.getParent().getName())].getDamage().getText()))).add(new BigDecimal(Float.parseFloat(purchaseProducts[Integer.parseInt(label.getParent().getName())].getFree().getText()))))+"";
                        deletePurchaseProduct(invNo.getText(), label.getParent().getName(),b, purchaseProducts[Integer.parseInt(label.getParent().getName())].getSeekText(),purchaseProducts[Integer.parseInt(label.getParent().getName())].getSeqNoText());
                        updateSumSplPanel();
                    }
                    purchasePanel.revalidate();
                    purchasePanel.repaint();
                }
            }
        });
        initializePanelListner(purchaseProducts[productCount]);
        purchasePanel.add(purchaseProducts[productCount]);
    }

    private void addRow(int tempProductCount) {
        productCount = tempProductCount;
        addRow();
        /*
         purchaseProducts[productCount]=new PakPurchaseFieldPanel1();
         purchaseProducts[productCount].setName(productCount+"");
         purchaseProducts[productCount].setSeqNoText(productCount+"");
         purchaseProducts[productCount].getjLabel2().addMouseListener(new MouseAdapter(){
         public void mouseClicked(MouseEvent e) {
         JLabel label = (JLabel)e.getSource();
         removeRow(Integer.parseInt(label.getParent().getName()));
         deletePurchaseProduct(invNo.getText(),label.getParent().getName());
         }
         });
         initializePanelListner(purchaseProducts[productCount]);
         purchasePanel.add(purchaseProducts[productCount]);
         */
    }/*
     private void addNextRow() {
        
     PAK_DB data =new PAK_DB();
     
     try {
     
                
     System.out.println("productCount <Before>"+productCount);
     int max=data.find_max_in_purchase_products(connAA, invNo.getText());
     int pCount=productCount;
     System.out.println("max -> "+max+" : pCount->"+pCount);
     int index=0;
     if(max > pCount){
     productCount=max;
     }else{
     productCount=pCount;
     }
     index++;
     productCount++;
     System.out.println("productCount <After>"+productCount);
     purchaseProducts[productCount]=new PakPurchaseFieldPanel1();
     purchaseProducts[productCount].setName(productCount+"");
     purchaseProducts[productCount].setSeqNoText(productCount+"");
     purchaseProducts[productCount].getjLabel2().addMouseListener(new MouseAdapter(){
     public void mouseClicked(MouseEvent e) {
     JLabel label = (JLabel)e.getSource();
     removeRow(Integer.parseInt(label.getParent().getName()));
     deletePurchaseProduct(invNo.getText(),label.getParent().getName());
     }
     });
     initializePanelListner(purchaseProducts[productCount]);
     purchasePanel.add(purchaseProducts[productCount]);
                
     //                productCount=data.find_count_in_purchase_products(connAA, invNo.getText());
            
     
     } catch (SQLException ex) {
     Logger.getLogger(PURCHASE.class.getName()).log(Level.SEVERE, null, ex);
     }
     }
     */
    
    private void perkd(KeyEvent e) {
        if(e.getSource() instanceof JTextField){
            JTextField j = (JTextField) e.getSource();
            boolean b=false;
            for (int i = Integer.parseInt(j.getParent().getName()); i < (Integer.parseInt(j.getParent().getName())+10); i++) {
                if(purchaseProducts[i+1]!=null&&purchaseProducts[i+1].isDisplayable())
                {
                    JTextField j1= (JTextField) purchaseProducts[i+1].getComponent(gci(j));
                    j1.requestFocus();j1.selectAll();b=false;break;
                }else{b=true;}
            }
            if(b&&j.isEditable()){
                    /*JOptionPane.showMessageDialog(j, "Info","InfoBox: ", JOptionPane.INFORMATION_MESSAGE);*/addRow();purchaseProducts[productCount].getSeek().requestFocus();
            }
        }
    }
    private void perkdf(KeyEvent e) {
        if(e.getSource() instanceof JTextField){
            JTextField j = (JTextField) e.getSource();
            boolean b=false;
            for (int i = Integer.parseInt(j.getParent().getName()); i < (Integer.parseInt(j.getParent().getName())+10); i++) {
                if(purchaseProducts[i+1]!=null&&purchaseProducts[i+1].isDisplayable())
                {
                    JTextField j1= (JTextField) purchaseProducts[i+1].getComponent(2);
                    j1.requestFocus();j1.selectAll();b=false;break;
                }else{b=true;}
            }
            if(b&&purchaseProducts[productCount].getSeek().isEditable()){
                    /*JOptionPane.showMessageDialog(j, "Info","InfoBox: ", JOptionPane.INFORMATION_MESSAGE);*/
                addRow();purchaseProducts[productCount].getSeek().requestFocus();
            }
        }
    }
   private void perke(KeyEvent e) {
        if(e.getSource() instanceof JTextField){
            JTextField j = (JTextField) e.getSource();
            if(gci(j)!=19){
                JTextField j1=(JTextField) j.getParent().getComponent(gci(j)+1); j1.requestFocus();j1.selectAll();
            }else{
                perkdf(e);
            }
        }
    }
    public static final int gci(Component component) {
        if (component != null && component.getParent() != null) {
          Container c = component.getParent();for (int i = 0; i < c.getComponentCount(); i++) {if (c.getComponent(i) == component)return i;}
        }return -1;
    }
   private void perku(KeyEvent e) {
        if(e.getSource() instanceof JTextField){
            JTextField j = (JTextField) e.getSource();
            for (int i = Integer.parseInt(j.getParent().getName()); (i > (Integer.parseInt(j.getParent().getName())-10)&&i>0); i--) {
                if(purchaseProducts[i-1]!=null&&purchaseProducts[i-1].isDisplayable())
                {
                    JTextField j1= (JTextField) purchaseProducts[i-1].getComponent(gci(j));
                    j1.requestFocus();
                    j1.selectAll();
                    break;
                }
            }
        }
    }

    private void deletePurchaseProduct(String s, String s1, String s2, String s3, String s4) {
        PAK_DB data = new PAK_DB();
        
        try {
            
            String rs[] = data.get_pQty_saleQty( connAA, s,s4);
            
            if(data.check_product_line_item_presence_new(connAA,s,s4,productCount)){
                /*
                
                String a = s3;
                String b = s2;
                String b1 = s;
                String c = data.get_clqty_wrt_pmast_code(connAA, rs[0]);
                BigDecimal d = new BigDecimal("0.0");
                if (c != null) {
                    d = new BigDecimal(Float.parseFloat(c)).subtract(new BigDecimal(Float.parseFloat(rs[1])).add(new BigDecimal(Float.parseFloat(rs[2])).add(new BigDecimal(Float.parseFloat(rs[3])))));
                }
                System.out.println("Seek" + s1);
                System.out.println("Code" + b1);
                System.out.println("CLQTY" + d);
                System.out.println("TQTY" + b);
                System.out.println("CLQTY" + c);
                boolean bool = data.update_clqty_in_pmast(connAA, d + "", rs[0]);
                */
                data.delete_purchase_product(connAA, s, s1);
            }

            
        } catch (Exception ex) {
            Logger.getLogger(CUSTREC.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void removeRow(int productIndex) {
        System.out.println("purchaseProducts[" + productIndex + "] : " + purchaseProducts[productIndex].getName());
        purchasePanel.remove(purchaseProducts[productIndex]);
        purchasePanel.revalidate();
        purchasePanel.repaint();
    }

    private void forBackBtnEnable(boolean b) {
        btnFirst.setEnabled(b);
        btnLast.setEnabled(b);
        btnPrior.setEnabled(b);
        btnNext.setEnabled(b);
    }

    private void recEditBtnEnable(boolean b) {
        btnAdd.setEnabled(b);
        btnDel.setEnabled(b);
        btnSearch.setEnabled(b);
        btnView.setEnabled(b);
        btnEdit.setEnabled(b);
    }

    private void saveUpdateBtnVisible(String s, boolean visibleProperty) {
        switch (s.toLowerCase()) {
            case "save":
                btnSave.setVisible(visibleProperty);
                break;
            case "update":
                btnUpdate.setVisible(visibleProperty);
                break;
            case "search":
                btnSearchNow.setVisible(visibleProperty);
                break;
            case "all":
                btnSearchNow.setVisible(visibleProperty);
                btnSave.setVisible(visibleProperty);
                btnUpdate.setVisible(visibleProperty);
                break;
        }
        btnCancel.setVisible(visibleProperty);
        btnAddRow.setVisible(visibleProperty);

    }

    private void textFieldsNotEditable(boolean b) {
        invNo.setEditable(b);
        avediscper.setEditable(b);
        remaining.setEditable(b);
        discount.setEditable(b);
        grossAmt.setEditable(b);
        taxPer.setEditable(b);
        taxRs.setEditable(b);
        netAmt.setEditable(b);
        netpayable.setEditable(b);
        linvNo.setEditable(b);
        
    }

    private void textFieldsPInvoiceEditable(boolean b) {
        oDate.setEnabled(b);
        refNo.setEditable(b);
        suppCode.setEditable(b);
        suppName.setEnabled(b);
        remarks.setEnabled(b);
        splPer.setEditable(b);
        fmrsum.setEditable(b);
        fmrsumrs.setEditable(b);
        tdosum.setEditable(b);
        splRs.setEditable(b);
        otherExp.setEditable(b);
        paid.setEditable(b);
        dcode.setEditable(b);
        dName.setEnabled(b);
        splFmrPer.setEditable(b);
        splFmrRs.setEditable(b);
        textFieldsNotEditable(false);
        editableProductPanel(b);
    }

    private void setNullTextFields() {
        invNo.setText("");
        oDate.setDate(null);
        refNo.setText("");
        suppCode.setText("");
        try {
            buildOneComboBoxModel("", "supp");//suppName.setText("");
        } catch (Exception ex) {
            Logger.getLogger(PURCHASE.class.getName()).log(Level.SEVERE, null, ex);
        }
        remarks.setText("No Remarks");
        avediscper.setText("0.00");
        remaining.setText("0.00");
        discount.setText("0.00");
        grossAmt.setText("0.00");
        taxPer.setText("0.00");
        taxRs.setText("0.00");
        netAmt.setText("0.00");
        splFmrPer.setText("0.00");
        splFmrRs.setText("0.00");
        fmrsum.setText("00.0");
        fmrsumrs.setText("00.0");
        tdosum.setText("00.0");
        splRs.setText("0.00");
        otherExp.setText("0.00");
        paid.setText("0.00");
        netpayable.setText("0.00");
        dcode.setText("");
        try {
            buildOneComboBoxModel("", "sm");//suppName.setText("");
        } catch (Exception ex) {
            Logger.getLogger(PURCHASE.class.getName()).log(Level.SEVERE, null, ex);
        }
        inetializePrductPanel();
    }

    private void updateComboBox(JTextField textField, JComboBox comboBox, String c) throws Exception {
        comboBox.setModel(buildOneComboBoxModel(textField.getText(), c));
    }

    public static DefaultComboBoxModel buildAllComboBoxModel(String c,Connection cc) throws Exception {
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        PAK_DB data = new PAK_DB();
        
        ArrayList<String> elements = new <String> ArrayList();
        try {
            
            boolean tf = false;
            switch (c) {
                case "sm":
                    elements = data.find_all_sm_name_by_code(cc);
                    break;
                case "supp":
                    elements = data.find_all_supp_name_by_code(cc);
                    break;
            }
            if (elements != null) {
                for (String s : elements) {
                    comboBoxModel.addElement(s);
                }
            } else {
                JFrame j = new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Not Edited", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
            }
            //System.out.println("Is Inserted :"+ tf);
            
        } catch (Exception ex) {
            Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
        }
        return comboBoxModel;
    }

    public ArrayList<String> find_all_sm_name_by_code(Connection conn) throws SQLException, SQLException {
        java.sql.Statement statement = conn.createStatement();

        ArrayList<String> cat = new ArrayList();

        String Sql = "Select * from PAK.EMPREC ORDER BY lower(NAME) ASC";
        ResultSet resultset = statement.executeQuery(Sql);
        int i = 0;
        while (resultset.next()) {
            cat.add(i, resultset.getString("NAME"));
            //System.out.println("NAME: " + resultset.getString("NAME").toString());
            i++;
            //returned=null;
        }
        return cat;
    }

    public DefaultComboBoxModel buildOneComboBoxModel(String name, String c) throws Exception {
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        PAK_DB data = new PAK_DB();
        
        String s = "*** NOT SELECTED ***";
        try {
            
            switch (c) {
                case "sm":
                    if (!name.equals("")) {
                        s = data.find_sm_name_by_code(connAA, name);

                    } else {
                        comboBoxModel.addElement(name);
//                JFrame j=new JFrame();
//                    j.setAlwaysOnTop(true);
//                    JOptionPane.showMessageDialog(j, "Emter Id Found");
                    }
                    break;
                case "supp":
                    if (!name.equals("")) {
                        s = data.find_supp_name_by_code(connAA, name);
                    } else {
                        comboBoxModel.addElement(name);
                        //                JFrame j=new JFrame();
//                    j.setAlwaysOnTop(true);
//                    JOptionPane.showMessageDialog(j, "Emter Id Found");
                    }
                    break;
            }
            comboBoxModel.addElement(s);
            
        } catch (Exception ex) {
            Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
        }
        return comboBoxModel;
    }

    private String getCode(String name, String c) {
        String s = "";
        PAK_DB data = new PAK_DB();
        
        try {
            

            switch (c) {
                case "sm":
                    if (!name.equals("")) {
                        s = data.find_sm_code_by_name(connAA, name);
                    } else {
                        //                JFrame j=new JFrame();
//                    j.setAlwaysOnTop(true);
//                    JOptionPane.showMessageDialog(j, "Emter Id Found");
                    }
                    break;
                case "supp":
                    if (!name.equals("")) {
                        s = data.find_supp_code_by_name(connAA, name);
                    } else {
                        //                JFrame j=new JFrame();
//                    j.setAlwaysOnTop(true);
//                    JOptionPane.showMessageDialog(j, "Emter Id Found");
                    }
                    break;
            }
            
        } catch (Exception ex) {
            Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
        }
        return s;
    }

    private void setFirstRec() throws ParseException {
        PAK_DB data = new PAK_DB();
        
        try {
            
            ArrayList<String> stock = data.get_first_purchase(connAA);
            if (stock == null) {
                setNullTextFields();
                JFrame j = new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "No data Found", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
            } else {
                setTextinPurchase(stock, dateField);
//                add.setText(stock.get(2));//from join 
//                cont.setText(stock.get(2));
            }
            
        } catch (Exception ex) {
            Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setTextinPurchase(ArrayList<String> stock, Conversions dateField) {
        try {
            oDate.setDate(dateField.toDate(stock.get(0)));
            invNo.setText(stock.get(1));
            loadProductsPanel(invNo.getText());
            refNo.setText(stock.get(2));
            suppCode.setText(stock.get(3));
            try {
                suppName.setModel(buildOneComboBoxModel(suppCode.getText(), "supp"));
            } catch (Exception ex) {
                Logger.getLogger(PURCHASE.class.getName()).log(Level.SEVERE, null, ex);
            }
            grossAmt.setText(stock.get(4));
            fmrsumrs.setText(stock.get(5));
            splRs.setText(stock.get(6));
            frmSplPer();
            otherExp.setText(stock.get(7));
            avediscper.setText(stock.get(8));
            discount.setText(stock.get(9));
            taxPer.setText(stock.get(10));
            taxRs.setText(stock.get(11));
            netAmt.setText(stock.get(12));
            remaining.setText(stock.get(13));
            paid.setText(stock.get(14));
            remarks.setText(stock.get(15));
            netpayable.setText(stock.get(16));
//            dcode.setText(stock.get(17));
            splFmrPer.setText(stock.get(18));
            frmSplFmrRs();
            try {
                dName.setModel(buildOneComboBoxModel(dcode.getText(), "sm"));
            } catch (Exception ex) {
                Logger.getLogger(PURCHASE.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (ParseException ex) {
            Logger.getLogger(PURCHASE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void recEditActionBtnVisible(boolean b) {
        btnSave.setVisible(b);
        btnUpdate.setVisible(b);
        btnSearchNow.setVisible(b);
        btnCancel.setVisible(b);
    }

    private void styleComboBox(JComboBox combo) {
        combo.setRenderer(new DefaultListCellRenderer() {
            public void paint(Graphics g) {
                super.paint(g);
            }
        });
    }

    private void setLastRec() throws ParseException {
        PAK_DB data = new PAK_DB();
        
        try {
            
            ArrayList<String> stock = data.get_last_purchase(connAA);
            if (stock == null) {
                JFrame j = new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Welcome Enter First Record", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
                btnAdd.doClick();
                btnCancel.setVisible(false);
                editableProductPanel(true);
            } else {
                setTextinPurchase(stock, dateField);
                editableProductPanel(false);
            }
            
        } catch (Exception ex) {
            Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setLastInvoice() {
        PAK_DB data = new PAK_DB();
        
        try {
            
            int max = data.find_max_in_purchase_code(connAA);
            if (max == 0) {
                linvNo.setText(null);
            } else {
                linvNo.setText(max + "");
            }
            
        } catch (Exception ex) {
            Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void inetializePrductPanel() {
        editableProductPanel(true);
        purchasePanel.removeAll();
        purchasePanel.revalidate();
        purchasePanel.repaint();
        productCount = 0;
        purchasePanel.add(purchaseHeaderPanel);
        addRow();
    }

    private void editableProductPanel(boolean b) {
        for (int i = 1; i <= productCount; i++) {
            if (purchaseProducts[i] != null) {
                purchaseProducts[i].textFieldsEditableProducts(b);
            }

        }
    }

    private void loadProductsPanel(String text) {
        
        inetializePrductPanel();
        PAK_DB data = new PAK_DB();
        
        try {
            
            ArrayList<String> name[] = data.search_products(connAA, text);
            removeRow(productCount);
            productCount--;
            int lastSeqNo = 0;
            for (int i = 0; i < name.length; i++) {
                addRow(Integer.parseInt(name[i].get(1)) - 1);
                for (int j = 0; j < 16; j++) {
                    switch (j) {
                        case 0:
                            // Invoice No. is to just match with PERMAIN
                            break;
                        case 1:
                            purchaseProducts[productCount].setSeqNoText(name[i].get(j));
                            lastSeqNo = Integer.parseInt(name[i].get(j));
                            break;
                        case 2:
                            purchaseProducts[productCount].setSeek(name[i].get(j));
                            String temp = purchaseProducts[productCount].getSeekText();
                            purchaseProducts[productCount].setpName(temp);
                            break;
                        case 3:
                            purchaseProducts[productCount].setTotalQty(name[i].get(j));
                            purchaseProducts[productCount].frmCtn(purchaseProducts[productCount].getNoOfPcsInCtn());
                            purchaseProducts[productCount].frmPcs(purchaseProducts[productCount].getNoOfPcsInCtn());  
                            break;
                        case 4:
                            purchaseProducts[productCount].setRate(name[i].get(j));
                            break;
                        case 5:
                            purchaseProducts[productCount].setGrossAmt(name[i].get(j));
                            break;
                        case 6:
                            purchaseProducts[productCount].getTdo().setText(name[i].get(j));
                            break;
                        case 7:
                            purchaseProducts[productCount].setDiscPer(name[i].get(j));
                            purchaseProducts[productCount].frmDiscRs();
                            break;
                        case 8:
                            purchaseProducts[productCount].getFmr().setText(name[i].get(j));
                            purchaseProducts[productCount].frmFmrRs();
                            break;
                        case 9:
                            purchaseProducts[productCount].setTaxPer(name[i].get(j));
                            purchaseProducts[productCount].frmTaxRs();
                            break;
                        case 10:
                            purchaseProducts[productCount].setNetAmt(name[i].get(j));
                            break;
                        case 11:
//                            purchaseProducts[productCount].setNetAmt(name[i].get(j));
                            break;
                        case 12:
                            purchaseProducts[productCount].getDamage().setText(name[i].get(j));
                            break;
                        case 13:
                            purchaseProducts[productCount].getFree().setText(name[i].get(j));
                            break;
                        case 14:
                            purchaseProducts[productCount].getCustom().setText(name[i].get(j));
                            break;
                        case 15:
                            purchaseProducts[productCount].getExpDate().setDate(dateField.toDate(name[i].get(j)));
                            break;
                    }
                }
                System.out.println("");
            }
            updateSumSplPanel();
            productCount = lastSeqNo;
            
        } catch (Exception ex) {
            Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
        }
        editableProductPanel(false);
    }

    private void updateSumSplPanel() {
        String sumGrossAmt="";
        String sumTaxRs="";
        String sumDiscRs="";
        String sumNetAmt="";
        String sumfmrRs="";
        String sumtdo="";
        
        Float sumGrossAmt1=0.0f;
        Float sumTaxRs1=0.0f;
        Float sumDiscRs1=0.0f;
        Float sumNetAmt1=0.0f;
        Float sumfmr1=0.0f;
        Float sumtdo1=0.0f;
        
        BigDecimal sumGrossAmt2= new BigDecimal(0.0);
        BigDecimal sumTaxRs2=new BigDecimal(sumTaxRs1+"");
        BigDecimal sumDiscRs2=new BigDecimal(sumGrossAmt1+"");
        BigDecimal sumNetAmt2=new BigDecimal(sumNetAmt1+"");
        BigDecimal sumfmr2rs=new BigDecimal(sumfmr1+"");
        BigDecimal sumtdo2=new BigDecimal(sumtdo1+"");
        
        for(int i=1;i<=productCount;i++){
            //System.out.println("-> "+i+" : productCount->"+productCount);
            if(purchaseProducts[i]!=null&&purchaseProducts[i].isDisplayable() ){
//                System.out.println("GrossAmt:"+purchaseProducts[i].getGrossAmtText());
//                System.out.print(" TaxRs:"+purchaseProducts[i].getTaxRsText());
//                System.out.print(" DiscRs:"+purchaseProducts[i].getDiscRsText());
//                System.out.print(" NetAmt:"+purchaseProducts[i].getNetAmtText());
                
                //sumGrossAmt1=sumGrossAmt1+Float.parseFloat(purchaseProducts[i].getGrossAmtText());
                sumGrossAmt2=sumGrossAmt2.add(BigDecimal.valueOf(Float.parseFloat(purchaseProducts[i].getGrossAmtText())));
                //sumTaxRs1=sumTaxRs1+Float.parseFloat(purchaseProducts[i].getTaxRsText());
                sumTaxRs2=sumTaxRs2.add(BigDecimal.valueOf(Float.parseFloat(purchaseProducts[i].getTaxRsText())));

                sumfmr2rs=sumfmr2rs.add(BigDecimal.valueOf(Float.parseFloat(purchaseProducts[i].getFmrrs().getText())));
                //sumDiscRs1=sumDiscRs1+Float.parseFloat(purchaseProducts[i].getDiscRsText());
                sumDiscRs2=sumDiscRs2.add(BigDecimal.valueOf(Float.parseFloat(purchaseProducts[i].getDiscRsText())));
                //sumNetAmt1=sumNetAmt1+Float.parseFloat(purchaseProducts[i].getNetAmtText());
//                sumNetAmt2=(sumNetAmt2.add(BigDecimal.valueOf(Float.parseFloat(purchaseProducts[i].getNetAmtText())))).subtract(new BigDecimal(-Float.parseFloat(purchaseProducts[i].getFmr().getText()));
                sumNetAmt2=sumNetAmt2.add(BigDecimal.valueOf(Float.parseFloat(purchaseProducts[i].getNetAmtText())));
                
//                float gAmount = Float.parseFloat(purchaseProducts[i].getGrossAmt().getText());
//                float fmr = Float.parseFloat(purchaseProducts[i].getFmr().getText());
//                sumfmr2rs=sumfmr2rs.add(BigDecimal.valueOf((gAmount*fmr)/100));
                
                sumtdo2=sumtdo2.add(BigDecimal.valueOf(Float.parseFloat(purchaseProducts[i].getTdo().getText())));
                
                sumTaxRs1=sumTaxRs1+Float.parseFloat(purchaseProducts[i].getTaxRsText());
            }
        }
        System.out.println("sumfmr2rs    ======== "+sumfmr2rs);
        
        System.out.print("Sum is "+sumGrossAmt1);
        sumGrossAmt=round(sumGrossAmt2,3)+"";
        sumTaxRs=round(sumTaxRs2,3)+"";
        sumDiscRs=round(sumDiscRs2,3)+"";
        sumNetAmt=round(sumNetAmt2,3)+"";
        sumfmrRs=round(sumfmr2rs,3)+"";
        sumtdo=round(sumtdo2,3)+"";
        
        try{
           netAmt.setText(sumNetAmt);
           
           fmrsumrs.setText(sumfmrRs);
           
           tdosum.setText(sumtdo);
           
           grossAmt.setText(sumGrossAmt);
           
           taxRs.setText(sumTaxRs);
           
           discount.setText(sumDiscRs);
           
           BigDecimal temp = sumTaxRs2.multiply(BigDecimal.valueOf(Float.parseFloat("100.0")));
           BigDecimal result=new BigDecimal("0.0");
           if(!(sumGrossAmt2.compareTo(BigDecimal.ZERO) == 0)){
               result = temp.divide(sumGrossAmt2,3,BigDecimal.ROUND_HALF_UP);
           }
           taxPer.setText(round((result),3)+"");
           /*
                float gAmount = Float.parseFloat(purchaseProducts[i].getGrossAmt().getText());
                float fmr = Float.parseFloat(purchaseProducts[i].getFmr().getText());
                sumfmr2rs=sumfmr2rs.add(BigDecimal.valueOf((gAmount*fmr)/100));
           */
           BigDecimal temp3 = sumfmr2rs.multiply(BigDecimal.valueOf(Float.parseFloat("100.0")));
           BigDecimal result2=new BigDecimal("0.0");
           if(!(sumGrossAmt2.compareTo(BigDecimal.ZERO) == 0)){
               result2 = temp3.divide(sumGrossAmt2,3,BigDecimal.ROUND_HALF_UP);
           }
           fmrsum.setText(round((result2),3)+"");
           
//           fmrsumrs.setText(round((sumfmr2rs),3)+"");
           
           
//           avediscper.setText(round((Float.parseFloat(sumDiscRs)*100/Float.parseFloat(sumGrossAmt)),3)+"");
           BigDecimal temp1 = sumDiscRs2.multiply(BigDecimal.valueOf(Float.parseFloat("100.0")));
           BigDecimal result1=new BigDecimal("0.0");
           if(!(sumGrossAmt2.compareTo(BigDecimal.ZERO) == 0)){
                result1 = temp1.divide(sumGrossAmt2,3,BigDecimal.ROUND_HALF_UP);
            }
           avediscper.setText(round((result1),3)+"");
    
//           frmSplRs();
           frmSplFmrRs();
           frmNetPayable();
           frmRemaning();
        }catch(NumberFormatException ex){
            if(ex.getMessage()!=null ){//&& !ex.getMessage().equals("")
                if(ex.getMessage().matches("empty String")){
                }else{
                    JFrame j=new JFrame();
                    j.setAlwaysOnTop(true);
                    JOptionPane.showMessageDialog(j, "Invalid Input", "InfoBox: ", JOptionPane.ERROR_MESSAGE);
        //                //System.out.println("Number Format is InCorrect: "+ex.getMessage());
                }
            }
        }
    }

    private void frmSplPer() {
        try{
            BigDecimal netAmtBD = BigDecimal.valueOf(Float.parseFloat(netAmt.getText()));
            if (netAmtBD.compareTo(new BigDecimal("0"))==0) {
                splPer.setText(new BigDecimal("0")+"");
            }else{
                BigDecimal result1 = ((BigDecimal.valueOf(Float.parseFloat(splRs.getText()))).multiply(new BigDecimal("100.0"))).divide(netAmtBD,3,BigDecimal.ROUND_HALF_UP);
                splPer.setText(round((result1),3)+"");
            }
        }catch(NumberFormatException ex){
            if(ex.getMessage().matches("empty String")){
            }else{
                JFrame j=new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Invalid Input", "InfoBox: ", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void frmSplRs() {
        try {
            //splRs.setText(round((Float.parseFloat(splPer.getText()) * Float.parseFloat(netAmt.getText()) / 100), 3) + "");
            splRs.setText(round(( ((BigDecimal.valueOf(Float.parseFloat(splPer.getText()))).multiply(BigDecimal.valueOf(Float.parseFloat(netAmt.getText())))).divide(new BigDecimal("100.0"),3,BigDecimal.ROUND_HALF_UP)),3)+"");
        } catch (NumberFormatException ex) {
            if (ex.getMessage().matches("empty String")) {
//                System.out.println("Do Nothing: "+ex);
            } else {
                JFrame j = new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Invalid Input", "InfoBox: ", JOptionPane.ERROR_MESSAGE);

//                System.out.println("Number Format is InCorrect: "+ex.getMessage());
            }
        }
    }
    private void frmSplFmrRs() {
         try{
//            splRs.setText(round((Float.parseFloat(splPer.getText())*Float.parseFloat(netAmt.getText())/100),3)+"");
            BigDecimal result1 = (BigDecimal.valueOf(Float.parseFloat(splFmrPer.getText()))).multiply(BigDecimal.valueOf(Float.parseFloat(netAmt.getText()))).divide(BigDecimal.valueOf(Float.parseFloat("100.0")),3,BigDecimal.ROUND_HALF_UP);
            splFmrRs.setText(round((result1),3)+"");
        }catch(NumberFormatException ex){
           
        }
    }
    private void frmSplFmrPer() {
        try{
            splFmrPer.setText(round((((BigDecimal.valueOf(Float.parseFloat(splFmrRs.getText()))).multiply(new BigDecimal("100.0"))).divide((BigDecimal.valueOf(Float.parseFloat(netAmt.getText()))),3,BigDecimal.ROUND_HALF_UP)),3)+"");
        }catch(NumberFormatException ex){
            if(ex.getMessage().matches("empty String")){
//                //System.out.println("Do Nothing: "+ex);
            }else{
                JFrame j=new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Invalid Input", "InfoBox: ", JOptionPane.ERROR_MESSAGE);
                
//                //System.out.println("Number Format is InCorrect: "+ex.getMessage());
            }
        }
    }
    private void frmNetPayable() {
        try {
            //netpayable.setText(round((Float.parseFloat(netAmt.getText()) - Float.parseFloat(splRs.getText())) + Float.parseFloat(otherExp.getText()), 3) + "");
            netpayable.setText(round((((BigDecimal.valueOf(Float.parseFloat(netAmt.getText()))).subtract(BigDecimal.valueOf(Float.parseFloat(splRs.getText()))).add(BigDecimal.valueOf(Float.parseFloat(otherExp.getText())))).subtract(BigDecimal.valueOf(Float.parseFloat(splFmrRs.getText())))),3)+"");
        } catch (NumberFormatException ex) {
            if (ex.getMessage().matches("empty String")) {
//                System.out.println("Do Nothing: "+ex);
            } else {
                JFrame j = new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Invalid Input", "InfoBox: ", JOptionPane.ERROR_MESSAGE);
//                System.out.println("Number Format is InCorrect: "+ex.getMessage());
            }
        }
    }

    private void frmRemaning() {
        try {
//            remaining.setText(round((Float.parseFloat(netpayable.getText()) - Float.parseFloat(paid.getText())), 3) + "");
            remaining.setText(round(((BigDecimal.valueOf(Float.parseFloat(netpayable.getText()))).subtract(BigDecimal.valueOf(Float.parseFloat(paid.getText())))),3)+"");
        } catch (NumberFormatException ex) {
            if (ex.getMessage().matches("empty String")) {
            } else {
                JFrame j = new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Invalid Input", "InfoBox: ", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void findRecords(String text) {
        PAK_DB data = new PAK_DB();
        
        try {
            
            ArrayList<String> s = data.find_purchase_by_code(connAA, text);
            if (s != null) {
                saveUpdateBtnVisible("all", false);
                setTextinPurchase(s, dateField);
                textFieldsPInvoiceEditable(false);
                forBackBtnEnable(true);
                recEditBtnEnable(true);
                recEditActionBtnVisible(false);
            } else {
                JFrame j = new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Not Found", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
            }
            System.out.println("Asset Found is :" + s);
            
        } catch (Exception ex) {
            Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private GraphicsEnvironment setEnvironment() {
        return getLocal();
    }

    private GraphicsEnvironment getLocal() {
        return GraphicsEnvironment.getLocalGraphicsEnvironment();
    }

    private void boundsSize() {
        this.setMaximizedBounds(setEnvironment().getMaximumWindowBounds());
    }

    private void extend() {
        this.setExtendedState(this.getExtendedState() | this.MAXIMIZED_BOTH);
    }

    private void maximize() {
        boundsSize();
        extend();
    }


    private void updateTableView(String c[],String s) {
        String r[][]=null;//searchLike(searchField.getText());
/*DOCNO,SALEQTY,SALERATE,DISCPER,TOTALSIZE,RETURNQTY,
        */
        PAK_DB data =new PAK_DB();
        
        try {
            
            boolean tf=false;
            r=data.search_history(connAA, s,suppCode.getText());
            System.out.println("Is Inserted :"+ tf);
            
        } catch (Exception ex) {
            Logger.getLogger(PURCHASE.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(r==null){
            JOptionPane.showMessageDialog(null, "No Row Found", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
        }else{
            initTable(c,r);   
        }
    }
    private void initTable(String colNames[],String rowData[][]) {
        String col[] = colNames;//{"File","Path"};
        String row[][] =rowData;
        model = new DefaultTableModel(row,col);

        custHistory=new JTable(model){
            private static final long serialVersionUID = 1L;

            public boolean isCellEditable(int row, int column) {                
                    return false;               
            };
        };
        custHistory.getAutoscrolls();
//        custHistory.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        custHistory.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
//        custHistory.setBackground(Color.WHITE);
        custHistory.setRowHeight(30);
//        custHistory.set
        JTableHeader header = custHistory.getTableHeader();
        
        header.setPreferredSize(new Dimension(100, 30));
        custHistory.setShowHorizontalLines(false);
        custHistory.setEnabled(true);
//        custHistory.setBackground(Color.darkGray);
//        custHistory.setForeground(Color.white);
        custHistory.enableInputMethods(false);
        custHistory.setShowVerticalLines(false);
        custHistory.setShowGrid(false);
        custHistory.setRowSelectionAllowed(true);
        
        selectionModel = custHistory.getSelectionModel();
        selectionModel.setSelectionInterval(0, 0);
        
        custHistory.getKeyListeners();
        custHistory.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent me) {
                JTable table =(JTable) me.getSource();
                Point p = me.getPoint();
                int row = table.rowAtPoint(p);
                if (me.getClickCount() == 2) {
                }
            }
        });
        custHistory.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "Enter");
        custHistory.getActionMap().put("Enter", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent ae) {
            }
        });
        custHistory.getColumnModel().getColumn(0).setPreferredWidth(120);
        custHistory.getColumnModel().getColumn(1).setPreferredWidth(120);
        jScrollPane3.setViewportView(custHistory);
    }
    private void khaliTable() {
        String colNames[]={"Inv No","Date","Qty","Rate","Disc %"};String rowData[][]={};initTable(colNames, rowData);
    }
    
    private void ffs() {
        for(int i=1;i<=productCount;i++){
            if(purchaseProducts[i].isDisplayable()){
                purchaseProducts[i].getSeek().requestFocus();
                purchaseProducts[i].getSeek().selectAll();
                break;
            }
        }

    }

}

