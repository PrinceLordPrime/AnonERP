/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DynamicERP.frames.satelment;

import DynamicERP.frames.instRtn.*;
import DB.PAK_DB;
import DB.PAK_GENERAL_DB;
import DynamicERP.dialoge.viewforms.dialogeClass;
import java.awt.Graphics;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import DynamicERP.frames.newdataentry.FIRMREC;
import static DynamicERP.frames.purchase.PakPurchaseFieldPanel1.round;
import DynamicERP.frames.relationalforms.CUSTREC;
import DynamicERP.frames.relationalforms.RECOVERY;
import static DynamicERP.frames.relationalforms.RECOVERY.buildAllComboBoxModel;
import DynamicERP.frames.sales.SALES;
import com.toedter.calendar.JDateChooser;
import java.awt.event.KeyEvent;
import javax.swing.Box;

/**
 *
 * @author Shan
 */
public class PakInstRtnFieldPanel extends javax.swing.JPanel {

    /**
     * Creates new form PakPurchaseFieldPanel
     */
    public PakInstRtnFieldPanel() {
        initComponents();
        styleComboBox(pName);
        textFieldsEditableProducts(true); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        seek = new javax.swing.JTextField();
        seqNo = new javax.swing.JTextField();
        pName = new javax.swing.JComboBox();
        totalQty = new javax.swing.JTextField();
        rate = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        netAmt = new javax.swing.JTextField();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        ctn = new javax.swing.JTextField();
        pcs = new javax.swing.JTextField();
        expDate = new com.toedter.calendar.JDateChooser();

        setMinimumSize(new java.awt.Dimension(720, 20));
        setPreferredSize(new java.awt.Dimension(720, 20));

        seek.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        seek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seekActionPerformed(evt);
            }
        });
        seek.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                seekKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                seekKeyReleased(evt);
            }
        });

        seqNo.setEditable(false);
        seqNo.setBackground(new java.awt.Color(255, 255, 204));
        seqNo.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        seqNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seqNoActionPerformed(evt);
            }
        });

        pName.setFont(new java.awt.Font("Calibri", 1, 11)); // NOI18N
        pName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Chocorama Van Rs 5 1 x 12 Box", "Item 3", "Item 4" }));
        pName.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                pNamePopupMenuWillBecomeVisible(evt);
            }
        });
        pName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pNameActionPerformed(evt);
            }
        });

        totalQty.setBackground(new java.awt.Color(255, 255, 204));
        totalQty.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        totalQty.setText("0");
        totalQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalQtyActionPerformed(evt);
            }
        });
        totalQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                totalQtyKeyReleased(evt);
            }
        });

        rate.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rate.setText("0");
        rate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rateActionPerformed(evt);
            }
        });
        rate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rateKeyReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oracledms/frames/resources/db_rem1.png"))); // NOI18N

        netAmt.setEditable(false);
        netAmt.setBackground(new java.awt.Color(255, 255, 204));
        netAmt.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        netAmt.setText("0.0");

        ctn.setBackground(new java.awt.Color(255, 255, 204));
        ctn.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        ctn.setText("0");
        ctn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ctnActionPerformed(evt);
            }
        });
        ctn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ctnKeyReleased(evt);
            }
        });

        pcs.setBackground(new java.awt.Color(255, 255, 204));
        pcs.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        pcs.setText("0");
        pcs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pcsActionPerformed(evt);
            }
        });
        pcs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pcsKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(seqNo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(seek, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(pName, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(ctn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(pcs, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(totalQty, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(rate, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(expDate, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(netAmt, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(seek, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(seqNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(pName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(ctn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(netAmt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(totalQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(rate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(pcs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(expDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    
    private void totalQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalQtyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalQtyActionPerformed

    private void rateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rateActionPerformed

    private void seekKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_seekKeyReleased
        try {updateComboBox(seek, pName);} catch (Exception ex) {Logger.getLogger(RECOVERY.class.getName()).log(Level.SEVERE, null, ex);}
        setAllFieldData();
    }//GEN-LAST:event_seekKeyReleased

    private void pNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pNameActionPerformed
        System.out.println("seek.getText():"+seek.getText()+" :<=|--|=>: getCode(getSubName()):"+getCode(getSubName()));
        if(seek.getText().equals(getCode(getSubName()))){
        }else{
            seek.setText(getCode(getSubName()));
            rate.setText(getRate(getSubName()));
        }
        setAllFieldData();
    }//GEN-LAST:event_pNameActionPerformed

    private void pNamePopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_pNamePopupMenuWillBecomeVisible
        PAK_DB data =new PAK_DB();
        Connection conn;
        try {
            conn = data.connect_database();        
            pName.setModel(buildAllComboBoxModel());
//            if(setSelectedComboItem(seek,pName,((!seek.getText().isEmpty())?data.find_supp_name_by_code(conn, seek.getText()):""))){
            if(setSelectedComboItem(seek,pName,((!seek.getText().isEmpty())?data.find_product_name_by_code(conn, seek.getText()):""))){
                
            }else{
                seek.setText(getCode(getSubName()));
                rate.setText(getRate(getSubName()));
                
                //===================================
//                frmGrossAmount();
                frmNetAmount();
            }
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(CUSTREC.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(CUSTREC.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_pNamePopupMenuWillBecomeVisible

    private void seqNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seqNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_seqNoActionPerformed

    private void totalQtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_totalQtyKeyReleased

        frmCtn(getNoOfPcsInCtn());
        frmPcs(getNoOfPcsInCtn());
//        frmTaxRs();
//        frmDiscRs();
        frmNetAmount();
    }//GEN-LAST:event_totalQtyKeyReleased

    private void rateKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rateKeyReleased
//        frmTaxRs();
//        frmDiscRs();
        frmNetAmount();
    }//GEN-LAST:event_rateKeyReleased
    public void frmCtn(String s) {
        if(Float.parseFloat(s)!=0&&!totalQty.getText().equals("")){
            float f = Float.parseFloat(totalQty.getText())/Float.parseFloat(s);int i = (int)f;ctn.setText(i+"");
            System.out.println("i"+i);
        }
    }
    public void frmPcs(String s) {
        if(Float.parseFloat(s)!=0&&!totalQty.getText().equals("")){float f = Float.parseFloat(totalQty.getText())%Float.parseFloat(s);int i=(int)f;pcs.setText(i+"");}
    }
    public String getNoOfPcsInCtn() {
        String s="0";
        PAK_GENERAL_DB data= new PAK_GENERAL_DB();
        Connection conn=null;
        try{
            conn=data.connect_database();
            if(!seek.getText().isEmpty()){s=data.getNoOfPcsInCtn(conn,seek.getText());}
            data.close_database(conn);
        }catch(SQLException ex){System.out.println("ex : "+ex);}
        return s;
    }
    private void seekKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_seekKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
    //            dialogeClass.createViewSalesWin();
                dialogeClass.createViewProductRecWin();
            } catch (SQLException ex) {
                Logger.getLogger(SALES.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(DynamicERP.dialoge.viewforms.ViewForm11.isSaved){
                seek.setText(dialogeClass.codeProductRec);
            }else{
            }
        }
        try {
            updateComboBox(seek, pName);
        } catch (Exception ex) {
            Logger.getLogger(RECOVERY.class.getName()).log(Level.SEVERE, null, ex);
        }
        setAllFieldData();
    }//GEN-LAST:event_seekKeyPressed

    private void seekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seekActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_seekActionPerformed

    private void ctnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ctnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ctnActionPerformed

    private void ctnKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ctnKeyReleased
        frmQty();
//        frmTaxRs();
//        frmDiscRs();
        frmNetAmount();
    }//GEN-LAST:event_ctnKeyReleased

    private void pcsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pcsActionPerformed
        
        try{
            BigDecimal totalQtyBD = BigDecimal.valueOf(Float.parseFloat(totalQty.getText()));
            BigDecimal rateBD = BigDecimal.valueOf(Float.parseFloat(rate.getText()));
            BigDecimal temp1 = totalQtyBD.multiply(rateBD);
//            damage.setText(round((temp1),3)+"");
        }catch(NumberFormatException ex){
        }
//        frmTaxRs();
//        frmDiscRs();
        frmNetAmount();
    }//GEN-LAST:event_pcsActionPerformed

    private void pcsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pcsKeyReleased
    frmQty();
//        frmTaxRs();
//        frmDiscRs();
        frmNetAmount();
    }//GEN-LAST:event_pcsKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ctn;
    private com.toedter.calendar.JDateChooser expDate;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField netAmt;
    private javax.swing.JComboBox pName;
    private javax.swing.JTextField pcs;
    private javax.swing.JTextField rate;
    private javax.swing.JTextField seek;
    private javax.swing.JTextField seqNo;
    private javax.swing.JTextField totalQty;
    // End of variables declaration//GEN-END:variables

    
    public JDateChooser getExpDate() {
        return expDate;
    }

    public void setExpDate(JDateChooser expDate) {
        this.expDate = expDate;
    }

   

    public JTextField getCtn() {
        return ctn;
    }

    public JTextField getPcs() {
        return pcs;
    }

    
    public Box.Filler getFiller1() {
        return filler1;
    }

    public void setFiller1(Box.Filler filler1) {
        this.filler1 = filler1;
    }

    public JTextField getSeqNo() {
        return seqNo;
    }

    public void setSeqNo(JTextField seqNo) {
        this.seqNo = seqNo;
    }


    public void setNetAmt(String netAmt) {
        this.netAmt.setText(netAmt);
    }

    public void setpName(String pName) {
        try {
                this.pName.setModel(buildOneComboBoxModel(pName));
            } catch (Exception ex) {
                Logger.getLogger(SALES.class.getName()).log(Level.SEVERE, null, ex);
            }
    }

    public void setRate(String rate) {
        this.rate.setText(rate);
    }

    public void setSeek(String seek) {
        this.seek.setText(seek);
    }

   
   
    public void setTotalQty(String totalQty) {
        this.totalQty.setText(totalQty);
    }

    public JTextField getNetAmt() {
        return netAmt;
    }
    public String getNetAmtText() {
        return netAmt.getText();
    }

    public JComboBox getpName() {
        return pName;
    }

    public JTextField getRate() {
        return rate;
    }
    public String getRateText() {
        return rate.getText();
    }

    public JTextField getSeek() {
        return seek;
    }
    public String getSeekText() {
        return seek.getText();
    }

   
    public JTextField getTotalQty() {
        return totalQty;
    }
    public String getTotalQtyText() {
        return totalQty.getText();
    }

    public void setjLabel2(JLabel jLabel2) {
        this.jLabel2 = jLabel2;
    }

    public JLabel getjLabel2() {
        return jLabel2;
    }

    public void setSeqNoTextField(JTextField seqNoTextField) {
        this.seqNo = seqNoTextField;
    }

    public JTextField getSeqNoTextField() {
        return seqNo;
    }
    public void setSeqNoText(String seqNoTextField) {
        this.seqNo.setText(seqNoTextField);
    }

    public String getSeqNoText() {
        return seqNo.getText();
    }
    public boolean setSelectedComboItem(JTextField textField,JComboBox comboBox, String value)
    {
        boolean tf=false;
        String item;
        if(value!=null){
            for (int i = 0; i < comboBox.getItemCount(); i++)
            {
                item = getSubName((String)comboBox.getItemAt(i));
                System.out.println("item:"+item);
                if (!item.isEmpty())
                {
                    if (item.equals(value))
                    {
                        comboBox.setSelectedIndex(i);
                        tf=true;
                        break;
                    }
                }else{
                    System.out.println(">== Message: Item is empty. . . ");
                    JFrame j=new JFrame();
                    j.setAlwaysOnTop(true);
                    JOptionPane.showMessageDialog(j, "First Add Items in : "+comboBox.getName(), "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
                }
            }   
        }else{
            System.out.println(">== Message: Value could not be  Selected . . . ");
            comboBox.setSelectedIndex(0);
        }
        return tf;
    }
    private void updateComboBox(JTextField textField,JComboBox comboBox) throws Exception {
        comboBox.setModel(buildOneComboBoxModel(textField.getText()));
    }
    public static DefaultComboBoxModel buildAllComboBoxModel() throws Exception {
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        PAK_DB data =new PAK_DB();
        Connection conn;
        ArrayList<String> elements = new <String> ArrayList() ;
        try {
            conn = data.connect_database();
            boolean tf=false;
            elements=data.find_all_product_name_size_by_code(conn);
            if(elements!=null){    
                for(String s : elements){
                    comboBoxModel.addElement(s);
                }
            }else{
                JFrame j=new JFrame();
                    j.setAlwaysOnTop(true);
                    JOptionPane.showMessageDialog(j, "Not Edited", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
            }
            System.out.println("Is Inserted :"+ tf);
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
        }
        return comboBoxModel;
    }
    public DefaultComboBoxModel buildOneComboBoxModel(String id) throws Exception {
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        PAK_DB data =new PAK_DB();
        Connection conn;
        String element="";
        try {
            conn = data.connect_database();
            ArrayList<String> temp;
            if(!id.equals("")){
                temp=data.find_product_rec_by_code(conn, id);
                String s1=null,s2 =null;
                if(temp!=null){
                    for(int i=0;i<temp.size();i++){
                        if(i==1||i==2){//||i==6||i==10){
                            if(i==2){
                                s1 = temp.get(i);
                            }else if(i==1){
                                s2 = temp.get(i);
                            }
                            System.out.println("i="+i+" : "+temp.get(i));
                        }else{
                        }
                        if(i==3){
                            rate.setText(temp.get(i));
                        }
                    }
                    element=s2+" | "+s1;
                    comboBoxModel.addElement(element);
                }else{
                    rate.setText("0.00");
                }
            }else{
                 rate.setText("0.00");
//                JFrame j=new JFrame();
//                j.setAlwaysOnTop(true);
//                J}OptionPane.showMessageDialog(j, "no Id Found");
            }
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
        }
        return comboBoxModel;
    }

    private String getCode(String name) {
        String s="";
        PAK_DB data =new PAK_DB();
        Connection conn;
        try {
            conn = data.connect_database();
            if(!name.equals("")){
                s=data.find_product_code_by_name(conn,name);
//                s=data.find_product_code_by_name(conn,name);
            }else{
//                JFrame j=new JFrame();
//                j.setAlwaysOnTop(true);
//                JOptionPane.showMessageDialog(j, "Emter Id Found");
            }       
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
        }
        return s;
    }

     private String getSubName() {
        String s=pName.getSelectedItem().toString().substring(0, pName.getSelectedItem().toString().indexOf("|")-1);        
        return s;
    }
    private String getSubName(String p) {
        String s=p.substring(0, p.indexOf("|")-1);  
        return s;
    }

    private String getRate(String name) {
        String s="";
        PAK_DB data =new PAK_DB();
        Connection conn;
        try {
            conn = data.connect_database();
            if(!name.equals("")){
                s=data.find_product_rate_by_name(conn,name);
            }else{
//                JFrame j=new JFrame();
//                j.setAlwaysOnTop(true);
//                JOptionPane.showMessageDialog(j, "Emter Id Found");
            }       
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
        }
        return s;
    }
    private String getWeight(String name) {
        String s="";
        PAK_DB data =new PAK_DB();
        Connection conn;
        try {
            conn = data.connect_database();
            if(!name.equals("")){
                s=data.find_product_weight_by_name(conn,name.trim());
            }else{
//                JFrame j=new JFrame();
//                j.setAlwaysOnTop(true);
//                JOptionPane.showMessageDialog(j, "Emter Id Found");
            }       
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
        }
        return s;
    }
    private void styleComboBox(JComboBox combo) {
        combo.setRenderer(new DefaultListCellRenderer() {
            public void paint(Graphics g) {
                super.paint(g);
            }
        });
    }
    public void textFieldsEditableProducts(boolean b) {
        seqNo.setEditable(false);
        seek.setEditable(b);
        ctn.setEditable(b);
        pcs.setEditable(b);
        totalQty.setEditable(b);
        pName.setEnabled(b);
        rate.setEditable(b);
        netAmt.setEditable(false);
        jLabel2.setEnabled(b);
        
    }

    private void frmNetAmount() {
        try{
//           netAmt.setText(round(((Float.parseFloat(grossAmt.getText())+Float.parseFloat(taxRs.getText()))-Float.parseFloat(discRs.getText())),3)+"");
            
            BigDecimal totalQtyBD = BigDecimal.valueOf(Float.parseFloat(totalQty.getText()));
            BigDecimal rateBD = BigDecimal.valueOf(Float.parseFloat(rate.getText()));
            BigDecimal temp1 = totalQtyBD.multiply(rateBD);
            BigDecimal result1 = temp1;
            netAmt.setText(round((result1),3)+"");
            
        }catch(NumberFormatException ex){
        }
    }

//    private void frmGrossAmount() {
    /*switch (pType.getSelectedItem()+"") 
        {
           case "SFT":*/
//               try{
//                    BigDecimal totalQtyBD = BigDecimal.valueOf(Float.parseFloat(totalQty.getText()));
//                    BigDecimal rateBD = BigDecimal.valueOf(Float.parseFloat(rate.getText()));
//                    BigDecimal temp1 = totalQtyBD.multiply(rateBD);
//                    damage.setText(round((temp1),3)+"");
//                }catch(NumberFormatException ex){
//                }
/*               break;
           case "RFT":
                try{
                    BigDecimal totalQtyBD = BigDecimal.valueOf(Float.parseFloat(totalSize.getText()));
                    BigDecimal rateBD = BigDecimal.valueOf(Float.parseFloat(rate.getText()));
                    BigDecimal temp1 = totalQtyBD.multiply(rateBD);grossAmt.setText(round((temp1),3)+"");
                }catch(NumberFormatException ex){
                    System.out.println(" ex "+ex);
                }
               break;
           case "PER PIECE":
                try{
                    BigDecimal totalQtyBD = BigDecimal.valueOf(Float.parseFloat(totalQty.getText()));
                    BigDecimal rateBD = BigDecimal.valueOf(Float.parseFloat(rate.getText()));
                    BigDecimal temp1 = totalQtyBD.multiply(rateBD);grossAmt.setText(round((temp1),3)+"");
                }catch(NumberFormatException ex){
                }
               break;
           case "CUSTOME":
               try{
                    BigDecimal totalQtyBD = BigDecimal.valueOf(Float.parseFloat(totalSize.getText()));
                    BigDecimal rateBD = BigDecimal.valueOf(Float.parseFloat(rate.getText()));
                    BigDecimal temp1 = totalQtyBD.multiply(rateBD);grossAmt.setText(round((temp1),3)+"");
                }catch(NumberFormatException ex){
                }
               break;
        }*/
//    }
/*
    public void frmDiscRs() {
        try{
           expiry.setText(round(((Float.parseFloat(damage.getText())*Float.parseFloat(dmgRate.getText()))/100),3)+"");
        }catch(NumberFormatException ex){
            if(ex.getMessage().matches("empty String")){
//                System.out.println("Do Nothing: "+ex);
                expiry.setText("0.00");
            }else{
                JFrame j=new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Invalid Input", "InfoBox: ", JOptionPane.ERROR_MESSAGE);
                
//                System.out.println("Number Format is InCorrect: "+ex.getMessage());
            }
        }
    }

    private void frmDiscPer() {
        try{
           dmgRate.setText(round(((Float.parseFloat(expiry.getText())*100)/Float.parseFloat(damage.getText())),3)+"");
        }catch(NumberFormatException ex){
            
        }

    }
*/
    /*
    public void frmTaxRs() {
        try{
           taxRs.setText(round(((Float.parseFloat(damage.getText()) * Float.parseFloat(expRate.getText())) / 100),3)+"");
        }catch(NumberFormatException ex){
            if(ex.getMessage().matches("empty String")){
//                System.out.println("Do Nothing: "+ex);
                taxRs.setText("0.00");
            }else{
                JFrame j=new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Invalid Input", "InfoBox: ", JOptionPane.ERROR_MESSAGE);
                
//                System.out.println("Number Format is InCorrect: "+ex.getMessage());
            }
        }
    }
    */
    /*
    private void frmTaxPer() {
        try{
           expRate.setText(round((Float.parseFloat(taxRs.getText())*100)/Float.parseFloat(damage.getText()),3)+"");
        }catch(NumberFormatException ex){
            if(ex.getMessage().matches("empty String")){
//                System.out.println("Do Nothing: "+ex);
                expRate.setText("0.00");
            }else{
                JFrame j=new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Invalid Input", "InfoBox: ", JOptionPane.ERROR_MESSAGE);
                
//                System.out.println("Number Format is InCorrect: "+ex.getMessage());
            }
        }
    }
    */
    /**
     * Round to certain number of decimals
     * 
     * @param d
     * @param decimalPlace
     * @return
     */
    public static float round(float d, int decimalPlace) {
        BigDecimal bd = new BigDecimal(Float.toString(d));
        bd = bd.setScale(decimalPlace, BigDecimal.ROUND_HALF_UP);
        return bd.floatValue();
    }
    public static BigDecimal round(BigDecimal d, int decimalPlace) {
        d = d.setScale(decimalPlace, BigDecimal.ROUND_HALF_UP);
        return d;
    }

    public void setAllFieldData() {
        if(totalQty.getText().isEmpty()){
            totalQty.setText("0");
        }
        if(rate.getText().isEmpty()){
            rate.setText("0");
        }
//        frmGrossAmount();
//        frmTaxRs();
//        frmDiscRs();
        frmNetAmount();
    }
    private void frmQty() {
        float f=(Float.parseFloat(ctn.getText())*Float.parseFloat(getNoOfPcsInCtn()))+Float.parseFloat(pcs.getText());
        totalQty.setText(f+"");        
    }
}
