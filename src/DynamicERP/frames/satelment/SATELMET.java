/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DynamicERP.frames.satelment;

import DynamicERP.frames.instRtn.*;
import DB.PAK_CUSTLEG_DB;
import DB.PAK_DB;
import DB.PAK_GLOBAL_DB;
import DB.PAK_RECOVERY_DB;
import DB.PAK_SATELMENT_DB;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GraphicsEnvironment;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.table.DefaultTableModel;
import logical.Conversions;
import newpackage.ButtonTextFieldCellTest;
import static DynamicERP.dialoge.viewforms.ViewFormId11.isSaved;
import DynamicERP.dialoge.viewforms.dialogeClass;
import java.util.HashMap;
import java.util.Map;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;
import static DynamicERP.frames.instRtn.PakInstRtnFieldPanel.round;
import DynamicERP.frames.purchase.PURCHASE;
import DynamicERP.frames.relationalforms.RECOVERY;
import DynamicERP.frames.sales.SALES;
import java.awt.Container;
import java.awt.Point;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.KeyStroke;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.table.JTableHeader;

/**
 *
 * @author Shan
 */
public class SATELMET extends 
        javax.swing.JFrame {
    Conversions dateField=new Conversions();

    /**
     * Creates new form PURCHASE
     */PAK_GLOBAL_DB dataAA =new PAK_GLOBAL_DB();
    Connection connAA;
    
    public SATELMET() {
        initComponents();
        styleComboBox(suppName);
        styleComboBox(dName);
        
        maximize();
        
            try {
                connAA = dataAA.connect_database();
            
            }catch (SQLException e) {
                System.out.println("Exception ===> "+e);
            }    
        panel.setBorder(BorderFactory.createTitledBorder("Sales Invoice Properties: "));
        purchaseScrollPane.setBorder(BorderFactory.createTitledBorder("Products Sales Adjustments in invoice: "));
        jpanspl.setBorder(BorderFactory.createTitledBorder("Invoice Details & SPL Adjustments: "));
        pan_hostory.setBorder(BorderFactory.createTitledBorder("Product History As per Clients: "));
        pan_print.setBorder(BorderFactory.createTitledBorder(""));
       
          saveUpdateBtnVisible("all", false);
        textFieldsEditable(false);
//      initTable();
//      initScrollPanel();
        initPanel();
        try {setLastRec();} catch (ParseException ex) {Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);}setLastInvoice();khaliTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        link9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        purchaseScrollPane = new javax.swing.JScrollPane();
        pan_hostory = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        custHistory = new javax.swing.JTable();
        histogram = new javax.swing.JCheckBox();
        linvNo = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jpanspl = new javax.swing.JPanel();
        netAmt = new javax.swing.JTextField();
        Builty8 = new javax.swing.JLabel();
        panel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        invNo = new javax.swing.JTextField();
        refNo = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        custCode = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        remarks = new javax.swing.JTextArea();
        suppName = new javax.swing.JComboBox();
        oDate = new com.toedter.calendar.JDateChooser();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnPrior = new javax.swing.JButton();
        btnFirst = new javax.swing.JButton();
        dName = new javax.swing.JComboBox();
        dcode = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        btnSearchNow = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnAddRow = new javax.swing.JButton();
        pan_print = new javax.swing.JPanel();
        btnexit = new javax.swing.JButton();
        print2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DynamicSP Purchase Record Managements (http://dspak.com)");
        setAutoRequestFocus(false);
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setModalExclusionType(null);

        jPanel4.setBackground(new java.awt.Color(0, 102, 102));
        jPanel4.setPreferredSize(new java.awt.Dimension(1024, 50));

        jLabel9.setBackground(new java.awt.Color(0, 102, 102));
        jLabel9.setFont(new java.awt.Font("Impact", 0, 36)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Stock & Claims Settlements");
        jLabel9.setToolTipText("");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));

        link9.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        link9.setForeground(new java.awt.Color(255, 255, 255));
        link9.setText("http://dspak.com | https://ds-pak.com | https://facebook.com/dspak | https://dailymotion.com/dspak");
        link9.setToolTipText("");
        link9.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        link9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                link9MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                link9MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                link9MouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                link9MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(link9, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(link9)
                .addContainerGap())
        );

        jPanel2.setPreferredSize(new java.awt.Dimension(1400, 747));

        purchaseScrollPane.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        purchaseScrollPane.setFocusCycleRoot(true);
        purchaseScrollPane.setMaximumSize(new java.awt.Dimension(1280, 450));

        custHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(custHistory);

        histogram.setSelected(true);
        histogram.setText("Display History");
        histogram.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                histogramStateChanged(evt);
            }
        });

        linvNo.setEditable(false);
        linvNo.setBackground(new java.awt.Color(0, 102, 102));
        linvNo.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        linvNo.setForeground(new java.awt.Color(255, 255, 255));
        linvNo.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        linvNo.setText("0");
        linvNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linvNoActionPerformed(evt);
            }
        });

        jLabel10.setText("Last Invoice No:");

        javax.swing.GroupLayout pan_hostoryLayout = new javax.swing.GroupLayout(pan_hostory);
        pan_hostory.setLayout(pan_hostoryLayout);
        pan_hostoryLayout.setHorizontalGroup(
            pan_hostoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pan_hostoryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pan_hostoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pan_hostoryLayout.createSequentialGroup()
                        .addComponent(histogram)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(linvNo, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        pan_hostoryLayout.setVerticalGroup(
            pan_hostoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pan_hostoryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pan_hostoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pan_hostoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10)
                        .addComponent(linvNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(histogram))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        netAmt.setEditable(false);
        netAmt.setBackground(new java.awt.Color(0, 204, 102));
        netAmt.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        netAmt.setForeground(new java.awt.Color(255, 255, 255));
        netAmt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        netAmt.setText("0.0");
        netAmt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                netAmtActionPerformed(evt);
            }
        });

        Builty8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Builty8.setText("Pro Net Amount:");

        javax.swing.GroupLayout jpansplLayout = new javax.swing.GroupLayout(jpanspl);
        jpanspl.setLayout(jpansplLayout);
        jpansplLayout.setHorizontalGroup(
            jpansplLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpansplLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Builty8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(netAmt, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpansplLayout.setVerticalGroup(
            jpansplLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpansplLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jpansplLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(netAmt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Builty8))
                .addContainerGap(189, Short.MAX_VALUE))
        );

        jLabel1.setText("Invoice No:");

        jLabel2.setText("Ref No:");

        invNo.setEditable(false);
        invNo.setBackground(new java.awt.Color(204, 255, 204));
        invNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invNoActionPerformed(evt);
            }
        });

        refNo.setText(" ");
        refNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refNoActionPerformed(evt);
            }
        });

        jLabel5.setText(" Date:");

        custCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custCodeActionPerformed(evt);
            }
        });
        custCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                custCodeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                custCodeKeyReleased(evt);
            }
        });

        jLabel7.setText("Remarks:");

        jLabel8.setText("Type:");

        remarks.setColumns(20);
        remarks.setRows(5);
        jScrollPane1.setViewportView(remarks);

        suppName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        suppName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        suppName.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                suppNamePopupMenuWillBecomeVisible(evt);
            }
        });
        suppName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suppNameActionPerformed(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(0, 102, 51));
        btnAdd.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setMnemonic('A');
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnEdit.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnEdit.setMnemonic('E');
        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnSearch.setMnemonic('S');
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnView.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnView.setMnemonic('V');
        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnDel.setBackground(new java.awt.Color(255, 102, 102));
        btnDel.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnDel.setMnemonic('D');
        btnDel.setText("Delete");
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });

        btnLast.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oracledms/frames/resources/R2_24.png"))); // NOI18N
        btnLast.setMnemonic('L');
        btnLast.setText("Last");
        btnLast.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });

        btnNext.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oracledms/frames/resources/R1_24.png"))); // NOI18N
        btnNext.setMnemonic('N');
        btnNext.setText("Next");
        btnNext.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnPrior.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnPrior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oracledms/frames/resources/L1_24.png"))); // NOI18N
        btnPrior.setMnemonic('P');
        btnPrior.setText("Prior");
        btnPrior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPriorActionPerformed(evt);
            }
        });

        btnFirst.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oracledms/frames/resources/L2_24.png"))); // NOI18N
        btnFirst.setMnemonic('F');
        btnFirst.setText("First");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });

        dName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        dName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "In", "Out", " " }));
        dName.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                dNamePopupMenuWillBecomeVisible(evt);
            }
        });
        dName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dNameActionPerformed(evt);
            }
        });

        dcode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dcodeActionPerformed(evt);
            }
        });
        dcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dcodeKeyReleased(evt);
            }
        });

        jLabel11.setText("Saleman:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 102, 51));
        jLabel3.setText("(Auto)");

        btnCancel.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnCancel.setMnemonic('C');
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnSearchNow.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnSearchNow.setMnemonic('S');
        btnSearchNow.setText("Search Now");
        btnSearchNow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchNowActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnUpdate.setMnemonic('U');
        btnUpdate.setText("update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnSave.setMnemonic('S');
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnAddRow.setMnemonic('A');
        btnAddRow.setText("Add Row");
        btnAddRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelLayout.createSequentialGroup()
                                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelLayout.createSequentialGroup()
                                        .addComponent(custCode, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(suppName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel2))
                                    .addGroup(panelLayout.createSequentialGroup()
                                        .addComponent(dcode, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel5))
                                    .addGroup(panelLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel1)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(refNo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(oDate, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(invNo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(panelLayout.createSequentialGroup()
                                .addComponent(btnAddRow)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(btnSearchNow)
                                .addGap(0, 0, 0)
                                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1)))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(btnFirst)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPrior)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNext)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLast)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnView, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(invNo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnLast)
                            .addComponent(btnNext)
                            .addComponent(btnPrior)
                            .addComponent(btnFirst))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(refNo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(custCode, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(suppName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(dName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(oDate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(dcode, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelLayout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(jLabel7))))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnView)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnUpdate)
                    .addComponent(btnCancel)
                    .addComponent(btnSearchNow)
                    .addComponent(btnAddRow))
                .addContainerGap())
        );

        btnexit.setBackground(new java.awt.Color(0, 102, 102));
        btnexit.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnexit.setForeground(new java.awt.Color(255, 255, 255));
        btnexit.setMnemonic('X');
        btnexit.setText("Exit Sale Menu");
        btnexit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnexitActionPerformed(evt);
            }
        });

        print2.setText("Print");
        print2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                print2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pan_printLayout = new javax.swing.GroupLayout(pan_print);
        pan_print.setLayout(pan_printLayout);
        pan_printLayout.setHorizontalGroup(
            pan_printLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pan_printLayout.createSequentialGroup()
                .addContainerGap(643, Short.MAX_VALUE)
                .addComponent(print2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnexit)
                .addContainerGap())
        );
        pan_printLayout.setVerticalGroup(
            pan_printLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pan_printLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pan_printLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(print2)
                    .addComponent(btnexit))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pan_hostory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(purchaseScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 922, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jpanspl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(205, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(pan_print, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pan_hostory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(1, 1, 1)
                .addComponent(pan_print, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpanspl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(purchaseScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jScrollPane3.setViewportView(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 1280, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1270, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    String sellers1;
    String refNo1;
    String remarks1;
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        
        forBackBtnEnable(false);
        recEditBtnEnable(false);
        
        textFieldsEditable(true);
        saveUpdateBtnVisible("update", true);
        
        sellers1=(String)suppName.getSelectedItem();
        refNo1=refNo.getText();
        remarks1=remarks.getText();
////System.out.println("At EDIT Max PC:"+productCount);
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        forBackBtnEnable(false);
        recEditBtnEnable(false);
        saveUpdateBtnVisible("save", true);
        textFieldsEditable(true);
        setNullTextFields();
        
        inetializePrductPanel();
        try {
            oDate.setDate(dateField.getPresentDate());
        } catch (ParseException ex) {
            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
        }
    /*    route.setEditable(true);
        route.setText("");
        route.requestFocus();
        code.setText("");*/
        ////System.out.println("At ADD Max PC:"+productCount);
    /*    route.setEditable(true);
        route.setText("");
        route.requestFocus();
        code.setText("");*/
        ////System.out.println("At ADD Max PC:"+productCount);
    /*    route.setEditable(true);
        route.setText("");
        route.requestFocus();
        code.setText("");*/
        ////System.out.println("At ADD Max PC:"+productCount);
    /*    route.setEditable(true);
        route.setText("");
        route.requestFocus();
        code.setText("");*/
        ////System.out.println("At ADD Max PC:"+productCount);
    /*    route.setEditable(true);
        route.setText("");
        route.requestFocus();
        code.setText("");*/
        ////System.out.println("At ADD Max PC:"+productCount);
    /*    route.setEditable(true);
        route.setText("");
        route.requestFocus();
        code.setText("");*/
        ////System.out.println("At ADD Max PC:"+productCount);
    /*    route.setEditable(true);
        route.setText("");
        route.requestFocus();
        code.setText("");*/
        ////System.out.println("At ADD Max PC:"+productCount);
    /*    route.setEditable(true);
        route.setText("");
        route.requestFocus();
        code.setText("");*/
        ////System.out.println("At ADD Max PC:"+productCount);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
        JFrame j=new JFrame();
        j.setAlwaysOnTop(true);
        if(JOptionPane.showConfirmDialog(j,
        "Are you sure ! \nOn selecting \"Yes\" this will Delete the tasks?", "Confermation Diloge",
        JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){ //ConfermationDiloge()){
            PAK_SATELMENT_DB data =new PAK_SATELMENT_DB();
            Connection conn;
            try {
                conn = data.connect_database();
                /*
                //============================CLIENTS CLBAL===================================
                String purchaseProduct = data.get_clbal_from_clints(conn,custCode.getText());
                if(purchaseProduct!=null){
                    BigDecimal b=null;
                    b = new BigDecimal(purchaseProduct).subtract(new BigDecimal(remaining.getText()));
                    if(b!=null){
                        data.update_clbal_in_clints(conn,b+"",custCode.getText());
                    }
                }
                //========================================================================= 
                */
                /*
                    dcode
                    get_invNo_empRec_remaining
                    get_empCustCredit_from_empRec
                    update_empCustCredit_in_empRec
                */
                /*
                //============================CLIENTS CLBAL===================================
                purchaseProduct = data.get_empCustCredit_from_empRec(conn,dcode.getText());
                if(purchaseProduct!=null){
                    BigDecimal b=null;
                    b = new BigDecimal(purchaseProduct).subtract(new BigDecimal(remaining.getText()));
                    if(b!=null){
                        data.update_empCustCredit_in_empRec(conn,b+"",dcode.getText());
                    }
                }
                //========================================================================= 
                */
                boolean tf=false;
                if(invNo.getText()==null){
                }else{
                    /*
                    for(int i=1;i<=productCount;i++){
                        if(purchaseProducts[i] != null && purchaseProducts[i].isDisplayable()&& purchaseProducts[i].getSeekText()!=null){
                            String a = purchaseProducts[i].getSeekText();
String b = (new BigDecimal(Float.parseFloat(purchaseProducts[i].getTotalQtyText())).add(new BigDecimal(Float.parseFloat(purchaseProducts[i].getDamage().getText()))).add(new BigDecimal(Float.parseFloat(purchaseProducts[i].getFree().getText()))))+"";
                            String c = data.get_clqty_wrt_pmast_code(conn, a);
                            BigDecimal d = new BigDecimal("0.0");
                            if (c != null) {
                                d = new BigDecimal(Float.parseFloat(c)).subtract(new BigDecimal(Float.parseFloat(b)));
                            }
                            boolean bool = data.update_clqty_in_pmast(conn, d + "", a);
                        }
                    }
                    */
                    System.out.println("SMAIN DELL"+data.delete_purchase(conn,invNo.getText()));
                    System.out.println("SDTL DELL"+data.delete_purchase_products_in_purchase(conn,invNo.getText()));
                   /*
                    //======================sellers legers==================

                        PAK_CUSTLEG_DB data4 = new PAK_CUSTLEG_DB();
                        Connection conn1;
                        conn1 = data4.connect_database();
                        String s="Return From "+suppName.getSelectedItem()+" Ref # "+refNo.getText()+" Remarks: "+remarks.getText();
                    
                        tf=data4.delete_all_custleg(conn, invNo.getText());

                        data4.close_database(conn1);

                    //======================sellers legers==================
                    */
                    setNullTextFields();
                    setLastRec();
                    setLastInvoice();
                }
                data.close_database(conn);
            } catch (SQLException ex) {
                Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
            }   catch (ParseException ex) {
                Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{

        }
    }//GEN-LAST:event_btnDelActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        forBackBtnEnable(false);
        recEditBtnEnable(false);
        saveUpdateBtnVisible("search", true);
        textFieldsEditable(false);
        invNo.setEditable(true);
        setNullTextFields();
        invNo.setText("");
        invNo.requestFocus();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
//       /*        
        try {
            dialogeClass.createViewInstRtnWin();
        } catch (SQLException ex) {
            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(isSaved){
            invNo.setText(dialogeClass.codeInstRtn);
            findRecords(invNo.getText());
        }else{
            //            JFrame j=new JFrame();
            //                    j.setAlwaysOnTop(true);
            //                    JOptionPane.showMessageDialog(j, "Not Saved", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
        }
//                */
//                */
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        try {
            setLastRec();
        } catch (ParseException ex) {
            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // SELECT LAG(p.FirstName) OVER (ORDER BY p.BusinessEntityID) PreviousValue,p.FirstName FROM Person.Person p
        PAK_SATELMENT_DB data =new PAK_SATELMENT_DB();
        Connection conn;
        try {
            conn = data.connect_database();
            ArrayList<String> next = new ArrayList<String>();
            next=data.next_purchase(conn,invNo.getText());
            if(next!=null){
                setTextinPurchase(next, dateField);
            }else{
                JFrame j=new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Next not found", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
            }
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnPriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPriorActionPerformed
        // SELECT LAG(p.FirstName) OVER (ORDER BY p.BusinessEntityID) PreviousValue,p.FirstName FROM Person.Person p
        PAK_SATELMENT_DB data =new PAK_SATELMENT_DB();
        Connection conn;
        try {
            conn = data.connect_database();
            ArrayList<String> prior = new ArrayList<String>();
            prior=data.prior_purchase(conn,invNo.getText());
            if(prior!=null){
                setTextinPurchase(prior, dateField);
            }else{
                JFrame j=new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Prior not found", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
            }

            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
        }
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
        ////System.out.println("At PRIOR Max PC:"+productCount);
    }//GEN-LAST:event_btnPriorActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        try {
            setFirstRec();
        } catch (ParseException ex) {
            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
        }
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
        ////System.out.println("At FIRST Max PC:"+productCount);
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        saveUpdateBtnVisible("all", false);
        forBackBtnEnable(true);
        recEditBtnEnable(true);
        textFieldsEditable(false);
        try {                                             
            setFirstRec();
        } catch (ParseException ex) {
            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
        }
        editableProductPanel(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        boolean tf=false;
        PAK_SATELMENT_DB data =new PAK_SATELMENT_DB();
        Connection conn;
        try {
            conn = data.connect_database();
                
                try {
                /*
                    String[] s = data.get_invNo_clientCode_remaining(conn,invNo.getText() + "");
                    int a=0;
                    if(s[0].equalsIgnoreCase(invNo.getText())&&s[1].equalsIgnoreCase(custCode.getText())&&s[2].equalsIgnoreCase(remaining.getText())){
                        a=3;
                    }else if(s[0].equalsIgnoreCase(invNo.getText())&&s[1].equalsIgnoreCase(custCode.getText())){
                        a=1;
                    }else if(s[0].equalsIgnoreCase(invNo.getText())){
                        a=2;
                    }
                    switch(a){
                    case 3:
                        //do nothing
                        break;
                    case 1:
                        //============================CLIENTS CLBAL===================================
                        PAK_SATELMENT_DB data5 =new PAK_SATELMENT_DB();
                        Connection conn5;
                        try {
                            conn5=data5.connect_database();
                            String purchaseProduct = data5.get_clbal_from_clints(conn5,custCode.getText());
                            if(purchaseProduct!=null){
                                BigDecimal b=null;
                                b =(new BigDecimal(purchaseProduct).subtract(new BigDecimal(s[2]))).add(new BigDecimal(remaining.getText()));

                                if(b!=null){
                                    data5.update_clbal_in_clints(conn5,b+"",custCode.getText());
                                }

                        conn5.close();
                            }
                        }catch(Exception e){
                            System.out.println("Exceptiojn"+e);
                        }
                        //=========================================================================  
                        break;
                    case 2:
                        //============================CLIENTS CLBAL===================================
                        PAK_SATELMENT_DB data6 =new PAK_SATELMENT_DB();
                        Connection conn6;
                        try {
                            conn6=data6.connect_database();
                            
                             String purchaseProduct = data6.get_clbal_from_clints(conn6,s[1]);
                             if(purchaseProduct!=null){
                                BigDecimal b1=null;
                                b1 =new BigDecimal(purchaseProduct).subtract(new BigDecimal(s[2]));
                                if(b1!=null){
                                    data6.update_clbal_in_clints(conn6,b1+"",s[1]);
                                }
                            }
                            purchaseProduct = data6.get_clbal_from_clints(conn6,custCode.getText());
                            if(purchaseProduct!=null){
                                BigDecimal b=null;
                                b =new BigDecimal(purchaseProduct).add(new BigDecimal(remaining.getText()));

                                if(b!=null){
                                    data6.update_clbal_in_clints(conn6,b+"",custCode.getText());
                                }
                            }  
                           
                            
                        conn6.close();
                        }catch(Exception e){
                            System.out.println("Exceptiojn"+e);
                        }
                        //=========================================================================
                        break;
                    }
                    s = data.get_invNo_empRec_remaining(conn,invNo.getText() + "");
                    a=0;
                    if(s[0].equalsIgnoreCase(invNo.getText())&&s[1].equalsIgnoreCase(dcode.getText())&&s[2].equalsIgnoreCase(remaining.getText())){
                        a=3;
                    }else if(s[0].equalsIgnoreCase(invNo.getText())&&s[1].equalsIgnoreCase(dcode.getText())){
                        a=1;
                    }else if(s[0].equalsIgnoreCase(invNo.getText())){
                        a=2;
                    }
                    switch(a){
                    case 3:
                        //do nothing
                        break;
                    case 1:
                        //============================CLIENTS CLBAL===================================
                        PAK_SATELMENT_DB data5 =new PAK_SATELMENT_DB();
                        Connection conn5;
                        try {
                            conn5=data5.connect_database();
                            String purchaseProduct = data5.get_empCustCredit_from_empRec(conn5,dcode.getText());
                            if(purchaseProduct!=null){
                                BigDecimal b=null;
                                b =(new BigDecimal(purchaseProduct).subtract(new BigDecimal(s[2]))).add(new BigDecimal(remaining.getText()));

                                if(b!=null){
                                    data5.update_empCustCredit_in_empRec(conn5,b+"",dcode.getText());
                                }

                        conn5.close();
                            }
                        }catch(Exception e){
                            System.out.println("Exceptiojn"+e);
                        }
                        //=========================================================================  
                        break;
                    case 2:
                        //============================CLIENTS CLBAL===================================
                        PAK_SATELMENT_DB data6 =new PAK_SATELMENT_DB();
                        Connection conn6;
                        try {
                            conn6=data6.connect_database();
                            
                             String purchaseProduct = data6.get_empCustCredit_from_empRec(conn6,s[1]);
                             if(purchaseProduct!=null){
                                BigDecimal b1=null;
                                b1 =new BigDecimal(purchaseProduct).subtract(new BigDecimal(s[2]));
                                if(b1!=null){
                                    data6.update_empCustCredit_in_empRec(conn6,b1+"",s[1]);
                                }
                            }
                            purchaseProduct = data6.get_empCustCredit_from_empRec(conn6,dcode.getText());
                            if(purchaseProduct!=null){
                                BigDecimal b=null;
                                b =new BigDecimal(purchaseProduct).add(new BigDecimal(remaining.getText()));

                                if(b!=null){
                                    data6.update_empCustCredit_in_empRec(conn6,b+"",dcode.getText());
                                }
                            }  
                           
                            
                        conn6.close();
                        }catch(Exception e){
                            System.out.println("Exceptiojn"+e);
                        }
                        //=========================================================================
                        break;
                    }
                    System.out.println("===a:"+a);
                */
                    /*
Connection conn,  String odate,String  docno,String  refno,String  supcode,
String  tnetamount,
String  remarks,String dealerCode){
                    */
                    tf=data.update_purchase(conn
                            , dateField.toDateString(oDate.getDate().toString()),
                            invNo.getText()+"",refNo.getText(),custCode.getText(),netAmt.getText(),
                            remarks.getText()
                            ,dcode.getText());
                        System.out.println("update_purchase: "+tf);
                } catch (ParseException ex) {
                    Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
                }
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
        }
        ///==========================================================================
        
        ///==========================================================================
        ///==========================================================================
        
        ///==========================================================================
        ///==========================================================================
        
        ///==========================================================================
        ///==========================================================================
        
        ///==========================================================================
        
        
            for(int i=1;i<=productCount;i++){
                //System.out.println("-> "+i+" : productCount->"+productCount);
                if(purchaseProducts[i]!=null&&purchaseProducts[i].isDisplayable()){
                    if(!purchaseProducts[i].getSeekText().isEmpty()){
                        boolean isPresent=false;

                        PAK_SATELMENT_DB data1 =new PAK_SATELMENT_DB();
                        Connection conn1;
                        try {
                            conn1 = data1.connect_database();

                            if(data.find_max_in_purchase_products(conn1, invNo.getText())<=productCount){
                                //System.out.println("IF");
                                isPresent=data1.check_product_line_item_presence_new(conn1, invNo.getText(),purchaseProducts[i].getSeqNoText(),productCount);
                                /*
                                if(isPresent) {
                                    String isPresent1 = data1.check_product_line_item_presence_with_seek(conn1, invNo.getText(), purchaseProducts[i].getSeqNoText(), purchaseProducts[i].getSeekText(), productCount);
                                    
                                    if(isPresent1.equals("true")){
                                        System.out.println("true"+isPresent1);
                                        ///==========================================================================
                                        String a = purchaseProducts[i].getSeekText();
String b = (new BigDecimal(Float.parseFloat(purchaseProducts[i].getTotalQtyText())).add(new BigDecimal(Float.parseFloat(purchaseProducts[i].getDamage().getText()))).add(new BigDecimal(Float.parseFloat(purchaseProducts[i].getFree().getText()))))+"";
                                        String f =  invNo.getText();
                                        String e = data1.get_perqty_wrt_perdtl_code_seek(conn1, a,f,purchaseProducts[i].getSeqNoText());
                                        
                                        System.out.println("e: " + e);
                                        System.out.println("e: " + a);
                                        System.out.println("e: " + f);
                                        BigDecimal d1 = new BigDecimal("0.0");
                                        if (e != null) {
                                            d1 = new BigDecimal(Float.parseFloat(e)).subtract(new BigDecimal(Float.parseFloat(b)));
                                        }

                                        String c = data1.get_clqty_wrt_pmast_code(conn1, a);
                                        BigDecimal d = new BigDecimal("0.0");
                                        if (c != null) {
                                            d = (new BigDecimal(Float.parseFloat(c))).subtract(d1);
                                        }
                                        boolean bool = data1.update_clqty_in_pmast(conn1, d + "", a);
                                        ///===============================
                                    }else{
                                        System.out.println("false=============="+isPresent1);
                                        String s=isPresent1.substring(isPresent1.indexOf(" ")+1, isPresent1.length()); 
                                        String s1=isPresent1.substring(0,isPresent1.indexOf(" ")); 
                                        System.out.println("Code======================"+s1+"=");
                                        System.out.println("Perqty ========================="+s+"=");   


                                        ///==========================================================================
                                        String a = s1;
                                        String b = s;
                                        String f =  invNo.getText();
                                        String e = data1.get_clqty_wrt_pmast_code(conn1, s1);
                                        System.out.println("e: " + e);
                                        System.out.println("e: " + a);
                                        System.out.println("e: " + f);
                                        BigDecimal d1 = new BigDecimal("0.0");
                                        if (e != null) {
                                            d1 = new BigDecimal(Float.parseFloat(e)).subtract(new BigDecimal(Float.parseFloat(b)));
                                        }

                                        boolean bool = data1.update_clqty_in_pmast(conn1, d1 + "", a);

                                         a = purchaseProducts[i].getSeekText();
b = (new BigDecimal(Float.parseFloat(purchaseProducts[i].getTotalQtyText())).add(new BigDecimal(Float.parseFloat(purchaseProducts[i].getDamage().getText()))).add(new BigDecimal(Float.parseFloat(purchaseProducts[i].getFree().getText()))))+"";
                                        String c = data.get_clqty_wrt_pmast_code(conn1, a);
                                        BigDecimal d = new BigDecimal("0.0");
                                        if (c != null) {
                                            d = new BigDecimal(Float.parseFloat(c)).add(new BigDecimal(Float.parseFloat(b)));
                                        }
                                        bool = data1.update_clqty_in_pmast(conn1, d + "", a);

                                        ///===============================


                                    }
                                } else {
                                }
                             */
                                
                            }else{
                                isPresent=false;
                            }
                            data1.close_database(conn1);
                        } catch (SQLException ex) {
                            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        //System.out.println("isPresent->"+isPresent);
                        if(isPresent){
                            System.out.println(invNo.getText()+""+" UPDATE-> "+purchaseProducts[i].getSeqNoText());

                            
                            PAK_SATELMENT_DB data2 =new PAK_SATELMENT_DB();
                            Connection conn2;
                            try {
                                conn2 = data2.connect_database();
                                /*String pNameNumber=null;
                                switch (purchaseProducts[i].getpType().getSelectedItem().toString()) 
                                {
                                   case "SFT":
                                       pNameNumber="1";
                                       break;
                                   case "RFT":
                                       pNameNumber="2";
                                       break;
                                   case "PER PIECE":
                                       pNameNumber="3";
                                       break;
                                   case "CUSTOME":
                                       pNameNumber="4";
                                       break;
                                }*/
                                //docno,seqno,pcode,saleqty,salerate,damage,dmgrate,
                                //expiryqty,expiryrate,netamount,expirydate
                                String tempDate;
                                if(purchaseProducts[i].getExpDate().getDate()!=null){
                                    tempDate=purchaseProducts[i].getExpDate().getDate().toString();
                                }else{
                                    tempDate=null;
                                }//dateField.toDateString(tempDate)
                                
                                tf=data2.update_purchase_products_in_table_new(conn2,
                                        invNo.getText(),
                                        purchaseProducts[i].getSeqNoText(),
                                        purchaseProducts[i].getSeekText(),
                                        purchaseProducts[i].getTotalQtyText(),
                                        purchaseProducts[i].getRateText(),
                                        purchaseProducts[i].getNetAmt().getText(),
                                        dateField.toDateString(tempDate));

                                System.out.println("update_purchase_products_in_table_new: "+tf);
                                
                                data2.close_database(conn2);
                            } catch (SQLException ex) {
                                Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (ParseException ex) {
                                Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
                            } 
                        }else {
                            //System.out.println(invNo.getText()+""+" INSERT-> "+purchaseProducts[i].getSeqNoText());

                            PAK_SATELMENT_DB data3 =new PAK_SATELMENT_DB();
                            Connection conn3;
                            try {
                                conn3 = data3.connect_database();
                                /*String pNameNumber=null;
                                switch (purchaseProducts[i].getpType().getSelectedItem().toString()) 
                                {
                                   case "SFT":
                                       pNameNumber="1";
                                       break;
                                   case "RFT":
                                       pNameNumber="2";
                                       break;
                                   case "PER PIECE":
                                       pNameNumber="3";
                                       break;
                                   case "CUSTOME":
                                       pNameNumber="4";
                                       break;
                                }*/
                                String tempDate;
                                if(purchaseProducts[i].getExpDate().getDate()!=null){
                                    tempDate=purchaseProducts[i].getExpDate().getDate().toString();
                                }else{
                                    tempDate=null;
                                }//dateField.toDateString(tempDate)
                                
                                tf=data3.insert_purchase_products_in_table(conn3, 
                                        invNo.getText(),
                                        purchaseProducts[i].getSeqNoText(),
                                        purchaseProducts[i].getSeekText(),
                                        purchaseProducts[i].getTotalQtyText(),
                                        purchaseProducts[i].getRateText(),
                                        purchaseProducts[i].getNetAmtText(),
                                        dateField.toDateString(tempDate));
                                System.out.println("insert_purchase_products_in_table: "+tf);
                                
                                
                             /*   
                            String a = purchaseProducts[i].getSeekText();
String b = (new BigDecimal(Float.parseFloat(purchaseProducts[i].getTotalQtyText())).add(new BigDecimal(Float.parseFloat(purchaseProducts[i].getDamage().getText()))).add(new BigDecimal(Float.parseFloat(purchaseProducts[i].getFree().getText()))))+"";
                            String c = data3.get_clqty_wrt_pmast_code(conn3, a);
                            BigDecimal d = new BigDecimal("0.0");
                            if (c != null) {
                                d = new BigDecimal(Float.parseFloat(c)).add(new BigDecimal(Float.parseFloat(b)));
                            }
                            boolean bool = data3.update_clqty_in_pmast(conn3, d + "", a);
                                */
                                data3.close_database(conn3);
                            } catch (SQLException ex) {
                                Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (ParseException ex) {
                                Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }else{
                        JFrame j=new JFrame();
                        j.setAlwaysOnTop(true);
                        JOptionPane.showMessageDialog(j, "Empty Seek Value will not be updatd \n Nor will be deleted", "InfoBox: ", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
         /*   
        //======================sellers legers==================
            PAK_CUSTLEG_DB data1 =new PAK_CUSTLEG_DB();
            Connection conn1;
             try {
                conn1 = data1.connect_database();
                try {
                    String s="Return From "+sellers1+" Ref # "+refNo1+" Remarks: "+remarks1;
                    
                    if(data1.check_product_line_item_description_presence_new(conn1, invNo.getText(),s )){
                        
                    }
                    tf=data1.update_cust_ledger(conn1,
                            custCode.getText(),
                            dateField.toDateString(oDate.getDate().toString()),
"Return From "+suppName.getSelectedItem()+" Ref # "+refNo.getText()+" Remarks: "+remarks.getText(),
                            netpayable.getText(),
                            paid.getText(),
                            invNo.getText(),
                            s);
                    System.out.println("update_cust_ledger"+tf);
                } catch (ParseException ex) {
                    Logger.getLogger(PURCHASE.class.getName()).log(Level.SEVERE, null, ex);
                }
                data1.close_database(conn1);
            } catch (SQLException ex) {
                Logger.getLogger(PURCHASE.class.getName()).log(Level.SEVERE, null, ex);
            }
        //======================cust legers==================
            */
            if(tf){
                btnexit.setVisible(true);
                saveUpdateBtnVisible("all", false);
                forBackBtnEnable(true);
                recEditBtnEnable(true);
                recEditActionBtnVisible(false);
                textFieldsEditable(false);
                editableProductPanel(false);
            }else{
                JFrame j=new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Not Edited", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
            }
            loadProductsPanel(invNo.getText());
        ////System.out.println("At UPDATE Max PC:"+productCount);
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        int max=0,codeInt=0;        
        if(!(custCode.getText().toString().equalsIgnoreCase(""))){
            PAK_SATELMENT_DB data =new PAK_SATELMENT_DB();
            Connection conn;
            try {
                conn = data.connect_database();
                boolean tf=false;

                ///Max
                max=data.find_max_in_purchase_code(conn);
                
                //System.out.println("Max:"+max);
                if(max==0){
                    codeInt=1;
                }else{
                    codeInt=max+1;
                }
                ///Max String.valueOf(codeInt)
/*
            //============================CLIENTS CLBAL===================================
                String purchaseProduct = data.get_clbal_from_clints(conn,custCode.getText());
                if(purchaseProduct!=null){
                    BigDecimal b=null;
                    b = new BigDecimal(purchaseProduct).add(new BigDecimal(remaining.getText()));
                    if(b!=null){
                        data.update_clbal_in_clints(conn,b+"",custCode.getText());
                    }
                }
                //========================================================================= 
  */
                /*
            //============================CLIENTS CLBAL===================================
                purchaseProduct = data.get_empCustCredit_from_empRec(conn,dcode.getText());
                if(purchaseProduct!=null){
                    BigDecimal b=null;
                    b = new BigDecimal(purchaseProduct).add(new BigDecimal(remaining.getText()));
                    if(b!=null){
                        data.update_empCustCredit_in_empRec(conn,b+"",dcode.getText());
                    }
                }*/
                //========================================================================= 
                tf=data.insert_purchase_in_table(conn, dateField.toDateString(oDate.getDate().toString()), 
                        codeInt+"",refNo.getText(),custCode.getText(),netAmt.getText(),remarks.getText(),
                        dcode.getText());
                    for(int i=1;i<=productCount;i++){
                        if(purchaseProducts[i].isDisplayable()&& !purchaseProducts[i].getSeekText().isEmpty()){
                            String tempDate;
                            if(purchaseProducts[i].getExpDate().getDate()!=null){
                                tempDate=purchaseProducts[i].getExpDate().getDate().toString();
                            }else{
                                tempDate=null;
                            }//dateField.toDateString(tempDate)
                                
                            tf=data.insert_purchase_products_in_table(conn,
                                    codeInt+"",
                                    purchaseProducts[i].getSeqNoText(),
                                    purchaseProducts[i].getSeekText(),
                                    purchaseProducts[i].getTotalQtyText(),
                                    purchaseProducts[i].getRateText(),
                                    purchaseProducts[i].getNetAmtText(),
                                    dateField.toDateString(tempDate));
                            /*
                            String a = purchaseProducts[i].getSeekText();
String b = (new BigDecimal(Float.parseFloat(purchaseProducts[i].getTotalQtyText())).add(new BigDecimal(Float.parseFloat(purchaseProducts[i].getDamage().getText()))).add(new BigDecimal(Float.parseFloat(purchaseProducts[i].getFree().getText()))))+"";
                            String c = data.get_clqty_wrt_pmast_code(conn, a);
                            BigDecimal d = new BigDecimal("0.0");
                            if (c != null) {
                                d = new BigDecimal(Float.parseFloat(c)).add(new BigDecimal(Float.parseFloat(b)));
                            }
                            boolean bool = data.update_clqty_in_pmast(conn, d + "", a);
                            */
                        }
                    }
//                tf=insert_purchase_products_in_table(conn,docno,seqno,pcode,perqty,perrate,grossamount,discper,discrs,taxper,taxrs,netamount);

                if(tf){
                    invNo.setText(String.valueOf(codeInt));
                    invNo.setEditable(false);
                    forBackBtnEnable(true);
                    recEditBtnEnable(true);
                    recEditActionBtnVisible(false);
                    setLastInvoice();
                    textFieldsEditable(false);
                    editableProductPanel(false);
                    saveUpdateBtnVisible("all", false);
                    loadProductsPanel(invNo.getText());
                    btnexit.setVisible(true);
                }
                ////System.out.println("Is Inserted :"+ tf);
                data.close_database(conn);
            } catch (SQLException ex) {
                Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
            } 
            catch (ParseException ex) {
                Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
            }
                       /*
             try {
                //======================CUST legers==================
                PAK_CUSTLEG_DB data1 =new PAK_CUSTLEG_DB();
                Connection conn1;
                conn1 = data1.connect_database();
                    try {

                        data1.insert_cust_ledger(conn1,
                                custCode.getText(),
                                dateField.toDateString(oDate.getDate().toString()),
        "Return From "+suppName.getSelectedItem()+" Ref # "+refNo.getText()+" Remarks: "+remarks.getText(),
                                netpayable.getText(),
                                paid.getText(),
                                codeInt+"");

                    } catch (ParseException ex) {
                        Logger.getLogger(PURCHASE.class.getName()).log(Level.SEVERE, null, ex);
                    }
                data1.close_database(conn1);
                //======================CUST legers==================
            } catch (SQLException ex) {
                Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
            }
                       /*
             try {
                //======================CUST legers==================
                PAK_CUSTLEG_DB data1 =new PAK_CUSTLEG_DB();
                Connection conn1;
                conn1 = data1.connect_database();
                    try {

                        data1.insert_cust_ledger(conn1,
                                custCode.getText(),
                                dateField.toDateString(oDate.getDate().toString()),
        "Return From "+suppName.getSelectedItem()+" Ref # "+refNo.getText()+" Remarks: "+remarks.getText(),
                                netpayable.getText(),
                                paid.getText(),
                                codeInt+"");

                    } catch (ParseException ex) {
                        Logger.getLogger(PURCHASE.class.getName()).log(Level.SEVERE, null, ex);
                    }
                data1.close_database(conn1);
                //======================CUST legers==================
            } catch (SQLException ex) {
                Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
            }
            */
        }else{
            JFrame j=new JFrame();
            j.setAlwaysOnTop(true);
            JOptionPane.showMessageDialog(j, "Enter Customer No And Others \n OR Press Cancel to Contine  ", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnSearchNowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchNowActionPerformed
        findRecords(invNo.getText());
    }//GEN-LAST:event_btnSearchNowActionPerformed

    private void btnexitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnexitActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnexitActionPerformed

    private void invNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_invNoActionPerformed

    private void custCodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_custCodeKeyReleased
        try {
            updateComboBox(custCode, suppName,"type");
        } catch (Exception ex) {
            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_custCodeKeyReleased

    private void suppNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suppNameActionPerformed
        //System.out.println("suppName.getSelectedItem().toString()"+suppName.getSelectedItem().toString());
        custCode.setText(getCode(suppName.getSelectedItem().toString(),"type"));
    }//GEN-LAST:event_suppNameActionPerformed

    private void suppNamePopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_suppNamePopupMenuWillBecomeVisible
        PAK_SATELMENT_DB data =new PAK_SATELMENT_DB();
        Connection conn;
        try {
            conn = data.connect_database();        
            suppName.setModel(buildAllComboBoxModel("type"));
            if(setSelectedComboItem(custCode,suppName,((!custCode.getText().isEmpty())?data.find_supp_name_by_code(conn, custCode.getText()):""))){
                
            }else{
                custCode.setText(getCode(suppName.getSelectedItem().toString(),"type"));
            }
            
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_suppNamePopupMenuWillBecomeVisible

    private void custCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_custCodeActionPerformed

    private void netAmtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_netAmtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_netAmtActionPerformed

    private void linvNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linvNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_linvNoActionPerformed

    private void dNamePopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_dNamePopupMenuWillBecomeVisible
        DefaultComboBoxModel s1 =new DefaultComboBoxModel();s1.addElement("Stock In");s1.addElement("Stock Out");
        dName.setModel(s1);
    }//GEN-LAST:event_dNamePopupMenuWillBecomeVisible

    private void dNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dNameActionPerformed
        if(dName.getSelectedItem().equals("Stock In")){
            dcode.setText("1");
        }else if(dName.getSelectedItem().equals("Stock Out")){
            dcode.setText("2");
        }
    }//GEN-LAST:event_dNameActionPerformed

    private void dcodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dcodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dcodeActionPerformed

    private void dcodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dcodeKeyReleased
       if(dcode.getText().equals("1")){
            dName.setSelectedItem("Stock In");
        }else if(dcode.getText().equals("2")){
            dName.setSelectedItem("Stock Out");
        }
        
    }//GEN-LAST:event_dcodeKeyReleased

    private void link9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_link9MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_link9MouseClicked

    private void link9MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_link9MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_link9MouseEntered

    private void link9MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_link9MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_link9MouseExited

    private void link9MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_link9MouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_link9MouseReleased

    private void print2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_print2ActionPerformed
        try{ 
        
                    String s= "D:\\Oracle DMS software\\PakMarketing\\src\\oracledms\\reports\\sales.jrxml";
                    
            
                    
                    Map parametersMap = new HashMap();  
                    parametersMap.put("USER_DOCNO",1);
                    
                    JasperReport jr = JasperCompileManager.compileReport(s);
                    JasperPrint print = JasperFillManager.fillReport(jr,parametersMap,connAA);
                    JasperViewer.viewReport(print);
        } catch (Exception e) {
            System.out.println("Exception ===> "+e);
        }
    }//GEN-LAST:event_print2ActionPerformed

    private void btnAddRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRowActionPerformed
        addRow();
        //System.out.println("At ADD ROW Max PC:"+productCount);
    }//GEN-LAST:event_btnAddRowActionPerformed

    private void refNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_refNoActionPerformed

    private void custCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_custCodeKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try 
            {
                dialogeClass.createViewCustRecWin();
            } catch (SQLException ex) {
                Logger.getLogger(SALES.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(DynamicERP.dialoge.viewforms.ViewForm11.isSaved){
                custCode.setText(dialogeClass.codeCustRec);
            }else{}
        }
        try {
            updateComboBox(custCode, suppName,"type");
        } catch (Exception ex) {
            Logger.getLogger(RECOVERY.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_custCodeKeyPressed
    private void khaliTable() {
        String colNames[]={"Inv No","Date","Qty","Rate","Disc %"};String rowData[][]={};initTable(colNames, rowData);
    }
    private void histogramStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_histogramStateChanged
        if(!histogram.isSelected()){khaliTable();}
    }//GEN-LAST:event_histogramStateChanged
    public boolean setSelectedComboItem(JTextField textField,JComboBox comboBox, String value)
    {
        boolean tf=false;
        String item;
        if(!value.isEmpty()){
            for (int i = 0; i < comboBox.getItemCount(); i++)
            {
                item = (String)comboBox.getItemAt(i);
                if (!item.isEmpty())
                {
                    if (item.equals(value))
                    {
                        comboBox.setSelectedIndex(i);
                        tf=true;
                        break;
                    }
                }else{
                    //System.out.println(">>>> Message: Item is empty. . . ");
                    JFrame j=new JFrame();
                    j.setAlwaysOnTop(true);
                    JOptionPane.showMessageDialog(j, "First Add Items in : "+comboBox.getName(), "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
                }
            }   
        }else{
            //System.out.println(">>>> Message: Value could not be  Selected . . . ");
            comboBox.setSelectedIndex(0);
        }
        return tf;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SATELMET.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SATELMET.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SATELMET.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SATELMET.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SATELMET().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Builty8;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAddRow;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrior;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSearchNow;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnView;
    private javax.swing.JButton btnexit;
    private javax.swing.JTextField custCode;
    private javax.swing.JTable custHistory;
    private javax.swing.JComboBox dName;
    private javax.swing.JTextField dcode;
    private javax.swing.JCheckBox histogram;
    private javax.swing.JTextField invNo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel jpanspl;
    private javax.swing.JLabel link9;
    private javax.swing.JTextField linvNo;
    private javax.swing.JTextField netAmt;
    private com.toedter.calendar.JDateChooser oDate;
    private javax.swing.JPanel pan_hostory;
    private javax.swing.JPanel pan_print;
    private javax.swing.JPanel panel;
    private javax.swing.JButton print2;
    private javax.swing.JScrollPane purchaseScrollPane;
    private javax.swing.JTextField refNo;
    private javax.swing.JTextArea remarks;
    private javax.swing.JComboBox suppName;
    // End of variables declaration//GEN-END:variables

    public JTextField getNetAmt() {
        return netAmt;
    }

    public void setNetAmt(JTextField netAmt) {
        this.netAmt = netAmt;
    }

  

    // Start of my variables declaration   
    
    private JTable jTable1;
    DefaultTableModel model;
    Vector originalTableModel;
    ListSelectionModel selectionModel ;
    
    private static int productCount=0;
    private static PakInstRtnFieldPanel[] purchaseProducts = new PakInstRtnFieldPanel[500];
    private static InstRtnHeaderPanel purchaseHeaderPanel= new InstRtnHeaderPanel();
    private static JPanel purchasePanel;// = new JPanel();
    // End of my variables declaration                   
    
    
    
    private void perkd(KeyEvent e) {
        if(e.getSource() instanceof JTextField){
            JTextField j = (JTextField) e.getSource();
            boolean b=false;
            for (int i = Integer.parseInt(j.getParent().getName()); i < (Integer.parseInt(j.getParent().getName())+10); i++) {
                if(purchaseProducts[i+1]!=null&&purchaseProducts[i+1].isDisplayable())
                {
                    JTextField j1= (JTextField) purchaseProducts[i+1].getComponent(gci(j));
                    j1.requestFocus();j1.selectAll();b=false;break;
                }else{b=true;}
            }
            if(b&&j.isEditable()){
                    /*JOptionPane.showMessageDialog(j, "Info","InfoBox: ", JOptionPane.INFORMATION_MESSAGE);*/addRow();purchaseProducts[productCount].getSeek().requestFocus();
            }
        }
    }
    public static final int gci(Component component) {
        if (component != null && component.getParent() != null) {
          Container c = component.getParent();for (int i = 0; i < c.getComponentCount(); i++) {if (c.getComponent(i) == component)return i;}
        }return -1;
    }
   private void perku(KeyEvent e) {
        if(e.getSource() instanceof JTextField){
            JTextField j = (JTextField) e.getSource();
            for (int i = Integer.parseInt(j.getParent().getName()); (i > (Integer.parseInt(j.getParent().getName())-10)&&i>0); i--) {
                if(purchaseProducts[i-1]!=null&&purchaseProducts[i-1].isDisplayable())
                {
                    JTextField j1= (JTextField) purchaseProducts[i-1].getComponent(gci(j));
                    j1.requestFocus();
                    j1.selectAll();
                    break;
                }
            }
        }
    }
    private void initTable() {
//        String col[] = {"Seq#","PCode","BCode","ProductName","PurPCS","PurCTN","PurQTY","PurDMG","PurRate","GrossAmount","Disc%","DiscRS","Tax%","TaxRS","TOPcs","UCHRS","SCHRS","FMR%","FMRRS","TaxRS","Expiry","Batch","NetAmount"};
        String col[] = {"Seq#","PCode","BCode"};
        int k=0; 
        Object row[][] = new Object[][] { { "1", new ButtonTextFieldCellTest.ButtonTextFieldCell(), new ButtonTextFieldCellTest.ButtonTextFieldCell() },
            { "2", new ButtonTextFieldCellTest.ButtonTextFieldCell(), new ButtonTextFieldCellTest.ButtonTextFieldCell() },
            { "3", new ButtonTextFieldCellTest.ButtonTextFieldCell(), new ButtonTextFieldCellTest.ButtonTextFieldCell() },
            { "4", new ButtonTextFieldCellTest.ButtonTextFieldCell(), new ButtonTextFieldCellTest.ButtonTextFieldCell() } };
//        String row[][] =new String[3][23];
        /*
        for(int i = 0; i < 3; i++){
            for(int j = 0; j < 23; j++){
                row[i][j]=""+k++;
            }
        }
                
        */
//        row=new String[][]{{"Seq#","PCode","BCode","ProductName","PurPCS","PurCTN","PurQTY","PurDMG","PurRate","GrossAmount","Disc%","DiscRS","Tax%","TaxRS","TOPcs","UCHRS","SCHRS","FMR%","FMRRS","TaxRS","Expiry","Batch","NetAmount"},
//                                       {"1Seq#","1PCode","1BCode","ProductName","PurPCS","PurCTN","PurQTY","PurDMG","PurRate","GrossAmount","Disc%","DiscRS","Tax%","TaxRS","TOPcs","UCHRS","SCHRS","FMR%","FMRRS","TaxRS","Expiry","Batch","NetAmount"},
//                                       {"2Seq#","2PCode","2BCode","ProductName","PurPCS","PurCTN","PurQTY","PurDMG","PurRate","GrossAmount","Disc%","DiscRS","Tax%","TaxRS","TOPcs","UCHRS","SCHRS","FMR%","FMRRS","TaxRS","Expiry","Batch","NetAmount"}};
        model = new DefaultTableModel(row,col);
        jTable1=new JTable(model);
        jTable1.setRowHeight(30);
        jTable1.setRowHeight(0,30);
        jTable1.setPreferredSize(new Dimension(purchaseScrollPane.getWidth(), 35));
        purchaseScrollPane.setViewportView(jTable1);
    }
    JInternalFrame f=new JInternalFrame();
    javax.swing.JPanel panel1[] = new javax.swing.JPanel[2];
    JTextField J[][] = new JTextField[2][23];
    private void initScrollPanel() {
        
        f.getContentPane().setLayout(new BoxLayout(f.getContentPane(), BoxLayout.PAGE_AXIS));
//        f.putClientProperty("JInternalFrame.isPalette", Boolean.TRUE);
//        f.getRootPane().setWindowDecorationStyle(JRootPane.NONE);
        for(int j = 0;j < 2;j++)
        {
            initializePanelListner(panel1[j]);
            for(int i = 0;i < 23;i++)
            {
                J[j][i] = new JTextField(4);
                J[j][i].setBounds(150, 350 + i * 25, 20, 20);
                panel1[j].add(J[j][i]);
                panel1[j].setAlignmentX(Component.CENTER_ALIGNMENT);
            }
            f.add(panel1[j]);
        }
        
//        purchaseScrollPane.
        purchaseScrollPane.setViewportView(f);
    }

    private void initializePanelListner(final JPanel p) {
//        p=new JPanel();
        p.addMouseListener(new MouseListener(){

            @Override
            public void mouseClicked(MouseEvent me) {
                
//                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void mousePressed(MouseEvent me) {
//                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void mouseReleased(MouseEvent me) {
//                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                p.setBackground(Color.green);
            }

            @Override
            public void mouseExited(MouseEvent me) {
//                java.awt.Point p1 = new java.awt.Point(me.getLocationOnScreen());
//                SwingUtilities.convertPointFromScreen(p1, me.getComponent());
//                if(me.getComponent().contains(p1)) {return;}
                p.setBackground(null);
            }
        });
    }
   private void initPanel() {
        purchasePanel = new JPanel();
        purchasePanel.setLayout(new BoxLayout(purchasePanel, BoxLayout.PAGE_AXIS));
        purchasePanel.add(purchaseHeaderPanel);
        addRow();
            
        purchaseScrollPane.getViewport().setView(purchasePanel);
    }

    private void addRow() {
        productCount++;
        purchaseProducts[productCount]=new PakInstRtnFieldPanel();
        purchaseProducts[productCount].setName(productCount+"");
        purchaseProducts[productCount].setSeqNoText(productCount+"");
        for (int i = 0; i < 22; i++) {switch(i){case 1:case 2:case 5: case 4:case 6:case 7:case 9:
                purchaseProducts[productCount].getComponent(i).addKeyListener(new KeyAdapter(){
                    public void keyReleased(KeyEvent e) {
                        int keyCode = e.getKeyCode();
                        switch( keyCode ) { 
                            case KeyEvent.VK_UP:
                                perku(e);
                                break;
                            case KeyEvent.VK_DOWN:
                                perkd(e);
                                break;
                         }
                    }
                });
            }
        }
        purchaseProducts[productCount].getSeek().addKeyListener(new KeyAdapter(){
            public void keyReleased(KeyEvent e) {                                                                                    /*System.out.print("T:"+purchaseProducts[productCount].getGrossAmt().getText());System.out.print("T:"+purchaseProducts[productCount].getGrossAmt().getText());*/                    JTextField t= (JTextField) e.getSource();
//                System.out.print("T:"+purchaseProducts[productCount].getGrossAmt().getText());
                updateSumSplPanel();
                setBalQty(e);
                if(histogram.isSelected()){
                String col[]={"Inv No","Date","Qty","Rate","Disc %"};
                updateTableView(col,purchaseProducts[Integer.parseInt(t.getParent().getName())].getSeek().getText());
                }
            }
        });//seekInputMethodTextChanged
        purchaseProducts[productCount].getSeek().addCaretListener(new CaretListener() {

            @Override
            public void caretUpdate(CaretEvent ce) {                                                                                /*System.out.print("T:"+purchaseProducts[productCount].getGrossAmt().getText());*/                    JTextField t = (JTextField) ce.getSource();
                if(t.getText()!=null){
                if(histogram.isSelected()){
                String col[]={"Inv No","Date","Qty","Rate","Disc %"};
                updateTableView(col,purchaseProducts[Integer.parseInt(t.getParent().getName())].getSeek().getText());
                }
                }
            }
        });
        purchaseProducts[productCount].getpName().addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {                                                                            /*System.out.print("T:"+purchaseProducts[productCount].getGrossAmt().getText());System.out.print("T:"+purchaseProducts[productCount].getGrossAmt().getText());*/                    JComboBox t= (JComboBox) ae.getSource();
               updateSumSplPanel();
               setBalQty(ae);
                if(histogram.isSelected()){
                String col[]={"Inv No","Date","Qty","Rate","Disc %"};
                updateTableView(col,purchaseProducts[Integer.parseInt(t.getParent().getName())].getSeek().getText());
                }
            }
        });

        purchaseProducts[productCount].getRate().addKeyListener(new KeyAdapter(){
            public void keyReleased(KeyEvent e) {
//                System.out.print("T:"+purchaseProducts[productCount].getGrossAmt().getText());
                updateSumSplPanel();
            }
        });
        purchaseProducts[productCount].getCtn().addKeyListener(new KeyAdapter(){
            public void keyReleased(KeyEvent e) {
//                System.out.print("T:"+purchaseProducts[productCount].getGrossAmt().getText());
                updateSumSplPanel();
            }
        });
        purchaseProducts[productCount].getPcs().addKeyListener(new KeyAdapter(){
            public void keyReleased(KeyEvent e) {
//                System.out.print("T:"+purchaseProducts[productCount].getGrossAmt().getText());
                updateSumSplPanel();
            }
        });
        purchaseProducts[productCount].getTotalQty().addKeyListener(new KeyAdapter(){
            public void keyReleased(KeyEvent e) {
//                System.out.print("T:"+purchaseProducts[productCount].getGrossAmt().getText());
                updateSumSplPanel();
            }
        });
        
       
       
        purchaseProducts[productCount].getpName().addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               updateSumSplPanel();
               setBalQty(ae);
            }
        });
        purchaseProducts[productCount].getpName().addPopupMenuListener(new PopupMenuListener() {

            @Override
            public void popupMenuWillBecomeVisible(PopupMenuEvent pme) {
                updateSumSplPanel();
                setBalQty(pme);
            }

            @Override
            public void popupMenuWillBecomeInvisible(PopupMenuEvent pme) {
                updateSumSplPanel();
                setBalQty(pme);
            }

            @Override
            public void popupMenuCanceled(PopupMenuEvent pme) {
                updateSumSplPanel();
                setBalQty(pme);
            }

        });
        purchaseProducts[productCount].getjLabel2().addMouseListener(new MouseAdapter(){
            public void mouseClicked(MouseEvent e) {
                JFrame j=new JFrame();
                j.setAlwaysOnTop(true);
                JLabel label = (JLabel)e.getSource();
                if(label.isEnabled()){
                    if(JOptionPane.showConfirmDialog(j,
                    "Are you sure ! \nOn selecting \"Yes\" this will Delete the Row...\n\n Deleted Row can not be restored  . . .", "Confermation Diloge",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){ //ConfermationDiloge()){
                        btnCancel.setVisible(false);
                        btnexit.setVisible(false);
                        removeRow(Integer.parseInt(label.getParent().getName()));
                        deletePurchaseProduct(invNo.getText(), label.getParent().getName(),purchaseProducts[Integer.parseInt(label.getParent().getName())].getSeqNoText());
                        updateSumSplPanel();
                    }
                }
            }
        });
        initializePanelListner(purchaseProducts[productCount]);
        purchasePanel.add(purchaseProducts[productCount]);
    }
    private void setBalQty(KeyEvent e) {
//        try {
//            PAK_DB data =new PAK_DB();
//            Connection conn;
//            conn = data.connect_database();
//            ArrayList<String> temp;
//            JTextField f = (JTextField) e.getSource();
//            if(!f.getText().equals("")){
//                temp=data.find_product_rec_by_code(conn, f.getText());
//                if(temp!=null){
//                    for(int i=0;i<temp.size();i++){
//                        if(i==9){//||i==6||i==10){
//                            balQty.setText(temp.get(i));
//                        }
//                    }
//                }
//            }
//            data.close_database(conn);
//        } catch (SQLException ex) {
//            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }
    private void setBalQty(ActionEvent e) {
//        try {
//            PAK_DB data =new PAK_DB();
//            Connection conn;
//            conn = data.connect_database();
//            ArrayList<String> temp;
//            JComboBox f = (JComboBox) e.getSource();
//            System.out.println("");
//            System.out.println("================================");
//            System.out.println("f.getSelectedItem()"+f.getSelectedItem());
//            String item;
//            item = getSubName(f.getSelectedItem()+"");
//            System.out.println("item:"+item);
//            System.out.println("================================");
//            if(!f.getSelectedItem().equals("")){
//                String s12 =data.find_product_code_by_name(conn, item);
//                if(s12!=null){
//                    temp=data.find_product_rec_by_code(conn, s12);
//                    if(temp!=null){
//                        for(int i=0;i<temp.size();i++){
//                            if(i==9){//||i==6||i==10){
//                                balQty.setText(temp.get(i));
//                            }
//                        }
//                    }
//                }
//            }
//            data.close_database(conn);
//        } catch (SQLException ex) {
//            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }
    private String getSubName(String p) {
        String s=p.substring(0, p.indexOf("|")-1);  
        return s;
    }
    private void setBalQty(PopupMenuEvent e) {
        try {
            PAK_DB data =new PAK_DB();
            Connection conn;
            conn = data.connect_database();
            ArrayList<String> temp;
            JComboBox f = (JComboBox) e.getSource();
            System.out.println("");
            System.out.println("****************");
            System.out.println("PopupMenuEvent"+f.getSelectedItem());
            System.out.println("****************");
//            if(!f.getSelectedItem().equals("")){
//                temp=data.find_product_rec_by_code(conn, f.getSelectedItem());
//                if(temp!=null){
//                    for(int i=0;i<temp.size();i++){
//                        if(i==9){//||i==6||i==10){
//                            balQty.setText(temp.get(i));
//                        }
//                    }
//                }
//            }
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void addRow(int tempProductCount) {
        productCount=tempProductCount;
        addRow();
    }
    /*
    private void addNextRow() {
        
        PAK_SATELMENT_DB data =new PAK_SATELMENT_DB();
        Connection conn;
        try {
            conn = data.connect_database();
                
                //System.out.println("productCount <Before>"+productCount);
                int max=data.find_max_in_purchase_products(conn, invNo.getText());
                int pCount=productCount;
                //System.out.println("max -> "+max+" : pCount->"+pCount);
                int index=0;
                if(max > pCount){
                    productCount=max;
                }else{
                    productCount=pCount;
                }
                index++;
                productCount++;
                //System.out.println("productCount <After>"+productCount);
                purchaseProducts[productCount]=new PakInstRtnFieldPanel();
                purchaseProducts[productCount].setName(productCount+"");
                purchaseProducts[productCount].setSeqNoText(productCount+"");
                purchaseProducts[productCount].getjLabel2().addMouseListener(new MouseAdapter(){
                    public void mouseClicked(MouseEvent e) {
                        JLabel label = (JLabel)e.getSource();
                        removeRow(Integer.parseInt(label.getParent().getName()));
                        deletePurchaseProduct(invNo.getText(),label.getParent().getName());
                    }
                });
                initializePanelListner(purchaseProducts[productCount]);
                purchasePanel.add(purchaseProducts[productCount]);
                
//                productCount=data.find_count_in_purchase_products(conn, invNo.getText());
            
             data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(SALES.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    */
    private void deletePurchaseProduct(String s,String s1,String s4) {
        PAK_SATELMENT_DB data =new PAK_SATELMENT_DB();
        Connection conn;
        try {
            conn = data.connect_database();   
            
            String rs[] = data.get_pQty_saleQty( conn, s,s4);
            if(data.check_product_line_item_presence_new(conn,s,s4,productCount)){
                /*
                String a = s3;
                String b = s2;
                String b1 = s;
                String c = data.get_clqty_wrt_pmast_code(conn, rs[0]);
                BigDecimal d = new BigDecimal("0.0");
                if (c != null) {
                    d = new BigDecimal(Float.parseFloat(c)).subtract(new BigDecimal(Float.parseFloat(rs[1])).add(new BigDecimal(Float.parseFloat(rs[2]))).add(new BigDecimal(Float.parseFloat(rs[3]))));
                }
                System.out.println("Seek" + s1);
                System.out.println("Code" + b1);
                System.out.println("CLQTY" + d);
                System.out.println("TQTY" + b);
                System.out.println("CLQTY" + c);
                boolean bool = data.update_clqty_in_pmast(conn, d + "", rs[0]);
                */
                data.delete_purchase_product(conn, s, s1);
            }
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void removeRow(int productIndex) {
        //System.out.println("purchaseProducts["+productIndex+"] : "+purchaseProducts[productIndex].getName());
        purchasePanel.remove(purchaseProducts[productIndex]);
        purchasePanel.revalidate();
        purchasePanel.repaint();
    }

    private void forBackBtnEnable(boolean b) {
       btnFirst.setEnabled(b);
       btnLast.setEnabled(b);
       btnPrior.setEnabled(b);
       btnNext.setEnabled(b);
    }

    private void recEditBtnEnable(boolean b) {
        btnAdd.setEnabled(b);
        btnDel.setEnabled(b);
        btnSearch.setEnabled(b);
        btnView.setEnabled(b);
        btnEdit.setEnabled(b);
    }

    private void saveUpdateBtnVisible(String s, boolean visibleProperty) {
        switch (s.toLowerCase()) {
            case "save":
                btnSave.setVisible(visibleProperty);
                break;
            case "update":
                btnUpdate.setVisible(visibleProperty);
                break;
            case "search":
                btnSearchNow.setVisible(visibleProperty);
                break;
            case "all":
                btnSearchNow.setVisible(visibleProperty);
                btnSave.setVisible(visibleProperty);
                btnUpdate.setVisible(visibleProperty);
                break;
        }
        btnCancel.setVisible(visibleProperty);
        btnAddRow.setVisible(visibleProperty);
        
    }

    private void textFieldsNotEditable(boolean b) {
        invNo.setEditable(b);
        netAmt.setEditable(b);
        linvNo.setEditable(b);
    }
    private void textFieldsEditable(boolean b) {
        oDate.setEnabled(b);
        refNo.setEditable(b);
        custCode.setEditable(b);
        suppName.setEnabled(b);
        remarks.setEnabled(b);
        dcode.setEditable(b);
        dName.setEnabled(b);
        textFieldsNotEditable(false);
        editableProductPanel(b); 
        
    }

    private void setNullTextFields() {
        invNo.setText("");
        oDate.setDate(null);
        refNo.setText("");
        custCode.setText("");
        try {
            buildOneComboBoxModel("", "type");//suppName.setText("");
        } catch (Exception ex) {
            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
        }
        remarks.setText("No Remarks");
        netAmt.setText("0.00");
        dcode.setText("");
        try {
            buildOneComboBoxModel("", "sm");//suppName.setText("");
        } catch (Exception ex) {
            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
        }
        inetializePrductPanel();
    }

    private void updateComboBox(JTextField textField,JComboBox comboBox,String c) throws Exception {
        comboBox.setModel(buildOneComboBoxModel(textField.getText(),c));
    }
    public static DefaultComboBoxModel buildAllComboBoxModel(String c) throws Exception {
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        PAK_SATELMENT_DB data =new PAK_SATELMENT_DB();
        Connection conn;
        ArrayList<String> elements = new <String> ArrayList() ;
        try {
            conn = data.connect_database();
            boolean tf=false;
             switch (c) {
                case "sm":
                    elements=data.find_all_sm_name_by_code(conn);
                    break;
                case "supp":
                    elements=data.find_all_supp_name_by_code(conn);
                    break;
                case "type":
                    elements=data.find_all_type_name_by_code(conn);
                    break;
            }if(elements!=null){    
                for(String s : elements){
                    comboBoxModel.addElement(s);
                }
            }else{
                JFrame j=new JFrame();
                    j.setAlwaysOnTop(true);
                    JOptionPane.showMessageDialog(j, "Not Edited", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
            }
            ////System.out.println("Is Inserted :"+ tf);
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
        }
        return comboBoxModel;
    }
    public DefaultComboBoxModel buildOneComboBoxModel(String name,String c) throws Exception {
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        PAK_SATELMENT_DB data =new PAK_SATELMENT_DB();
        Connection conn;
        String s="*** NOT SELECTED ***";
        try {
            conn = data.connect_database();
            switch (c) {
                    case "sm":
                        if(!name.equals("")){
                            s=data.find_sm_name_by_code(conn,name);
                            
                        }else{
                            comboBoxModel.addElement(name);
            //                JFrame j=new JFrame();
//                    j.setAlwaysOnTop(true);
//                    JOptionPane.showMessageDialog(j, "Emter Id Found");
                        }
                        break;
                    case "supp":
                        if(!name.equals("")){
                            s=data.find_supp_name_by_code(conn,name);
                        }else{
                            comboBoxModel.addElement(name);
            //                JFrame j=new JFrame();
//                    j.setAlwaysOnTop(true);
//                    JOptionPane.showMessageDialog(j, "Emter Id Found");
                        }
                        break;
                    case "type":
                        if(!name.equals("")){
                            s=data.find_type_name_by_code(conn,name);
                        }else{
                            comboBoxModel.addElement(name);
            //                JFrame j=new JFrame();
//                    j.setAlwaysOnTop(true);
//                    JOptionPane.showMessageDialog(j, "Emter Id Found");
                        }
                        break;
                }
            comboBoxModel.addElement(s);
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
        }
        return comboBoxModel;
    }

    private String getCode(String name,String c) {
        String s="";
        PAK_SATELMENT_DB data =new PAK_SATELMENT_DB();
        Connection conn;
        try {
            conn = data.connect_database();
            
            switch (c) {
                    case "sm":
                        if(!name.equals("")){
                            s=data.find_sm_code_by_name(conn,name.trim());
                        }else{
            //                JFrame j=new JFrame();
//                    j.setAlwaysOnTop(true);
//                    JOptionPane.showMessageDialog(j, "Emter Id Found");
                        }
                        break;
                    case "supp":
                        if(!name.equals("")){
                            s=data.find_supp_code_by_name(conn,name.trim());
                        }else{
            //                JFrame j=new JFrame();
//                    j.setAlwaysOnTop(true);
//                    JOptionPane.showMessageDialog(j, "Emter Id Found");
                        }
                        break;
                    case "type":
                        if(!name.equals("")){
                            s=data.find_type_code_by_name(conn,name.trim());
                        }else{
            //                JFrame j=new JFrame();
//                    j.setAlwaysOnTop(true);
//                    JOptionPane.showMessageDialog(j, "Emter Id Found");
                        }
                        break;
                }  
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
        }
        return s;
    }

    private void setFirstRec() throws ParseException {
        PAK_SATELMENT_DB data =new PAK_SATELMENT_DB();
        Connection conn;
        try {
            conn = data.connect_database();
            ArrayList<String> stock= data.get_first_purchase(conn);
            if(stock==null){
                setNullTextFields();
                JFrame j=new JFrame();
                    j.setAlwaysOnTop(true);
                    JOptionPane.showMessageDialog(j, "No data Found", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
            }else{
                setTextinPurchase(stock,dateField);
//                add.setText(stock.get(2));//from join 
//                cont.setText(stock.get(2));
            }
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setTextinPurchase(ArrayList<String> stock, Conversions dateField) {
        try {
            oDate.setDate(dateField.toDate(stock.get(0)));
            invNo.setText(stock.get(1));
            loadProductsPanel(invNo.getText());
            refNo.setText(stock.get(2));
            custCode.setText(stock.get(3));
            try {
                suppName.setModel(buildOneComboBoxModel(custCode.getText(),"type"));
            } catch (Exception ex) {
                Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
            }
//            frmSplPer();
            netAmt.setText(stock.get(4));
            remarks.setText(stock.get(5));
            dcode.setText(stock.get(6));
            String s="";
            if(stock.get(6).equals("1")){s="Stock In";}else if(stock.get(6).equals("2")){s="Stock Out";}
            try {
//                dName.setModel(buildOneComboBoxModel(dcode.getText(),"sm"));
                DefaultComboBoxModel s1 =new DefaultComboBoxModel();s1.addElement(s);
                dName.setModel(s1);
            } catch (Exception ex) {
                Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } catch (ParseException ex) {
            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
     private void recEditActionBtnVisible(boolean b) {
        btnSave.setVisible(b);
        btnUpdate.setVisible(b);
        btnSearchNow.setVisible(b);
        btnCancel.setVisible(b);
    }

    private void styleComboBox(JComboBox combo) {
        combo.setRenderer(new DefaultListCellRenderer() {
            public void paint(Graphics g) {
                super.paint(g);
            }
        });
    }

    private void setLastRec() throws ParseException {
        PAK_SATELMENT_DB data =new PAK_SATELMENT_DB();
        Connection conn;
        try {
            conn = data.connect_database();
            ArrayList<String> stock = data.get_last_purchase(conn);
            if(stock==null){
                JFrame j=new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Welcome Enter First Record", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
                btnAdd.doClick();
                btnCancel.setVisible(false);
                editableProductPanel(true);
            }else{
                setTextinPurchase(stock, dateField);
                editableProductPanel(false);
            }
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void setLastInvoice() {
        PAK_SATELMENT_DB data =new PAK_SATELMENT_DB();
        Connection conn;
        try {
            conn = data.connect_database();
            int max=data.find_max_in_purchase_code(conn);
            if(max==0){
                linvNo.setText(null);
            }else{
                linvNo.setText(max+"");
            }
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void inetializePrductPanel() {
        editableProductPanel(true);
        purchasePanel.removeAll();
        purchasePanel.revalidate();
        purchasePanel.repaint();
        productCount=0;
        purchasePanel.add(purchaseHeaderPanel);
        addRow();
    }

    private void editableProductPanel(boolean b) {
        for(int i=1;i<=productCount;i++){
           if(purchaseProducts[i]!=null){
               purchaseProducts[i].textFieldsEditableProducts(b);
           }
           
        }
    }

    private void loadProductsPanel(String text) {
        inetializePrductPanel();
        PAK_SATELMENT_DB data =new PAK_SATELMENT_DB();
        Connection conn;
        try {
            conn = data.connect_database();
            ArrayList<String> name[]=data.search_products(conn,text);
            removeRow(productCount);
            productCount--;
            int lastSeqNo=0;
            for(int i=0;i<name.length;i++){
                //System.out.println("name["+i+"].get(1)"+name[i].get(1));
                addRow(Integer.parseInt(name[i].get(1))-1);
                for(int j=0;j<15;j++){
                    System.out.println("j =====>... "+j);
                    switch(j)
                    {
                        case 0:
                            // Invoice No. is to just match with PERMAIN
                            break;
                        case 1:
                            purchaseProducts[productCount].setSeqNoText(name[i].get(j));
                            lastSeqNo=Integer.parseInt(name[i].get(j));
                            break;
                        case 2:
                            purchaseProducts[productCount].setSeek(name[i].get(j));
                            String temp = purchaseProducts[productCount].getSeekText();
                            purchaseProducts[productCount].setpName(temp);
                            break;
                        case 3:
                            purchaseProducts[productCount].setTotalQty(name[i].get(j));
                            purchaseProducts[productCount].frmCtn(purchaseProducts[productCount].getNoOfPcsInCtn());
                            purchaseProducts[productCount].frmPcs(purchaseProducts[productCount].getNoOfPcsInCtn()); 
                            break;
                        case 4:
                            purchaseProducts[productCount].setRate(name[i].get(j));
                            break;
                        case 5:
                            purchaseProducts[productCount].setNetAmt(name[i].get(j));
                            break;
                        case 6:
                            purchaseProducts[productCount].getExpDate().setDate(dateField.toDate(name[i].get(j)));
                            break;
                    }
                    purchaseProducts[productCount].setAllFieldData();
                }
                //System.out.println("");
            }
            updateSumSplPanel();
            productCount=lastSeqNo;
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
        }
        editableProductPanel(false);
    }

    private void updateSumSplPanel() {
        String sumNetAmt="";
        
        Float sumNetAmt1=0.0f;
        BigDecimal sumNetAmt2=new BigDecimal(sumNetAmt1+"");
        
        for(int i=1;i<=productCount;i++){
            if(purchaseProducts[i]!=null&&purchaseProducts[i].isDisplayable() ){
                sumNetAmt2=sumNetAmt2.add(BigDecimal.valueOf(Float.parseFloat(purchaseProducts[i].getNetAmtText())));
            }
        }sumNetAmt=round(sumNetAmt2,3)+"";
        try{
           netAmt.setText(sumNetAmt);
           BigDecimal result=new BigDecimal("0.0");
//           frmSplRs();
//           frmNetPayable();
//           frmRemaning();
        }catch(NumberFormatException ex){
            if(ex.getMessage()!=null ){
                if(ex.getMessage().matches("empty String")){
                }else{
                    JFrame j=new JFrame();j.setAlwaysOnTop(true);
                    JOptionPane.showMessageDialog(j, "Invalid Input", "InfoBox: ", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }
/*
    private void frmSplPer() {
        try{
            BigDecimal splRsBD = BigDecimal.valueOf(Float.parseFloat(splRs.getText()));
            BigDecimal netAmtBD = BigDecimal.valueOf(Float.parseFloat(netAmt.getText()));
            BigDecimal temp1 = splRsBD.multiply(new BigDecimal("100.0"));
            if (netAmtBD.compareTo(new BigDecimal("0"))==0) {
                splPer.setText(new BigDecimal("0")+"");
                System.out.println("===========");
            }else{
                BigDecimal result1 = temp1.divide(netAmtBD,3,BigDecimal.ROUND_HALF_UP);
                splPer.setText(round((result1),3)+"");
                System.out.println("+++++++++++");
            }
        }catch(NumberFormatException ex){
            if(ex.getMessage().matches("empty String")){
            }else{
                JFrame j=new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Invalid Input", "InfoBox: ", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
*//*
    private void frmSplRs() {
         try{
//            splRs.setText(round((Float.parseFloat(splPer.getText())*Float.parseFloat(netAmt.getText())/100),3)+"");
            BigDecimal splPerBD = BigDecimal.valueOf(Float.parseFloat(splPer.getText()));
            BigDecimal netAmtBD = BigDecimal.valueOf(Float.parseFloat(netAmt.getText()));
            BigDecimal temp1 = splPerBD.multiply(netAmtBD);
            BigDecimal result1 = temp1.divide(BigDecimal.valueOf(Float.parseFloat("100.0")),3,BigDecimal.ROUND_HALF_UP);
            splRs.setText(round((result1),3)+"");
        }catch(NumberFormatException ex){
            if(ex.getMessage().matches("empty String")){
//                //System.out.println("Do Nothing: "+ex);
            }else{
                JFrame j=new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Invalid Input", "InfoBox: ", JOptionPane.ERROR_MESSAGE);
                
//                //System.out.println("Number Format is InCorrect: "+ex.getMessage());
            }
        }
    }
     private void frmNetPayable() {
        try{
//           netpayable.setText(round((Float.parseFloat(netAmt.getText())-Float.parseFloat(splRs.getText()))+Float.parseFloat(otherExp.getText()),3)+"");
           
        }catch(NumberFormatException ex){
            if(ex.getMessage().matches("empty String")){
//                //System.out.println("Do Nothing: "+ex);
            }else{
                JFrame j=new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Invalid Input", "InfoBox: ", JOptionPane.ERROR_MESSAGE);
//                //System.out.println("Number Format is InCorrect: "+ex.getMessage());
            }
        }
    }

    private void frmRemaning() {
        try{
//           remaining.setText(round((Float.parseFloat(netpayable.getText())-Float.parseFloat(paid.getText())),3)+"");
            BigDecimal paidBD = BigDecimal.valueOf(Float.parseFloat(paid.getText()));
            BigDecimal netpayableBD = BigDecimal.valueOf(Float.parseFloat(netpayable.getText()));
            BigDecimal temp1 = netpayableBD.subtract(paidBD);
            remaining.setText(round((temp1),3)+"");
        }catch(NumberFormatException ex){
            if(ex.getMessage().matches("empty String")){
//                //System.out.println("Do Nothing: "+ex);
            }else{
                JFrame j=new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Invalid Input", "InfoBox: ", JOptionPane.ERROR_MESSAGE);
//                //System.out.println("Number Format is InCorrect: "+ex.getMessage());
            }
        }
    }
    */

   private void findRecords(String text) {
        PAK_SATELMENT_DB data =new PAK_SATELMENT_DB();
        Connection conn;
        try {
            conn = data.connect_database();
            ArrayList<String> s=data.find_purchase_by_code(conn, text);
            if (s!=null){
                saveUpdateBtnVisible("all", false);
                setTextinPurchase(s, dateField);
                textFieldsEditable(false);
                forBackBtnEnable(true);
                recEditBtnEnable(true);
                recEditActionBtnVisible(false);
            }else{
                JFrame j=new JFrame();
                j.setAlwaysOnTop(true);
                JOptionPane.showMessageDialog(j, "Not Found", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
            }
            System.out.println("Asset Found is findRecords:"+ s);
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private GraphicsEnvironment setEnvironment() {
        return getLocal();
    }

    private GraphicsEnvironment getLocal() {
        return GraphicsEnvironment.getLocalGraphicsEnvironment();
    }

    private void boundsSize() {
        this.setMaximizedBounds(setEnvironment().getMaximumWindowBounds());
    }

    private void extend() {
        this.setExtendedState(this.getExtendedState() | this.MAXIMIZED_BOTH);
    }

    private void maximize() {
        boundsSize();
        extend();
    }

    private int getIndex(String get) {
        int s=0;
        switch (get) {
            case "1":
                s=0;
//                s="Monthly";
                break;
            case "2":
                s=1;
//                s="Bi Monthly";
                break;
            case "3":
                s=2;
//                s="Quaterly";
                break;
            case "6":
                s=3;
//                s="Semi Anually";
                break;
            case "12":
                s=4;
//                s="Anually";
                break;
        }
        return s;
    }

    
    private void updateTableView(String c[],String s) {
        String r[][]=null;//searchLike(searchField.getText());
/*DOCNO,SALEQTY,SALERATE,DISCPER,TOTALSIZE,RETURNQTY,
        */
        PAK_SATELMENT_DB data =new PAK_SATELMENT_DB();
        Connection conn;
        try {
            conn = data.connect_database();
            boolean tf=false;
            r=data.search_history(conn, s,custCode.getText());
            System.out.println("Is Inserted :"+ tf);
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(SATELMET.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(r==null){
            JOptionPane.showMessageDialog(null, "No Row Found", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
        }else{
            initTable(c,r);   
        }
    }
    private void initTable(String colNames[],String rowData[][]) {
        String col[] = colNames;//{"File","Path"};
        String row[][] =rowData;
        model = new DefaultTableModel(row,col);

        custHistory=new JTable(model){
            private static final long serialVersionUID = 1L;

            public boolean isCellEditable(int row, int column) {                
                    return false;               
            };
        };
        custHistory.getAutoscrolls();
//        custHistory.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        custHistory.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
//        custHistory.setBackground(Color.WHITE);
        custHistory.setRowHeight(30);
//        custHistory.set
        JTableHeader header = custHistory.getTableHeader();
        
        header.setPreferredSize(new Dimension(100, 30));
        custHistory.setShowHorizontalLines(false);
        custHistory.setEnabled(true);
//        custHistory.setBackground(Color.darkGray);
//        custHistory.setForeground(Color.white);
        custHistory.enableInputMethods(false);
        custHistory.setShowVerticalLines(false);
        custHistory.setShowGrid(false);
        custHistory.setRowSelectionAllowed(true);
        
        selectionModel = custHistory.getSelectionModel();
        selectionModel.setSelectionInterval(0, 0);
        
        custHistory.getKeyListeners();
        custHistory.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent me) {
                JTable table =(JTable) me.getSource();
                Point p = me.getPoint();
                int row = table.rowAtPoint(p);
                if (me.getClickCount() == 2) {
                }
            }
        });
        custHistory.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "Enter");
        custHistory.getActionMap().put("Enter", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent ae) {
            }
        });
        custHistory.getColumnModel().getColumn(0).setPreferredWidth(120);
        custHistory.getColumnModel().getColumn(1).setPreferredWidth(120);
        jScrollPane2.setViewportView(custHistory);
    }
}