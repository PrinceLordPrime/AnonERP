/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DynamicERP.frames.mainpkg;

import ADMIN.ADMINPAGE;
import DB.PAK_DB;
import static DynamicERP.frames.mainpkg.LOGIN1.newLoggerClass;
import DynamicERP.frames.newdataentry.FIRMREC;
import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import logical.EcLogger;

/**
 *
 * @author DynamicSP
 */
public class AdminLogin extends javax.swing.JFrame {

    /**
     * Creates new form AdminLogin
     */
    public AdminLogin() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        txtUserId = new javax.swing.JTextField();
        btnexit = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        btnLogIn = new javax.swing.JButton();
        txtUserPass = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel5.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("User Name:");

        txtUserId.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        txtUserId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtUserIdFocusLost(evt);
            }
        });
        txtUserId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserIdActionPerformed(evt);
            }
        });
        txtUserId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUserIdKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUserIdKeyReleased(evt);
            }
        });

        btnexit.setBackground(new java.awt.Color(102, 102, 0));
        btnexit.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnexit.setForeground(new java.awt.Color(255, 255, 255));
        btnexit.setText("Exit ");
        btnexit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnexitActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Enter User Id:");

        jLabel3.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Password:");

        txtUserName.setEditable(false);
        txtUserName.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        txtUserName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserNameActionPerformed(evt);
            }
        });

        btnLogIn.setBackground(new java.awt.Color(102, 102, 0));
        btnLogIn.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnLogIn.setForeground(new java.awt.Color(255, 255, 255));
        btnLogIn.setText("Login");
        btnLogIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogInActionPerformed(evt);
            }
        });

        txtUserPass.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        txtUserPass.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtUserPassFocusLost(evt);
            }
        });
        txtUserPass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUserPassKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnLogIn, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnexit, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUserPass, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUserId, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtUserId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUserPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLogIn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnexit, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public String Class;public String Package;
    private void txtUserIdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUserIdFocusLost
        checkId();
    }//GEN-LAST:event_txtUserIdFocusLost

    private void txtUserIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserIdActionPerformed
        
    }//GEN-LAST:event_txtUserIdActionPerformed
    private void checkId() {
        if(!(txtUserId.getText().toString().equalsIgnoreCase(""))){
            PAK_DB data =new PAK_DB();
            Connection conn;
            try {
                conn = data.connect_database();
                String s=data.find_name_role_rec_by_id(conn, txtUserId.getText());
                if (s!=null){
                    txtUserName.setText(s);
                    txtUserPass.requestFocus();
                }else{
                    txtUserId.requestFocus();
                    txtUserId.selectAll();
                    JFrame j=new JFrame();
                    j.setAlwaysOnTop(true);
                    JOptionPane.showMessageDialog(j, "You Are Not Autorized", "InfoBox: ", JOptionPane.ERROR_MESSAGE);
                }
                System.out.println("Asset Found is :"+ s);
                data.close_database(conn);
            } catch (SQLException ex) {
                Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            JFrame j=new JFrame();
            j.setAlwaysOnTop(true);
            JOptionPane.showMessageDialog(j, "Please Enter Your Id  ", "InfoBox: ", JOptionPane.ERROR_MESSAGE);   
            txtUserId.requestFocus();
        }
    }
    private void txtUserIdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUserIdKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
//            checkId();
        }
    }//GEN-LAST:event_txtUserIdKeyPressed

    private void txtUserIdKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUserIdKeyReleased
        // TODO add your handling code here:

    }//GEN-LAST:event_txtUserIdKeyReleased

    private void btnexitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnexitActionPerformed
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_btnexitActionPerformed

    private void txtUserNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUserNameActionPerformed

    private void btnLogInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogInActionPerformed
        try {
            findtxtUserIdinDB(txtUserId);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(LOGIN1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnLogInActionPerformed

    private void txtUserPassFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUserPassFocusLost
        try {
            checkPass();
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(LOGIN1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtUserPassFocusLost

    private void txtUserPassKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUserPassKeyPressed
//        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
//        {
//            try {
//                checkPass();
//            } catch (UnsupportedEncodingException ex) {
//                Logger.getLogger(LOGIN1.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
    }//GEN-LAST:event_txtUserPassKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminLogin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogIn;
    private javax.swing.JButton btnexit;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField txtUserId;
    private javax.swing.JTextField txtUserName;
    private javax.swing.JPasswordField txtUserPass;
    // End of variables declaration//GEN-END:variables
    
    private boolean findtxtUserIdinDB(JTextField txtUserId) throws UnsupportedEncodingException {
        boolean b=false;
        PAK_DB data =new PAK_DB();
        Connection conn = null;
        try {
            conn = data.connect_database();
            String s=new String(txtUserPass.getPassword());
            if(data.compare(conn,txtUserId.getText(),s)){
                this.Class = txtUserId.getText();
                this.Package = new String(txtUserPass.getPassword());
                HashMap newClass= new HashMap();
                newClass.put(this.Class, this.Package);
                newLoggerClass= new LoggerClass((String)newClass.get(this.Class), (String) newClass.get(this.Package));
                if (newClass.containsKey((Object) newLoggerClass.getLoggerClass())) {
                    String storedPassword = data.get_password(conn,txtUserId.getText());
                    if (newClass.containsValue((Object)storedPassword)) {
                        ADMINPAGE admin = new ADMINPAGE();
                        admin.setVisible(true);
                        this.dispose();
                        b=true;
                    } else {
                        System.out.println("User does not exist 1");
                        JFrame LoginForm=new JFrame();
                        LoginForm.setAlwaysOnTop(true);
                        JOptionPane.showMessageDialog(LoginForm, "User does not exist ! Try again !", "ERROR", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                        System.out.println("User does not exist 2");
                    JFrame LoginForm=new JFrame();
                    LoginForm.setAlwaysOnTop(true);
                    JOptionPane.showMessageDialog(LoginForm, "User does not exist ! Try again !", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
                /*
                Persist s1 =new Persist(1,"one");//creating object  
                //writing object into file   
                FileOutputStream f=new FileOutputStream("Persist/f.txt");  
                ObjectOutputStream out=new ObjectOutputStream(f);  
                out.writeObject(s1);  
                out.flush();  

                out.close();  
                f.close();
                */
//            /*
            File fout = new File("out.txt");
            FileOutputStream fos = new FileOutputStream(fout);
            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));
            EcLogger ec = new EcLogger();
            bw.write(ec.classLoade(newLoggerClass.getLoggerClass()));
            bw.newLine();
            bw.write(ec.classLoade(newLoggerClass.getLoggerPackage()));
            bw.close();    


//            */    
          /*
          try{  
            FileInputStream fin=new FileInputStream("abc.txt");  
            int i=0;  
            while((i=fin.read())!=-1){  
             System.out.println((char)i);  
            }  
            fin.close();  
            }catch(Exception e){system.out.println(e);}  
        }        
        */      
                
                
//                MAIN m = MAIN.getInstance();
//                m.setVisible(true);
//                this.dispose();
//                b=true;
                
            }
            data.close_database(conn);
        } catch (SQLException ex) {
            Logger.getLogger(FIRMREC.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(LOGIN1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(LOGIN1.class.getName()).log(Level.SEVERE, null, ex);
        }
        /*
        catch (IOException ex) {
            EcLogger.getLogger(LOGIN1.class.getName()).log(Level.SEVERE, null, ex);
        }
        */
        return b;
    }
    
    
    private void checkPass() throws UnsupportedEncodingException {
        if(findtxtUserIdinDB(txtUserId)){
        }else{
            JFrame j=new JFrame();
            j.setAlwaysOnTop(true);
            JOptionPane.showMessageDialog(j, "Invalid Password", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);      
        }
    }
}
